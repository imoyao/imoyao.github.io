<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Python 计算你的现金流收益率</title>
      <link href="blog/2021-01-23/calculate-cash-flow-with-python/"/>
      <url>blog/2021-01-23/calculate-cash-flow-with-python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p>师爷：听说你理财了？<br>韭菜：巴菲特水平也就一般吧。<br>师爷：听说你去年理财了？<br>韭菜：我他妈哪年不理财？查理·芒格书写得还行。<br>师爷：听说你理财赚钱了？<br>韭菜：赚了！你不想知道我的年化收益吗？<br>师爷：对啊，多，多少呢？<br>韭菜：一个韭菜，碰上牛市，什么收益都能有！<br>师爷：嘘……你这个不知道天高地厚的赌徒、小韭菜！<br>韭菜：你说什么？<br>师爷：赌徒、韭菜！就是数据不够，要不然我非给你算明白了。<br>韭菜：好啊，来呀，看看你怎么算！你就只剩下一张嘴，写几行烂代码的臭码农！</p><footer><strong>《让韭菜飞》</strong></footer></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><table><thead><tr><th>函数语法</th><th>适用范围</th><th>备注</th></tr></thead><tbody><tr><td>NPV(rate,value1,[value2],…)</td><td>适用于定期（例如每月或每年）发生的现金流确定净现值。</td><td>每个现金流（指定为<code>value</code>）都发生在一个周期的末尾。<br> 如果第一期开始时有额外的现金流，应添加到 NPV 函数返回的值。</td></tr><tr><td>XNPV(rate, values, dates)</td><td>适用于以不规则时间间隔发生的现金流确定净现值。</td><td>每个现金流（指定为<code>value</code>）在计划的付款日期发生。</td></tr><tr><td>IRR(values,[guess])</td><td>适用于定期（例如每月或每年）发生的现金流确定内部收益率。</td><td>每个现金流（指定为<code>value</code>）都发生在一个周期的末尾。<br> IRR 通过迭代搜索过程计算，该过程从 IRR 的估计开始（指定为猜测值）然后反复改变该值，直到达到正确的 IRR。 指定 guess 参数是可选的；Excel 使用 10% 作为默认值。<br> 如果存在多个可接受的答案，则 IRR 函数仅返回找到的第一个答案。 如果 IRR 找不到任何答案，则返回#NUM！ 错误值。 如果出现错误或结果不是预期结果，请对 guess 使用不同的值。<br> <strong>注意</strong>：如果存在多个可能的内部收益率，则不同的猜测可能会返回不同的结果。</td></tr><tr><td>XIRR(values,dates,[guess])</td><td>适用于以不规则时间间隔发生的现金流确定内部收益率。</td><td>每个现金流（指定为<code>value</code>）在计划的付款日期发生。<br> XIRR 通过迭代搜索过程计算，该过程以 IRR 的估计值开始（指定为 猜测 值）然后反复改变该值，直到达到正确的 XIRR。 指定 guess 参数是可选的；Excel 使用 10% 作为默认值。<br> 如果存在多个可接受的答案，则 XIRR 函数仅返回找到的第一个答案。 如果 XIRR 找不到任何答案，则返回#NUM！ 错误值。 如果出现错误或结果不是预期结果，请对 guess 使用不同的值。<br> <strong>注意</strong>：如果存在多个可能的内部收益率，则不同的猜测可能会返回不同的结果。</td></tr><tr><td>MIRR(values,finance_rate,reinvest_rate)</td><td>适用于定期发生的现金流（如每月或每年）确定修改的内部收益率，并考虑投资成本和在再投资现金时收到的利息。</td><td>每个指定为值的现金流都发生在期末，但第一个现金流除外，该现金流指定为期初的值。<br> 在现金流中使用的资金所支付利率为 finance_rate。 在现金流上重新投资时收到的利率为 reinvest_rate。</td></tr></tbody></table><p><a href="https://www.amazon.cn/Microsoft-Excel-Analysis-Business-Modeling/dp/1509304215/">《Microsoft Excel Data Analysis and Business Modeling (5th Edition)》 【摘要 书评 试读】图书</a></p><h3 id="PMT"><a href="#PMT" class="headerlink" title="PMT"></a>PMT</h3><p>根据固定付款额和固定利率计算贷款的付款额。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ol><li>M 同学以年化 4.9%的贷款利率(rate_in_year)以首付 3 成的方式购买一套面积 100 平，单价 150000 的房子，贷款周期 30 年（year）:<br>则<code>pv = 100*150000*(1-0.3)        # 1050000</code><br>其中需要贷款金额（pv）1050000，<br>到还完贷款（fv=0），他需要每个月还贷款多少钱？<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pmt = PMT()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pmt(<span class="number">0.049</span>,<span class="number">30</span>,<span class="number">1050000</span>)</span><br><span class="line">-<span class="number">5572.630566539454</span></span><br></pre></td></tr></table></figure></li><li>为 3 年后的国际旅行存够 50000 元,年化利率 5%，则需要每个月存：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pmt(<span class="number">0.05</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">50000</span>)                                                              </span><br><span class="line">-<span class="number">1290.2115218999443</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="NPV（Net-Present-Value）"><a href="#NPV（Net-Present-Value）" class="headerlink" title="NPV（Net Present Value）"></a>NPV（Net Present Value）</h3><p>此方法的理论是将投资的未来现金流量，全部折现成投资始日的价值，称为该投资的<strong>净现金流量</strong>，或称为<strong>净现值</strong>。<br>净现值（NPV）通过计算每个投资期间的成本（负现金流）和收益（正现金流）来确定。期限通常为一年，但可以按季度，半年或数月来衡量。在计算每个时期的现金流量后，每个时期的现值（PV）是通过以定期收益率（市场规定的收益率）贴现其未来价值（见公式）来实现的。<br>假设投资的净现值为正数，代表该投资的结果可以增加企业的价值；反之，如果投资评估的净现值为负数，代表此投资会减少企业的价值，不应该接受。</p><h4 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h4><p>由于货币的时间值，今天收到一美元比明天收到一美元更有价值。 NPV 计算每个现金流系列的现值，并将它们相加得到净现值。每笔现金流入/流出被折算回其现值(PV)。然后对所有项进行求和。因此，NPV 是所有项的和。</p><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/mathpix 2021-01-23 12-17-05.png" alt=""><br>其中：<br><code>t</code> 是现金流的时间<br><code>i</code>是折现率/贴现率，即：具有相似风险的投资在每单位时间可获得的回报<br><code>Rt</code>是现金流，即：某个时期<code>t</code>的现金净流入-净流出额，出于教育目的，<code>R0</code> 通常放在总和的左侧，以强调其作为（减去）投资的作用。<br>该公式的结果乘以年度现金流入净额，然后减去初始现金支出的现值，但是如果现金流量的金额不相等，则将使用先前的公式来分别确定现金流量的现值。 12 个月内的任何现金流都不会被折现为净现值，但通常第一年的初始投资 R0 是负的现金流。</p><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/mathpix 2021-01-23 13-41-14.png" alt="NPV"></p><p>其中：<br>Rt：某个时期<code>t</code>的现金流（现金净流入-净流出额）<br>i：周期<br>N：方案计算期(<code>i</code>的次数)<br>对于固定的现金流<code>R</code>，净现值<code>NPV</code>是一个有限几何级数：</p><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/mathpix 2021-01-23 13-54-02.png" alt="NPV"></p><p>在上述公式中，包含<code>R0</code>项很重要。一个典型的资本项目包括一个大的负<code>R0</code>现金流(初始投资)和正的未来现金流(投资回报)。一个关键的评估是，对于给定的贴现率，净现值是正的(盈利)还是负的(亏损)。IRR 是 NPV 恰好为 0 时的折现率。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>某公司决定引进新的产品线。当 =0 时，公司的直接投入成本为 100,000。回想一下，一个花费对于流出的现金流是负的，因此这个现金流表示为−100,000。公司假设该产品从 t=1 开始，在 12 年的时间里，每年产生 10,000 元的同等收益。为简单起见，假设公司在最初投入 10 万成本之后没有现金流流出。这也简化了一种假设，即每年最后一天的净收入都集中在一笔交易中。在 12 年结束时，产品不再提供任何现金流，并且在没有任何额外成本的情况下停止生产。假设实际年贴现率（<code>i</code>）为 10%。</p><table><thead><tr><th>年份（Year）</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th></tr></thead><tbody><tr><td>现金流</td><td>-100000/(1+0.10)**0</td><td>10000/(1+0.10)**1</td><td>10000/(1+0.10)**2</td><td>10000/(1+0.10)**3</td><td>10000/(1+0.10)**4</td><td>10000/(1+0.10)**5</td><td>10000/(1+0.10)**6</td><td>10000/(1+0.10)**7</td><td>10000/(1+0.10)**8</td><td>10000/(1+0.10)**9</td><td>10000/(1+0.10)**10</td><td>10000/(1+0.10)**11</td></tr><tr><td>现值（PV）</td><td>9,090.91</td><td>8,264.46</td><td>7,513.15</td><td>6,830.13</td><td>6,209.21</td><td>5,644.74</td><td>5,131.58</td><td>4,665.07</td><td>4,240.98</td><td>3,855.43</td><td>3,504.94</td><td>3,186.31</td></tr></tbody></table><p>合计收入现金流：68,136.91，流出现金流量的总现值就是时间 t = 0 时的 100,000。则 NPV=68136.91-100000=-31953.09</p><h4 id="贴现率-折现率（discount-rate）"><a href="#贴现率-折现率（discount-rate）" class="headerlink" title="贴现率/折现率（discount rate）"></a>贴现率/折现率（discount rate）</h4><p>贴现率又称门槛比率（Europe称为the refinancing rate，UK称为repo rate，US称为discount rate），是指商业银行办理票据贴现业务时，按一定的利率计算利息，这种利率即为贴现率，它是票据贴现者获得资金的价格。常用于票据贴现。企业所有的应收票据，在到期前需要资金周转时，可用票据向银行申请贴现或借款。银行同意时，按一定的利率从票据面值中扣除贴现或借款日到票据到期日止的利息，而付给余额。贴现率的高低，主要根据金融市场利率来决定。</p><ul><li>举例</li></ul><p>比如A企业拥有B企业给的100元票据，票据上规定了A企业可以在一段时间后去银行支取票面金额100，但A企业现金流紧张，希望当下立刻拿到现金，A企业拿票据来银行进行兑换；因为货币是有时间价值的，银行通过计算，提出当下可以给企业98元，那么贴现率就是2%。</p><p><a href="https://en.wikipedia.org/wiki/Net_present_value">Net present value - Wikipedia</a></p><h3 id="IRR-Internal-Rate-of-Return"><a href="#IRR-Internal-Rate-of-Return" class="headerlink" title="IRR(Internal Rate of Return)"></a>IRR(Internal Rate of Return)</h3><p>内部回报率（英文：internal rate of return，缩写：IRR）是一种投资的评估方法，也就是找出资产潜在的回报率，其原理是利用内部回报率折现，投资的净现值恰好等于零。内部收益率（IRR）衡量投资的收益率。 “内部”一词是指内部利率不包括外部因素，如通货膨胀，资本成本或各种金融风险。</p><h4 id="计算公式-1"><a href="#计算公式-1" class="headerlink" title="计算公式"></a>计算公式</h4><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/mathpix 2021-01-23 10-49-56.png" alt="IRR"></p><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><ol><li>现金流必须定期（如每月或每年）出现。</li><li>时间本身是一个很大的变量<br>计算 NPV 是一个估值，例如折旧率和每年的现金流入等都是一个长远来看很难预测准确的值。预测的时间越长，预测是值越不会准确。所以如果根据计算，NPV 在很多年后才能是正数，那么这个年数就越不可靠。<br>然而企业投资决策除了要考虑净现值外，还需要考虑投资决策是否会影响行业内的竞争力，这种战略性考虑也是投资决策需要注重的部分。然而这些东西在计算 NPV 时都是无法考虑进去的。</li></ol><div class="note info modern"><h4 id="IRR-和-NPV-联系"><a href="#IRR-和-NPV-联系" class="headerlink" title="IRR 和 NPV 联系"></a>IRR 和 NPV 联系</h4><ol><li>净现值（NPV）和内部收益率（IRR）均被称为现金流量折现法，因为它们将金钱的时间价值纳入资本投资项目评估中。 净现值和内部收益率均基于一系列的未来付款（负现金流），收入（正现金流），亏损（负现金流）或“无收益者”（零现金流）。</li><li>IRR 函数与 NPV 函数密切相关。通过 IRR 计算得出的收益率对应于 0（零）NPV 的利率。</li><li>NPV 确定项目是否获得更多或低于所需的收益率 (也称为障碍率) 并且擅长找出项目是否会盈利。 IRR 比 NPV 更进一步来确定项目的特定收益率。 NPV 和 IRR 都提供可用于比较竞争项目并针对业务做出最佳选择的数字。<br>IRR 和 NPV 联系参阅：<a href="https://www.zhihu.com/question/27277841">IRR 和 NPV 的区别？ - 知乎</a></li></ol></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pmts = [-<span class="number">1000</span>, <span class="number">100</span>, -<span class="number">1300</span>, -<span class="number">2000</span>, <span class="number">5200</span>]</span><br><span class="line">irr = IRR()</span><br><span class="line">irr(pmts)</span><br></pre></td></tr></table></figure><p><a href="https://www.zhihu.com/question/23591242">公司理财实践中，净现值等经常被使用吗？估计的折现率是否可靠？ - 知乎</a><br><a href="https://www.zhihu.com/question/27693242">如何通俗易懂地解释折现率和贴现率 ? - 知乎</a></p><h3 id="XIRR"><a href="#XIRR" class="headerlink" title="XIRR"></a>XIRR</h3><p>若要利用 IRR 函数来计算报酬率，现金流量必须是以“一期”为单位，也就是输入的现金流量必须有期数的观念。但是常常有些应用，现金流量并非定期式的。XIRR 传回来的报酬率已经是年报酬率。<br>返回一组不一定定期发生的现金流的内部收益率。</p><h4 id="计算公式-2"><a href="#计算公式-2" class="headerlink" title="计算公式"></a>计算公式</h4><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/mathpix 2021-01-23 10-51-09.png" alt=""></p><h4 id="备注-1"><a href="#备注-1" class="headerlink" title="备注"></a>备注</h4><ol><li>XIRR 预期至少有一个正现金流和一个负现金流；否则，XIRR 返回#NUM！ 错误值。</li><li>如果日期中的任一数字不是有效日期，函数 XIRR 返回#VALUE！ 错误值。</li><li>如果日期中的任意数字在开始日期之前，函数 XIRR 返回#NUM！ 错误值。</li><li>如果值和日期包含不同数量的值，函数 XIRR 返回#NUM！ 错误值。</li><li>大多数情况下，不必为函数 XIRR 的计算提供 guess 值。 如果省略， guess 值假定为 0.1 (10%)。</li><li>函数 XIRR 与净现值函数 XNPV 密切相关。 函数 XIRR 计算的收益率即为函数 XNPV = 0 时的利率。</li></ol><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dates = [datetime.date(<span class="number">2008</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">             datetime.date(<span class="number">2008</span>, <span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">             datetime.date(<span class="number">2008</span>, <span class="number">10</span>, <span class="number">30</span>),</span><br><span class="line">             datetime.date(<span class="number">2009</span>, <span class="number">2</span>, <span class="number">15</span>),</span><br><span class="line">             datetime.date(<span class="number">2009</span>, <span class="number">4</span>, <span class="number">1</span>), ]</span><br><span class="line">values = [-<span class="number">10000</span>,</span><br><span class="line">        <span class="number">2750</span>,</span><br><span class="line">        <span class="number">4250</span>,</span><br><span class="line">        <span class="number">3250</span>,</span><br><span class="line">        <span class="number">2750</span>,</span><br><span class="line">        ]</span><br><span class="line">xirr = XIRR()</span><br><span class="line">xirr(values, dates)     <span class="comment"># 0.3733625335188317</span></span><br></pre></td></tr></table></figure><p><a href="https://support.microsoft.com/zh-cn/office/xirr-%E5%87%BD%E6%95%B0-de1242ec-6477-445b-b11b-a303ad9adc9d">XIRR 函数 - Office 支持</a></p><h3 id="MIRR（Modified-Internal-Rate-of-Return）"><a href="#MIRR（Modified-Internal-Rate-of-Return）" class="headerlink" title="MIRR（Modified Internal Rate of Return）"></a>MIRR（Modified Internal Rate of Return）</h3><blockquote><p>返回一系列定期现金流的修改内部收益率。 MIRR 同时考虑投资成本和在重新投资现金时收到的利息。</p></blockquote><p>IRR 到底有何缺点，需要去修正呢？主要的原因是 IRR 并未考虑期间领回现金再投资问题！IRR 的现金流量里可分为正值及负值两大类，正值部分属于投资期中投资者拿回去的现金，这些期中拿回去的现金该如何运用，会影响报酬率的。负值部分属于投资期中额外再投入的资金，这些资金的取得也有融资利率方面要考虑。</p><p>MIRR 使用的方式是将期间所有的现金流入，全部以“再投资利率”计算终值 FV。期间所有的现金流出，全部以“融资利率”计算现值 PV。</p><h4 id="计算公式-3"><a href="#计算公式-3" class="headerlink" title="计算公式"></a>计算公式</h4><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/mathpix 2021-01-24 22-56-24.png" alt="MIRR"><br>其中：</p><ul><li>n 为现金流的次数</li><li>frate 为 finance_rate</li><li>rrate 为 reinvest_rate</li></ul><h4 id="备注-2"><a href="#备注-2" class="headerlink" title="备注"></a>备注</h4><ul><li>MIRR 使用值的顺序来说明现金流的顺序。 一定要按您需要的顺序输入支出值和收益值，并使用正确的符号。<br><a href="https://support.microsoft.com/zh-cn/office/mirr-%E5%87%BD%E6%95%B0-b020f038-7492-4fb4-93c1-35c345b53524">MIRR 函数 - Office 支持</a></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>现金流正负问题<br>使用这些函数时，请特别注意如何处理第一期开始时发生的即时现金流以及期初发生的所有其他现金流。现金流指定为负值、正值或零值。</li><li>时间很重要<br>在计算时，要保持最先日期在前，按照时间顺序填入，否则可能计算结果与实际大相径庭</li><li>使用者定义期间长短<br>IRR 的参数并没有绝对日期，只有“一期”的概念。每一期可以是一年、一个月或一天，随著使用者自行定义。如果每一格是代表一个“月”的现金流量，那麽传回的报酬率就是“月报酬率”；如果每一格是代表一个“年”的现金流量，那麽传回的报酬率就是“年报酬率”。</li><li>guess——猜测报酬率可能的落点<br>guess 是个有趣的参数，IRR 函数的目的不就是要解出报酬率的值吗，怎么会要我们自己猜测报酬率的落点呢？这不是很奇怪吗，Excel 计算功能那么强，难道 IRR 函数无法直接解出来？没错， IRR 是无法解的！以[-100, -102, -104, -106, 450]这一组现金流量为例，等于得求出下列方程式中 rate 的解：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 &#x3D; -100+(-102&#x2F;(1+rate)^1)+(-104&#x2F;(1+rate)^2)+ (-106&#x2F;(1+rate)^3)+ (450&#x2F;(1+rate)^4)</span><br></pre></td></tr></table></figure>这就难了！因为有 4 次方。假若现金流量的期数更多，那就更复杂了，而且使用者会输入几期还不知道。还好虽然无法直接求解，Excel 使用代入逼近法，先假设一个可能的 rate(10%)，然后代入上面式子看看是否吻合，如果不是就变动 rate 的值，然后慢慢逼近、反复计算，直到误差小于 0.00001% 为止。如果真正的解和预设值差距过远，运算超过 20 次还是无法求得答案，IRR 函数会传回错误值 #NUM!。这时使用者就必须使用较接近的 guess 值，然后再试一次。<br>所以 guess 参数只是 IRR 函数开始寻找答案的起始点而已，跟找到的答案是无关。下面三个 IRR 公式，同样的现金流量，但是 guess 参数都不同，结果答案却都一样是 3.60%。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;IRR(&#123;-100, -102, -104, -106, 450&#125;)</span><br><span class="line">&#x3D;IRR(&#123;-100, -102, -104, -106, 450&#125;, 1% )</span><br><span class="line">&#x3D;IRR(&#123;-100, -102, -104, -106, 450&#125;, 2% )</span><br></pre></td></tr></table></figure>guess 是选项参数<br>guess 参数可以省略不输入，这时 Excel 会使用预设值 10%。通常这是一年为一期报酬率都落在这附近，如果要计算月报酬率最好输入 1%，依此类推。<br>参阅<a href="https://zhidao.baidu.com/question/1541287445672685307.html">Excel 在投资理财中的应用</a></li></ul><h3 id="复利终值和年金复利终值什么区别"><a href="#复利终值和年金复利终值什么区别" class="headerlink" title="复利终值和年金复利终值什么区别"></a>复利终值和年金复利终值什么区别</h3><blockquote><p>年金：金额相等，间隔时间相等<br>复利：利滚利</p></blockquote><p>复利终值，是针对一次性款项计算的未来时点的价值，比如说 2010 年发生一笔投入 100 元，问 2015 年的价值，这时则用复利终值系数计算。</p><p>年金终值，是一系列等额等间隔发生的款项的未来时点的价值，比如说 2010 年，2011 年，2012 年每年年末分别投入 100 元，则 2012 年的终值要用年金终值系数来计算。</p><p>年金终值就是在已知等额收付款金额、利率(这里我们默认为年利率)和计息期数 n 时，考虑货币的时间价值，计算出的这些收付款到到期时的等价票面金额。</p><p>复利终值指一定量的本金按照复利计算若干期后的本利和。复利是计算利息的一种方法。</p><p>按照这种方法，每经过一个计息期，要将所生利息加入本金再计利息，逐期滚算，俗称”利滚利”。这里所说的计息期是指相邻两次计息的时间间隔，如年、月、日等。除非特别指明，计息期为 1 年。</p><ul><li><p>复利现值和年金现值</p><p>假定利率的 5%，期限是 3 年。</p><ol><li><p>年金现值系数是：（P/A，5%，3），它的意思是说，未来 3 年里，每年年末都收到（支出）1 块钱，求这 3 年里总共收到（支出）的这些钱的现值是多少。（P/A，5%，3）*1 就表示这 3 年里总共收到（支出）的这些钱的现值。</p></li><li><p>复利现值系数是（P/F，5%，3），它的意思是说，未来的第 3 年年末将收到（支出）1 块钱，求 1 块钱的现值是多少。（P/F，5%，3）*1 就表示第 3 年年末收到（支出）1 块钱的现值。</p></li></ol></li></ul><ul><li><a href="http://www.canet.com.cn/shiwu/688174.html">复利终值和年金复利终值什么区别？_中国会计网</a></li><li><a href="https://zhuanlan.zhihu.com/p/67753967">年金与复利现值及终值的区别 - 知乎</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>数字不会说谎。知道收益回报率对理财来说很重要，明确收益才能知道一项投资是否值得我们倾注时间和资产。长坡厚雪，时间的积累会在平凡中给我们意外的惊喜。</p><blockquote><p>My papa once told me, “Son, it’s better to get your money as soon as possible and hold on to it as long as possible.” Later in life, I learned why. You can invest this money at a compounded interest rate, which means that your money can make you more money — and then some. In other words, when cash goes out or comes in is just as important as how much cash goes out or comes in.</p><p>我的父亲曾经告诉我：“儿子，最好尽快把钱装进口袋，并尽可能长久地持有下去。” 后来，我知道了缘由：我们可以按照复利投资这笔钱，这意味着您的钱可以使您赚更多钱——然后是更多。 换句话说，何时现金流出或流入与现金流出或流入多少同等重要。</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><h3 id="概念相关"><a href="#概念相关" class="headerlink" title="概念相关"></a>概念相关</h3><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%85%A7%E9%83%A8%E5%A0%B1%E9%85%AC%E7%8E%87">内部回报率 - 维基百科，自由的百科全书</a></li><li><a href="https://support.microsoft.com/en-us/office/go-with-the-cash-flow-calculate-npv-and-irr-in-excel-9e3d78bb-f1de-4f8e-a20e-b8955851690c">Go with the cash flow: Calculate NPV and IRR in Excel - Excel</a></li><li><a href="https://support.microsoft.com/zh-cn/office/%E9%87%87%E7%94%A8%E7%8E%B0%E9%87%91%E6%B5%81%EF%BC%9A%E5%9C%A8-excel-%E4%B8%AD%E8%AE%A1%E7%AE%97-npv-%E5%92%8C-irr-9e3d78bb-f1de-4f8e-a20e-b8955851690c">采用现金流：在 Excel 中计算 NPV 和 IRR - Excel</a></li><li><a href="https://support.microsoft.com/zh-cn/office/%E8%B4%A2%E5%8A%A1%E5%87%BD%E6%95%B0%EF%BC%88%E5%8F%82%E8%80%83%EF%BC%89-5658d81e-6035-4f24-89c1-fbf124c2b1d8">财务函数（参考） - Office 支持</a></li></ul><h3 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h3><ul><li><a href="https://github.com/Tacombel/XIRR.py">Tacombel/XIRR.py: XIRR function for PYTHON</a></li><li><a href="https://github.com/tarioch/xirr/">tarioch/xirr</a></li><li><a href="https://github.com/peliot/XIRR-and-XNPV">peliot/XIRR-and-XNPV: python implementation of Microsoft Excel’s XNPV and XIRR</a></li><li><a href="https://www.indiainfoline.com/article/research-articles/xirr-how-to-calculate-your-returns-38115077_1.html">XIRR: How to calculate your returns</a></li><li><a href="https://stackoverflow.com/questions/8919718/financial-python-library-that-has-xirr-and-xnpv-function">financial python library that has xirr and xnpv function? - Stack Overflow</a></li><li><a href="https://blog.csdn.net/qq_34105362/article/details/89146711">计算 XIRR_喜东东的博客-CSDN 博客_xirr 计算原理</a></li><li><a href="https://stackoverflow.com/questions/46668172/calculating-xirr-in-python">pandas - Calculating XIRR in Python - Stack Overflow</a></li><li><a href="https://github.com/RayDeCampo/nodejs-xirr">RayDeCampo/nodejs-xirr: Compute the internal rate of return of a sequences of transactions made at irregular periods.</a></li><li><a href="http://www.justdopython.com/2021/01/04/python-rate-of-return/">做时间的朋友，必须知道收益咋算 | Python 技术</a></li><li><a href="https://www.jianshu.com/p/9ad131856078">Python 数据分析_Numpy 中的金融函数 - 简书</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TODO </tag>
            
            <tag> IRR </tag>
            
            <tag> XIRR </tag>
            
            <tag> MIRR </tag>
            
            <tag> XNPV </tag>
            
            <tag> 理财 </tag>
            
            <tag> 经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Python 递归目录并按照特定规则修改其下文件夹及文件名</title>
      <link href="blog/2020-12-12/recurse-rename-dirname-and-file-with-python/"/>
      <url>blog/2020-12-12/recurse-rename-dirname-and-file-with-python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div class="note danger modern"><p><strong>风险提示</strong></p><ol><li>git 用户执行操作前，请确保你的 git 工作区是 clean 的（所有代码已 push）或者可 revert/reset 的（commited），否则修改导致出现问题本人不负连带责任；</li><li>如果是重要文件，普通用户操作前请确保将目录数据备份到安全区域；</li></ol></div><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>最近发现微软有一个小工具专门做这件事：👉<a href="https://docs.microsoft.com/zh-cn/windows/powertoys/powerrename">适用于 Windows 10 的 PowerToys PowerRename 实用工具 | Microsoft Docs</a>，试用了一下还是很香的！如果只是在<em>单个目录</em>做文件重命名这件事，可能这个工具比我做得更好。（bug 更少）😳</p><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/Snipaste_2021-01-20_21-16-08.png" alt="PowerToys PowerRename"></p><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>在使用 <a href="https://github.com/xugaoyi/vuepress-theme-vdoing">vuepress-theme-vdoing</a> 主题构建自己的个人知识库的时候，有一个需求是需要重命名自己的文档文件名和文档目录。</p><blockquote><p>命名约定</p><ul><li>无论是<strong>文件</strong>还是<strong>文件夹</strong>，请为其名称添加上正确的<strong>正整数序号</strong>和<code>.</code>，从<code>00</code>或<code>01</code>开始累计，如<code>01.文件夹</code>、<code>02.文件.md</code>，我们将会按照序号的顺序来决定其在侧边栏当中的顺序。</li><li>同一级别目录别内即使只有一个文件或文件夹也要为其加上序号。</li><li>文件或文件夹名称中间不能出现多余的点<code>.</code>，如<code>01.我是.名称.md</code>中间出现<code>.</code>将会导致解析错误。</li></ul></blockquote><p>详情参阅：<a href="https://doc.xugaoyi.com/vuepress-theme-vdoing-doc/pages/33d574/">构建结构化站点的核心配置和约定 | vuepress-theme-vdoing</a></p><p>本来想直接手动修改的，改了一点之后感觉工作量有点大，然后去网上找轮子，但是发现找到的都不是很满足自己的需求，所以只能自己动手造一个了。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ol><li>使用<code>os.walk</code>遍历指定目录</li><li>将文件重命名<br>文件重命名时由于具有后缀名<code>md</code>，所以除了后缀名中的部分，其余部分如果有<code>.</code>则用下划线替代；但是，如果开头是数字点的结构，则直接保留。如：<ul><li><code>01.this.is-test-file-name.md</code>修改后应该为<code>01.this-is-test-file-name.md</code></li><li><code>02-this.is-another-test-file-name.md</code>修改后应该为<code>02.this-is-another-test-file-name.md</code></li><li><code>this-is-normal-test-file-name.md</code>修改后应该为<code>03.this-is-normal-test-file-name.md</code></li><li><code>this-is007.abnormal-file-name.md</code>修改后应该为<code>04.this-is007-abnormal-file-name.md</code></li></ul></li><li>将目录重命名<ol><li>应该先修改文件，后面从内向外修改</li><li>部分 vuepress 主题原有目录、我们自定义排除的目录及目录下的子文件应该排除，不能修改</li></ol></li></ol><h2 id="show-me-code"><a href="#show-me-code" class="headerlink" title="show me code"></a>show me code</h2><ol><li>遍历目录<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 某个你需要处理的目录</span></span><br><span class="line">ROOT_PATH = <span class="string">&#x27;some/path/you/will/deal&#x27;</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(ROOT_PATH):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li>遍历时需要排除某些我们不需要修改的目录及目录下的文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">current_path = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">ROOT_PATH = os.path.join(current_path, <span class="string">&#x27;docs&#x27;</span>)  <span class="comment"># 需要执行的目录</span></span><br><span class="line">EXCLUDE_DIR = [<span class="string">&#x27;.vuepress&#x27;</span>, <span class="string">&#x27;@pages&#x27;</span>, <span class="string">&#x27;_posts&#x27;</span>, <span class="string">&#x27;styles&#x27;</span>]       <span class="comment"># 需要排除的目录</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(ROOT_PATH, topdown=<span class="literal">True</span>):</span><br><span class="line">    dirs[:] = [d <span class="keyword">for</span> d <span class="keyword">in</span> dirs <span class="keyword">if</span> d <span class="keyword">not</span> <span class="keyword">in</span> EXCLUDE_DIR]</span><br><span class="line">    print(dirs)</span><br></pre></td></tr></table></figure></li><li>自底向顶<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(ROOT_PATH, topdown=<span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li>因为需要同时排除目录和目录子文件。所以我们把排除方法写成一个函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;排除给定过滤条件的选项&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_not_in</span>(<span class="params">seq, exclude</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 not in</span></span><br><span class="line"><span class="string">    :param all_seq: </span></span><br><span class="line"><span class="string">    :param filter_seq: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [item <span class="keyword">for</span> item <span class="keyword">in</span> seq <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> exclude]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_filter_sth</span>(<span class="params">seq, exclude</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用filter</span></span><br><span class="line"><span class="string">    :param seq: </span></span><br><span class="line"><span class="string">    :param exclude: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x <span class="keyword">not</span> <span class="keyword">in</span> exclude, seq))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_subtract_set</span>(<span class="params">seq, exclude</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    差集法</span></span><br><span class="line"><span class="string">    :param seq: </span></span><br><span class="line"><span class="string">    :param exclude: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">set</span>(seq) - <span class="built_in">set</span>(exclude))</span><br></pre></td></tr></table></figure>对于上述处理方案，选择性能更好的：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">8888</span>))</span><br><span class="line">B = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2000</span>, <span class="number">6666</span>))</span><br><span class="line">nt = timeit.Timer(<span class="keyword">lambda</span>: not_in(A, B))</span><br><span class="line">ft = timeit.Timer(<span class="keyword">lambda</span>: filter_sth(A, B))</span><br><span class="line">st = timeit.Timer(<span class="keyword">lambda</span>: subtract_set(A, B))</span><br><span class="line">x = nt.timeit(<span class="number">5</span>)</span><br><span class="line">y = st.timeit(<span class="number">5</span>)</span><br><span class="line">z = ft.timeit(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">f&#x27;not_in:<span class="subst">&#123;x&#125;</span>, subtract_set:<span class="subst">&#123;y&#125;</span>, filter_sth:<span class="subst">&#123;z&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># not_in:5.2498173, subtract_set:0.008623699999999346, filter_sth:4.9613408</span></span><br></pre></td></tr></table></figure>参见<a href="https://stackoverflow.com/questions/3013449/list-comprehension-vs-lambda-filter">python - List comprehension vs. lambda + filter - Stack Overflow</a>。</li><li>处理规则<ol><li>对于文件</li></ol><ul><li>只处理<code>markdown</code>文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_md_file</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    指定文件是md文件</span></span><br><span class="line"><span class="string">    :param file_path:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> pathlib.PurePath(file_path).suffix[<span class="number">1</span>:].lower() == <span class="string">&#x27;md&#x27;</span></span><br></pre></td></tr></table></figure></li><li>如果已经以数字开头，则按以下规则处理<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg_startswith</span>(<span class="params">check_str, reg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    10.dsgfdh.md  &gt;&gt;&gt; re.match.obj</span></span><br><span class="line"><span class="string">    dsgfdh  &gt;&gt;&gt; None</span></span><br><span class="line"><span class="string">    :param check_str:str,被检查字符</span></span><br><span class="line"><span class="string">    :param reg:str,正则表达式</span></span><br><span class="line"><span class="string">    :return:匹配对象或None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> re.match(<span class="string">f&#x27;^<span class="subst">&#123;reg&#125;</span>&#x27;</span>, check_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test_list = [<span class="string">&#x27;10.dsgfdh.md&#x27;</span>, <span class="string">&#x27;dsgfdh&#x27;</span>, <span class="string">&#x27;00xxx&#x27;</span>, <span class="string">&#x27;88,yyy&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> test <span class="keyword">in</span> test_list:</span><br><span class="line">        print(reg_startswith(test, REG_EXP))</span><br></pre></td></tr></table></figure><ol><li>如果剩余名字部分以<code>[&#39;.&#39;, &#39;-&#39;, &#39;_&#39;]</code>开头，则排除分隔符之后替换剩余部分中的<code>.</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_rename</span>(<span class="params">sub_line</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    _xx.yyy:xx-yyy</span></span><br><span class="line"><span class="string">    xx-yyy:xx-yyy</span></span><br><span class="line"><span class="string">    xx.yyy:xx-yyy</span></span><br><span class="line"><span class="string">    -xx.yyy:xx-yyy</span></span><br><span class="line"><span class="string">    .xx-yyy:xx-yyy</span></span><br><span class="line"><span class="string">    你好:你好</span></span><br><span class="line"><span class="string">    💻:💻</span></span><br><span class="line"><span class="string">    :param sub_line:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sub_line <span class="keyword">and</span> sub_line[<span class="number">0</span>] <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>]:</span><br><span class="line">        slice_symbol_str = sub_line[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        slice_symbol_str = sub_line</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> slice_symbol_str:</span><br><span class="line">        str_replace_dot_inline = slice_symbol_str.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        rename_str = str_replace_dot_inline</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rename_str = slice_symbol_str</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rename_str</span><br></pre></td></tr></table></figure></li><li>否则加数字并加<code>.</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_action</span>(<span class="params">_root, path_item, is_file=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="keyword">nonlocal</span> count, count_set</span><br><span class="line">    add_suffix = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> is_file:</span><br><span class="line">        add_suffix = <span class="string">&#x27;.md&#x27;</span></span><br><span class="line"></span><br><span class="line">    reg_exp = <span class="string">r&#x27;\d+&#x27;</span></span><br><span class="line">    reg_match_obj = reg_startswith(path_item, reg_exp)</span><br><span class="line">    <span class="keyword">if</span> reg_match_obj:</span><br><span class="line">        <span class="comment"># 本来有数字</span></span><br><span class="line">        digital = reg_match_obj.group()</span><br><span class="line">        count = <span class="built_in">int</span>(digital)</span><br><span class="line">        count_set.add(count)</span><br><span class="line">        <span class="keyword">if</span> is_file:</span><br><span class="line">            deal_line = pathlib.PurePath(path_item).stem</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            deal_line = pathlib.PurePath(path_item).parts[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        sub_line = re.sub(reg_exp, <span class="string">&quot;&quot;</span>, deal_line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> sub_line.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">            sub_line = sub_line[<span class="number">1</span>:]</span><br><span class="line">        sub_name = make_rename(sub_line)</span><br><span class="line">        new_name_with_suffix = <span class="string">f&#x27;<span class="subst">&#123;digital&#125;</span>.<span class="subst">&#123;sub_name&#125;</span><span class="subst">&#123;add_suffix&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> is_file:</span><br><span class="line">            path_str = pathlib.PurePath(path_item).stem</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            path_str = pathlib.PurePath(path_item).parts[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        new_name = make_rename(path_str)</span><br><span class="line">        <span class="comment"># 找出最大count，然后+1作为新编号</span></span><br><span class="line">        <span class="keyword">if</span> count_set:</span><br><span class="line">            count = <span class="built_in">max</span>(count_set)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        count_set.add(count)</span><br><span class="line"></span><br><span class="line">        new_name_with_suffix = <span class="string">f&#x27;<span class="subst">&#123;count:02&#125;</span>.<span class="subst">&#123;new_name&#125;</span><span class="subst">&#123;add_suffix&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    old = os.path.join(_root, path_item)</span><br><span class="line">    new = os.path.join(_root, new_name_with_suffix)</span><br><span class="line">    <span class="keyword">return</span> old, new</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>对于目录<br>执行处理文件时的 2 规则</p></li><li><p>文件和目录重命名的规则不同</p><ul><li>文件最后重名的时候需要加后缀<code>.md</code>，目录直接重命名即可</li><li>文件取文件 <a href="https://docs.python.org/zh-cn/3/library/pathlib.html#pathlib.PurePath.stem">pathlib.PurePath.stem</a> 即可，而目录需要取 <a href="https://docs.python.org/zh-cn/3/library/pathlib.html#pathlib.PurePath.parts">pathlib.PurePath.parts</a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> is_file:</span><br><span class="line">    deal_line = pathlib.PurePath(path_item).stem</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    deal_line = pathlib.PurePath(path_item).parts[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li>处理方法<br>文件路径重命名<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename_path</span>(<span class="params">old, new</span>):</span></span><br><span class="line">    p = pathlib.Path(<span class="string">fr&#x27;<span class="subst">&#123;old&#125;</span>&#x27;</span>)</span><br><span class="line">    target = pathlib.Path(<span class="string">fr&#x27;<span class="subst">&#123;new&#125;</span>&#x27;</span>)</span><br><span class="line">    p.rename(target)</span><br></pre></td></tr></table></figure>源码下载：<a href="https://github.com/imoyao/code-snippets/tree/master/codes/vdoing_rename">vdoing_rename</a></li></ol><h2 id="疑问困惑"><a href="#疑问困惑" class="headerlink" title="疑问困惑"></a>疑问困惑</h2><ol><li><p><code>[:]</code>的作用是什么？<br><a href="https://stackoverflow.com/questions/10155951/what-is-the-difference-between-slice-assignment-that-slices-the-whole-list-and-d">python - What is the difference between slice assignment that slices the whole list and direct assignment? - Stack Overflow</a><br><a href="https://stackoverflow.com/questions/4081561/what-is-the-difference-between-list-and-list-in-python">What is the difference between list and list[:] in python? - Stack Overflow</a></p></li><li><p><code>os.walk</code>如何排除指定目录？<br>参见<a href="https://stackoverflow.com/questions/19859840/excluding-directories-in-os-walk">python - Excluding directories in os.walk - Stack Overflow</a></p></li><li><p><code>nonlocal</code>关键字<br>实现闭包函数内部使用外部变量</p></li><li><p>对<code>os.walk</code>中的<code>topdown</code>参数的理解</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir root</span><br><span class="line"><span class="built_in">cd</span> root</span><br><span class="line">mkdir \</span><br><span class="line">  d0 \</span><br><span class="line">  d1 \</span><br><span class="line">  d0/d0_d1</span><br><span class="line">touch \</span><br><span class="line">  f0 \</span><br><span class="line">  d0/d0_f0 \</span><br><span class="line">  d0/d0_f1 \</span><br><span class="line">  d0/d0_d1/d0_d1_f0</span><br><span class="line">  d1/d1_f0</span><br></pre></td></tr></table></figure><p>查看目录结构：</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tree</span> /f</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">└─root</span><br><span class="line">    │  f0</span><br><span class="line">    │</span><br><span class="line">    ├─d0</span><br><span class="line">    │  │  d0_f0</span><br><span class="line">    │  │  d0_f1</span><br><span class="line">    │  │</span><br><span class="line">    │  └─d0_d1</span><br><span class="line">    │          d0_d1_f0</span><br><span class="line">    │</span><br><span class="line">    └─d1</span><br><span class="line">            d1_f0</span><br></pre></td></tr></table></figure><p>分别测试 topdown 的传参</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">current_path = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">ROOT_PATH = os.path.join(current_path, <span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">top_down_args = [<span class="literal">True</span>, <span class="literal">False</span>]</span><br><span class="line"><span class="keyword">for</span> top_down <span class="keyword">in</span> top_down_args:</span><br><span class="line">    print(<span class="string">f&#x27;Top_down is <span class="subst">&#123;top_down&#125;</span> ……&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(ROOT_PATH, topdown=top_down):</span><br><span class="line">        <span class="keyword">for</span> dir_item <span class="keyword">in</span> dirs:</span><br><span class="line">            print(<span class="string">f&#x27;dir is:<span class="subst">&#123;dir_item&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> f_item <span class="keyword">in</span> files:</span><br><span class="line">            print(<span class="string">f&#x27;file is <span class="subst">&#123;f_item&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Top_down is True ……</span><br><span class="line">dir is:d0</span><br><span class="line">dir is:d1</span><br><span class="line">file is f0</span><br><span class="line">dir is:d0_d1</span><br><span class="line">file is d0_f0</span><br><span class="line">file is d0_f1</span><br><span class="line">file is d0_d1_f0</span><br><span class="line">file is d1_f0</span><br><span class="line"></span><br><span class="line">Top_down is False ……</span><br><span class="line"></span><br><span class="line">file is d0_d1_f0</span><br><span class="line">dir is:d0_d1</span><br><span class="line">file is d0_f0</span><br><span class="line">file is d0_f1</span><br><span class="line">file is d1_f0</span><br><span class="line">dir is:d0</span><br><span class="line">dir is:d1</span><br><span class="line">file is f0</span><br></pre></td></tr></table></figure><p>我们可以看到：</p></li><li>在<code>topdown</code>传参<code>True</code>的时候，返回结果按照由外（根目录）向内的顺序扫描：<br>先扫描目录 d0，接着是 d1 目录，然后是 f0，然后进入 d0 目录，扫描到 d0_d1 目录和文件 d0_f0 与 d0_f1，然后进入 d0_d1 扫描到 d0_d1_f0，最后得到 d1_f0</li><li>在<code>topdown</code>传参<code>False</code>的时候，返回结果按照由内（根目录）向外的顺序扫描：<br>先扫描最里层的 d0_d1 目录得到 d0_d1_f0，扫描完 d0_d1 目录之后扫描 d0_d1 目录，之后到 d1 目录中的 d1_f0，最后到 f0 文件。</li></ol><blockquote><p>当 <code>topdown</code> 为 <code>True</code> 时，调用者可以就地修改 <code>dirnames</code> 列表（也许用到了 <a href="https://docs.python.org3/reference/simple_stmts.html#del"><code>del</code></a> 或切片），而 <code>walk()</code>将仅仅递归到仍保留在 <code>dirnames</code> 中的子目录内。这可用于减少搜索、加入特定的访问顺序，甚至可在继续 <code>walk()</code>之前告知 <code>walk()</code> 由调用者新建或重命名的目录的信息。当 <code>topdown</code> 为 <code>False</code> 时，修改 <code>dirnames</code> 对 walk 的行为没有影响，因为在自下而上模式中，<code>dirnames</code> 中的目录是在 <code>dirpath</code> 本身之前生成的。</p><footer><strong>os.walk,</strong><cite><a href="https://docs.python.org/zh-cn/3/library/os.html#os.walk">docs.python.org/zh-cn/3/library/os.html#os.walk</a></cite></footer></blockquote><p>我们改写代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> top_down <span class="keyword">in</span> top_down_args:</span><br><span class="line">    print(<span class="string">f&#x27;Top_down is <span class="subst">&#123;top_down&#125;</span> ……&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(ROOT_PATH, topdown=top_down):</span><br><span class="line">        <span class="keyword">if</span> dirs:</span><br><span class="line">            print(dirs, <span class="string">&#x27;=======ddd=========&#x27;</span>)</span><br><span class="line">            dirs[:] = [dirs[<span class="number">0</span>]]     <span class="comment"># 注意此行</span></span><br><span class="line">            print(<span class="string">f&#x27;==after=slice====ddd=====<span class="subst">&#123;dirs&#125;</span>====&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> dir_item <span class="keyword">in</span> dirs:</span><br><span class="line">                print(<span class="string">f&#x27;dir is:<span class="subst">&#123;dir_item&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> f_item <span class="keyword">in</span> files:</span><br><span class="line">            print(<span class="string">f&#x27;file is <span class="subst">&#123;f_item&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><br>返回结果：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># topdown为True时</span><br><span class="line">Top_down is True ……</span><br><span class="line">[&#39;d0&#39;, &#39;d1&#39;] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ddd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;after&#x3D;slice&#x3D;&#x3D;&#x3D;&#x3D;ddd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[&#39;d0&#39;]&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">dir is:d0</span><br><span class="line">file is f0</span><br><span class="line">[&#39;d0_d1&#39;] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ddd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;after&#x3D;slice&#x3D;&#x3D;&#x3D;&#x3D;ddd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[&#39;d0_d1&#39;]&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">dir is:d0_d1</span><br><span class="line">file is d0_f0</span><br><span class="line">file is d0_f1</span><br><span class="line">file is d0_d1_f0</span><br><span class="line"></span><br><span class="line"># topdown为False时</span><br><span class="line">Top_down is False ……</span><br><span class="line">file is d0_d1_f0</span><br><span class="line">[&#39;d0_d1&#39;] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ddd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;after&#x3D;slice&#x3D;&#x3D;&#x3D;&#x3D;ddd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[&#39;d0_d1&#39;]&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">dir is:d0_d1</span><br><span class="line">file is d0_f0</span><br><span class="line">file is d0_f1</span><br><span class="line">file is d1_f0</span><br><span class="line">[&#39;d0&#39;, &#39;d1&#39;] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ddd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;after&#x3D;slice&#x3D;&#x3D;&#x3D;&#x3D;ddd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[&#39;d0&#39;]&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">dir is:d0</span><br><span class="line">file is f0</span><br></pre></td></tr></table></figure><br>对比结果，我们发现当<code>topdown</code>为<code>True</code>时，d1 目录可以通过切片等操作，如：<a href="https://stackoverflow.com/questions/31015780/python-os-walk-topdown-true-with-regular-expression">regex - Python os.walk topdown true with regular expression - Stack Overflow</a> 被原地修改而过滤掉；但是当<code>topdown</code>为<code>False</code>时，即使上面的代码一样，d1 目录还是会被扫描到。所以说<code>topdown</code>为<code>True</code>时可以<em>用于减少搜索、加入特定的访问顺序</em>。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/">Why you should be using pathlib - Trey Hunner</a><br><a href="http://ominian.com/2016/03/29/os-walk-for-pathlib-path/">os.walk for pathlib.Path | Refactored scope</a> </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TODO </tag>
            
            <tag> os.walk </tag>
            
            <tag> pathlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把两个 Git 仓库合并起来</title>
      <link href="blog/2020-12-07/merge-repos-with-git/"/>
      <url>blog/2020-12-07/merge-repos-with-git/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>本人主题使用 <a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly: 🦋 A Hexo Theme: Butterfly</a> ，但是在此基础上又做了一些自定义。用过一段时间之后，作者的源仓库可能更新了很多没有的功能。之前的时候，每次都是手动 compare 并合并的，但是实践了两次之后，发现存在以下问题：</p><ol><li>每次升级<strong>十分</strong>耗时</li><li>自己定义的功能在合并时可能丢失或遗漏</li></ol><p>鉴于此，本文尝试使用一种较为智能的方式解决以上问题。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL,DR"></a>TL,DR</h2><p>要想将源仓库（origin repo）合入（dest repo）中，那么可以将（origin repo）伪造成（dest repo）仓库的一个分支，然后合并到（dest repo）仓库中的指定分支（本文为 dev）。</p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol><li>本地新建目录<code>butterfly</code></li><li>克隆目标仓库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/imoyao/hexo-theme-butterfly.git imoyao</span><br></pre></td></tr></table></figure></li><li>克隆源仓库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jerryc127/hexo-theme-butterfly.git</span><br></pre></td></tr></table></figure><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/20201207222903.png" alt="克隆两个仓库分别作为子目录"></li><li>将源目录（jerryc）作为远程仓库添加到目标仓库（imoyao），并命名为<code>jerryc</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add jerryc ../jerryc</span><br></pre></td></tr></table></figure></li><li>从源仓库下载数据到本仓库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch jerryc</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">remote: Enumerating objects: 139, done.</span><br><span class="line">remote: Counting objects: 100% (137&#x2F;137), done.</span><br><span class="line">remote: Compressing objects: 100% (28&#x2F;28), done.</span><br><span class="line">remote: Total 58 (delta 45), reused 43 (delta 30)</span><br><span class="line">Unpacking objects: 100% (58&#x2F;58), done.</span><br><span class="line">From ..&#x2F;jerryc</span><br><span class="line"> * [new branch]      dev        -&gt; jerryc&#x2F;dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note success modern"><p><strong>git fetch</strong><br><a href="https://git-scm.com/docs/git-fetch">Git - git-fetch Documentation</a></p><blockquote><p>git-fetch - Download objects and refs from another repository<br>git fetch 是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。</p><p>而 git pull 则是将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决。</p></blockquote></div></li><li><p>查看此时仓库信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 88b1cc553ce3c2b5e53dccb2ff259ddb078c333b (HEAD -&gt; dev, origin/dev, origin/HEAD)</span><br><span class="line">Author: Jerry &lt;***@gmail.com&gt;</span><br><span class="line">commit 88b1cc553ce3c2b5e53dccb2ff259ddb078c333b (HEAD -&gt; dev, origin/dev, origin</span><br><span class="line">/HEAD)</span><br><span class="line">Author: Jerry &lt;***@gmail.com&gt;</span><br><span class="line">Date:   Sat Nov 21 00:27:01 2020 +0800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略内容</span></span><br><span class="line"></span><br><span class="line">commit 88b1cc553ce3c2b5e53dccb2ff259ddb078c333b (HEAD -&gt; dev, origin/dev, origin</span><br><span class="line">/HEAD)</span><br><span class="line">Author: Jerry &lt;***@gmail.com&gt;</span><br><span class="line">Date:   Sat Nov 21 00:27:01 2020 +0800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略内容</span></span><br><span class="line"></span><br><span class="line">commit 7f03c3f71696fde1f1d3f1e969844ecde3d7f805</span><br><span class="line">Author: Jerry &lt;***@gmail.com&gt;</span><br><span class="line">Date:   Tue Nov 3 22:20:16 2020 +0800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略内容</span></span><br><span class="line"></span><br><span class="line">```plain</span><br><span class="line">7. 将源仓库下载下来的 dev 分支作为新分支 checkout 到目标分支`updatedev`</span><br><span class="line">```bash</span><br><span class="line">git checkout -b updatedev jerryc/dev</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switched to a new branch &#39;updatedev&#39;</span><br><span class="line">Branch &#39;updatedev&#39; set up to track remote branch &#39;dev&#39; from &#39;jerryc&#39;.</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info modern"><p>此时分支状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  dev           # 我的开发分支</span><br><span class="line">  master        # 我的主分支</span><br><span class="line">* updatedev     # 作者和我的fetch之后的分支</span><br></pre></td></tr></table></figure></p></div></li><li><p>切换到我的<code>dev</code>分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><div class="note info modern"><p>此时分支状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">  updatedev</span><br></pre></td></tr></table></figure></p></div></li><li><p>合并<code>fetch</code>的分支代码到我的<code>dev</code>分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge updatedev</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Updating 88b1cc5..dc1c7c5</span><br><span class="line">Fast-forward</span><br><span class="line"> _config.yml                                        |  6 +-</span><br><span class="line"> languages&#x2F;default.yml                              |  6 +-</span><br><span class="line"> languages&#x2F;en.yml                                   |  2 +</span><br><span class="line"> languages&#x2F;zh-CN.yml                                |  4 +-</span><br><span class="line"># 中间省略</span><br><span class="line"> source&#x2F;css&#x2F;_mode&#x2F;readmode.styl                     | 19 +++--</span><br><span class="line"> source&#x2F;js&#x2F;main.js                                  | 91 ++++++++++++++++------</span><br><span class="line"> source&#x2F;js&#x2F;utils.js                                 | 13 +++-</span><br><span class="line"> 31 files changed, 374 insertions(+), 169 deletions(-)</span><br><span class="line"> create mode 100644 layout&#x2F;includes&#x2F;third-party&#x2F;newest-comments&#x2F;twikoo-comment.pug</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note warning modern"><p>补充：如果遇到如下报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure><br>那么可以<code>git merge</code>时加上<code>--allow-unrelated-histories</code>后缀：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge repo1 --allow-unrelated-histories</span><br></pre></td></tr></table></figure></p></div></li><li><p>查看合并后代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit dc1c7c5efdbb92de10a44cec2e15d16b84823ce7 (HEAD -&gt; dev, jerryc/dev, updatedev)</span><br><span class="line">Merge: 02af307 97fe932</span><br><span class="line">Author: Jerry Wong &lt;***@gmail.com&gt;</span><br><span class="line">Date:   Mon Dec 7 21:17:09 2020 +0800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略内容</span></span><br><span class="line"></span><br><span class="line">commit 97fe932ad9c22fa4b5690d38b33242eed11742f0</span><br><span class="line">Author: 零度冷咖啡 &lt;***@outlook.com&gt;</span><br><span class="line">Date:   Mon Dec 7 08:25:02 2020 +0800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略内容</span></span><br><span class="line"></span><br><span class="line">commit 01e7929c02a5fd018ab3171a381487a78f2df05c</span><br><span class="line">Merge: 7c3945f 02af307</span><br><span class="line">Author: 零度冷咖啡 &lt;***@outlook.com&gt;</span><br><span class="line">Date:   Mon Dec 7 08:22:17 2020 +0800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略内容</span></span><br><span class="line"></span><br><span class="line">commit 02af3077e71d02071ad3c7e8b159149310597513</span><br><span class="line">Author: Jerry &lt;***@gmail.com&gt;</span><br><span class="line">Date:   Sat Dec 5 22:28:54 2020 +0800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略内容</span></span><br><span class="line"></span><br><span class="line">commit 88b1cc553ce3c2b5e53dccb2ff259ddb078c333b (origin/dev, origin/HEAD)</span><br><span class="line">Author: Jerry &lt;***@gmail.com&gt;</span><br><span class="line">Date:   Sat Nov 21 00:27:01 2020 +0800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/Snipaste_2020-12-07_23-04-14.png" alt="点击可查看大图"></p><p>横向拼图参考 <a href="https://jingyan.baidu.com/article/b0b63dbf2eb2264a483070f0.html">此处</a></p></li><li><p>删除无用的<code>fetch</code>分支<code>updatedev</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -D updatedev</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deleted branch updatedev (was dc1c7c5).</span><br></pre></td></tr></table></figure></li><li>提交到远程仓库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Administrator@PC201803221826 MINGW64 /h/mycode/butterfly/imoyao (dev)</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">Administrator@PC201803221826 MINGW64 /h/mycode/butterfly/imoyao (dev)</span><br><span class="line">$ git commit -m <span class="string">&#x27;updatedev&#x27;</span></span><br><span class="line">On branch dev</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/dev&#x27;</span> by 4 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">Administrator@PC201803221826 MINGW64 /h/mycode/butterfly/imoyao (dev)</span><br><span class="line">$ git push</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com.cnpmjs.org/imoyao/hexo-theme-butterfly.git</span><br><span class="line">   88b1cc5..dc1c7c5  dev -&gt; dev</span><br></pre></td></tr></table></figure>同样的道理，我们可以把<code>master</code>分支与原作者保持同步。这个留给读者去实践练习。</li></ol><h2 id="更上一层楼"><a href="#更上一层楼" class="headerlink" title="更上一层楼"></a>更上一层楼</h2><p>把我自己修改的合并到我的仓库中。</p><ol><li>拷贝目录到同级目录<br><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/20201208003600.png" alt="三个同级文件夹"></li><li>初始化为仓库（否则无法执行 git 合并）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialized empty Git repository in H:&#x2F;mycode&#x2F;butterfly&#x2F;masantu&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure></li><li>在 masantu 仓库中 add 并 commit 代码作为一次提交<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;init mycode to repo&#x27;</span></span><br></pre></td></tr></table></figure></li><li>添加远程仓库<code>masantu</code>并命名为<code>masantu</code><br>关于这条命令的解释<a href="https://git-scm.com/docs/git-remote#Documentation/git-remote.txt-emaddem">Git - git-remote Documentation</a><blockquote><p>git remote add [shortname] [url]<br>Add a remote named <name> for the repository at <url>. The command git fetch <name> can then be used to create and update remote-tracking branches <name>/<branch>.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add masantu ../masantu</span><br></pre></td></tr></table></figure></blockquote></li><li>将<code>masantu</code>仓库的代码拉到<code>imoyao</code>仓库中<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch masantu</span><br><span class="line">warning: no common commits</span><br><span class="line">remote: Enumerating objects: 261, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (261/261), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (259/259), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 261 (delta 18), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (261/261), 259.62 KiB | 1.08 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (18/18), <span class="keyword">done</span>.</span><br><span class="line">From ../masantu</span><br><span class="line"> * [new branch]      master     -&gt; masantu/master</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>以<code>masantu/master</code>作为基准新建分支<code>upmst</code>(updatemasantu 的简写)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b upmst masantu/master</span><br><span class="line">Switched to a new branch <span class="string">&#x27;upmst&#x27;</span></span><br><span class="line">Branch <span class="string">&#x27;upmst&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;masantu&#x27;</span>.</span><br></pre></td></tr></table></figure><div class="note info modern"><p>此时分支状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  dev</span><br><span class="line">* upmst</span><br><span class="line">  master</span><br></pre></td></tr></table></figure></p></div></li><li><p>切换分支到<code>dev</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/dev&#x27;</span>.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* dev</span><br><span class="line">  upmst</span><br><span class="line">  master</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>合并<code>masantu</code>分支到<code>dev</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge upmst --allow-unrelated-histories</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONFLICT (add&#x2F;add): Merge conflict in source&#x2F;js&#x2F;utils.js</span><br><span class="line">Auto-merging source&#x2F;js&#x2F;utils.js</span><br><span class="line"># 省略内容</span><br><span class="line">Auto-merging source&#x2F;css&#x2F;_global&#x2F;function.styl</span><br><span class="line">CONFLICT (add&#x2F;add): Merge conflict in package.json</span><br></pre></td></tr></table></figure></li><li>手动解决冲突</li><li>测试（如果必要）并提交合并的代码</li><li>删除刚才的分支和添加的远程源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D upmst</span><br><span class="line">git remote remove masantu</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2></li></ol><p><a href="http://www.itmuch.com/work/merge-two-git-repo-unrelated/">合并两个不相关的 Git 仓库 | 周立的博客 - 关注 Spring Cloud、Docker</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客个性化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费个人博客图床解决方案</title>
      <link href="blog/2020-12-06/images-hosting/"/>
      <url>blog/2020-12-06/images-hosting/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写博客的时候需要引用很多图片，一种常见的方式是在仓库中新建一个目录然后引用。但是这样的话在网页查看时会有点慢。所以本文试图寻求一种直接、有效、方便、免费（尽量或者很实惠）的图床方案。</p><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics@master/images/20180915163013.gif" alt="鱼和熊掌，不可兼得"></p><h2 id="自建图床"><a href="#自建图床" class="headerlink" title="自建图床"></a><del>自建图床</del></h2><p>这种方案可满足接受备案（实名认证）及付费用户的需求。</p><h3 id="又拍云"><a href="#又拍云" class="headerlink" title="又拍云"></a><del>又拍云</del></h3><p>需要域名备案</p><h3 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a><del>七牛云</del></h3><ol><li>https 图片外链收费</li><li>需要域名备案</li></ol><h3 id="阿里云-OSS"><a href="#阿里云-OSS" class="headerlink" title="阿里云 OSS"></a>阿里云 OSS</h3><p>阿里云 OSS 计费由四个部分组成: 存储费用 + 流量费用 + 请求费用 + 数据处理费用</p><h2 id="免费图床"><a href="#免费图床" class="headerlink" title="免费图床"></a><del>免费图床</del></h2><p>（不够安全和方便）</p><h3 id="sm-ms"><a href="#sm-ms" class="headerlink" title="sm.ms"></a>sm.ms</h3><p><a href="https://sm.ms/">Image Upload - SM.MS - Simple Free Image Hosting</a></p><blockquote><p>5 MB max per file. 10 files max per request.</p></blockquote><h3 id="聚合图床-免费无限图片上传"><a href="#聚合图床-免费无限图片上传" class="headerlink" title="聚合图床 - 免费无限图片上传"></a><a href="https://www.superbed.cn/">聚合图床 - 免费无限图片上传</a></h3><blockquote><p>单图最大 5M，1000 个文件</p></blockquote><p>限制条件<a href="https://www.superbed.cn/vip">见此</a></p><h3 id="路过图床-免费图片上传-专业图片外链-免费公共图床"><a href="#路过图床-免费图片上传-专业图片外链-免费公共图床" class="headerlink" title="路过图床 - 免费图片上传, 专业图片外链, 免费公共图床"></a><a href="https://imgchr.com/">路过图床 - 免费图片上传, 专业图片外链, 免费公共图床</a></h3><blockquote><p>全球 CDN 加速, 支持外链, 原图保存, 最大单张支持 10 MB</p></blockquote><p>限制条件<a href="https://imgchr.com/page/tos">服务条款 - 路过图床</a></p><h3 id="搜爱图床"><a href="#搜爱图床" class="headerlink" title="搜爱图床"></a><a href="https://i.sofever.com/">搜爱图床</a></h3><blockquote><p>又一个靠爱发电的免费图床</p></blockquote><h3 id="图床测试"><a href="#图床测试" class="headerlink" title="图床测试"></a>图床测试</h3><p>为了实验上述免费图床的有效性，我分别上传了一张图片以供测试。如果他们的服务可用，则可以在下方看到图片被正常加载。如果只是临时使用，可以点击图片直达使用。</p><p><a href="https://imgchr.com/i/DXaxFs"><img src= "/img/loading.svg" data-lazy-src="https://s3.ax1x.com/2020/12/06/DXaxFs.jpg" alt="路过图床"></a></p><p><a href="https://www.superbed.cn/"><img src= "/img/loading.svg" data-lazy-src="https://pic.downk.cc/item/5fcc7602394ac5237839e4bf.jpg" alt="聚合图床"></a></p><p><a href="https://sm.ms/"><img src= "/img/loading.svg" data-lazy-src="https://i.loli.net/2020/12/06/ZODeJTQL7vpSBaW.jpg" alt="Image Upload - SM.MS - Simple Free Image Hosting"></a></p><p><a href="https://imgkr.com/"><img src= "/img/loading.svg" data-lazy-src="https://static01.imgkr.com/temp/77df24ba89314c24bff7750f10b4d187.jpg" alt="图壳"></a></p><p><a href="https://postimages.org/"><img src= "/img/loading.svg" data-lazy-src="https://i.postimg.cc/tRNvCQQR/image.jpg" alt="postimages"></a></p><p><a href="https://i.sofever.com/"><img src= "/img/loading.svg" data-lazy-src="https://i.sofever.com/dispatch/3f32f1602f93c974f59d15bef9d27e13" alt="Snipaste_2021-01-19_20-16-37.png"></a></p><h3 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h3><p><a href="https://github.com/0xDkd/auxpi">0xDkd/auxpi: 🍭 集合多家 API 的新一代图床</a><br><a href="https://github.com/staugur/picbed">staugur/picbed: 基于 Flask 的 Web 自建图床，支持存储到又拍云、七牛云、阿里云 OSS、腾讯云 COS、GitHub、Gitee</a></p><h2 id="真的免费"><a href="#真的免费" class="headerlink" title="真的免费"></a>真的免费</h2><h3 id="服务提供商-jsDelivr"><a href="#服务提供商-jsDelivr" class="headerlink" title="服务提供商 jsDelivr"></a>服务提供商 jsDelivr</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// load any GitHub release, commit, or branch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// note: we recommend using npm for projects that support it</span></span><br><span class="line"></span><br><span class="line">https:<span class="comment">//cdn.jsdelivr.net/gh/user/repo@version/file</span></span><br></pre></td></tr></table></figure><p>比如，我们在用户名（imoyao）下创建仓库（statics），则分支（master/main）下的文件（file_path_with_name）可以通过 CDN 获取。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;图片上床到Github仓库的地址</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;&#123;imoyao&#125;&#x2F;&#123;statics&#125;&#x2F;tree&#x2F;&#123;master&#125;&#x2F;&#123;file_path_with_name&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;jsdelivr链接地址</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;&#123;imoyao&#125;&#x2F;&#123;statics&#125;@&#123;master&#125;&#x2F;&#123;file_path_with_name&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li>借助 GoodSync/freefilesync（待验证）实现主站、博客、wiki 中的图片备份到 static 目录；</li><li>图床目录中的图片全部进行无损压缩；</li><li>将 post 中的图片链接替换为 jsDelivr；</li></ol><h3 id="文件夹同步软件"><a href="#文件夹同步软件" class="headerlink" title="文件夹同步软件"></a>文件夹同步软件</h3><h4 id="GoodSync-vs-freefilesync"><a href="#GoodSync-vs-freefilesync" class="headerlink" title="GoodSync vs freefilesync"></a>GoodSync vs freefilesync</h4><blockquote><p>关于备份，有两个极优秀的软件我不得不提——Macrium Reflect 和 GoodSync。如果说 Macrium 为我提供了整套的系统以及磁盘备份的解决方案，那么 GoodSync 可以说是只要有正在运行的系统（它也可以运行在 U 盘里）存在，它可以解决任何的备份、同步、传输需求。</p><p>它支持任意（可以非本机，可以在内网，可以是云存储）文件夹到任意文件夹备份与同步。</p><p>同时它还支持自动执行同步、备份功能，通过检测文件夹的变动，所以它可以满足我上述的两个需求。</p></blockquote><p>参考阅读<a href="https://www.appinn.com/goodsync-2019/">文件同步工具 GoodSync 限免又来了，这货到底有什么用？ - 小众软件</a></p><p>最终选择：<a href="https://freefilesync.org/download.php">FreeFileSync</a></p><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/20201206160024.png" alt="配置自定义规则"></p><div class="note warning modern"><p><strong>注意</strong></p><p>同步配置时选择<em>自定义</em>，上方选择文件对比时可能出现的情形，下方选择当出现配置情形时需要做的相应处理动作，最好不要把右侧镜像目录的图片删除。如果对自己的配置不确定，请保证回收站可用的同时对处理逻辑进行测试！</p></div><p>使用教程：<a href="https://zhuanlan.zhihu.com/p/140026821">强大的备份软件 FreeFileSync - 知乎</a></p><h3 id="剪切图片直接上传仓库"><a href="#剪切图片直接上传仓库" class="headerlink" title="剪切图片直接上传仓库"></a>剪切图片直接上传仓库</h3><p>使用 PicGo 直接上传仓库，参见：<a href="https://github.com/Molunerfinn/PicGo">Molunerfinn/PicGo: A simple &amp; beautiful tool for pictures uploading built by vue-cli-electron-builder</a></p><h3 id="定期对图片进行无损压缩"><a href="#定期对图片进行无损压缩" class="headerlink" title="定期对图片进行无损压缩"></a>定期对图片进行无损压缩</h3><p>按需查找：<a href="https://tinypng.com/third-party">TinyPNG – Third-Party Solutions</a><br>插件版：<a href="https://plugins.jetbrains.com/plugin/11573-tinypng-image-optimizer">TinyPNG Image Optimizer - IntelliJ IDEs | JetBrains</a><br>更多参见：<a href="https://www.zhihu.com/question/20432364">有没有一个批量压缩图片软件？ - 知乎</a><br>Github Action<a href="https://github.com/marketplace/actions/tinify-image-action">Tinify Image Action · Actions · GitHub Marketplace</a></p><h3 id="图片去重"><a href="#图片去重" class="headerlink" title="图片去重"></a>图片去重</h3><p>使用<a href="http://www.bigbangenterprises.de/en/doublekiller/download.htm">DoubleKiller - Download [english] (Big Bang enterprises)</a>对上传 Github 仓库的图片进行去重。<br><a href="https://www.zhihu.com/question/35069783">寻找一款清理电脑中重复文件的软件? - 知乎</a></p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>视频文件较大，我们不要上传到 Github 仓库中，直接使用视频图床即可。<br>参见：<a href="http://imgbed.cn/">图床 - 图片上传, 外链, 高清原图, 永久免费, 支持视频上传</a></p><p>由于上面的网站只支持最大 5M 的视频，所以我们可以使用 OneDrive 网盘存储我们的文件，然后使用下面的网站解析直链使用：</p><p><a href="https://onedrive.gimhoy.com/">OneDrive 网盘永久外链地址生成工具</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>博客尽量少加图片</li><li>尽量将图片放在博客目录下，不使用图床</li><li>对于不重要的图片，可以使用免费图床</li><li>可以购买一些付费的专门的图床服务</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://sspai.com/post/40499">嗯，图片就交给它了 - 少数派</a><br><a href="https://sspai.com/post/55032">无需注册、打开即用，这 8 个免费好用的图床工具值得一试 - 少数派</a><br><a href="https://www.jianshu.com/p/2b14396a6eb2">更换博客图床 - 简书</a><br><a href="https://yi-yun.github.io/%E5%9B%BE%E5%BA%8A%E7%9A%84%E9%80%89%E6%8B%A9/">可能是最佳的免费图床 | 斯是陋室，惟吾德馨</a><br><a href="https://glumes.com/post/life/blog-image-migrate/">博客图床迁移记</a><br><a href="https://wdd.js.org/the-hard-way-of-markdown-insert-images.html">markdown 博客图床上传的艰辛之路 | 洞香春</a><br><a href="http://tengj.top/2019/08/18/tuchuang/">博客图床最佳解决方案 | 嘟嘟独立博客</a><br><a href="https://v2ex.com/t/551634">各位 v 友，你们博客的图床都采用什么方案啊 - V2EX</a></p>]]></content>
      
      
      <categories>
          
          <category> 善用佳软 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 图床 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>庖丁解牛 | 任务分解，各个击破</title>
      <link href="blog/2020-12-05/browse-your-tasks/"/>
      <url>blog/2020-12-05/browse-your-tasks/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>范围确定<br>有所为有所不为，先确定主要矛盾是什么。</li><li>目标分解 </li><li>优先级确定 </li><li>可执行化任务分解 </li><li>进入跟踪系统</li></ol><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>把大任务分解成小任务，工时估计会更加准确</li><li>面对以前没做过的需求，通过任务分解遍历一次，熟悉度提升之后就不会恐慌</li><li>反复推演，全盘考虑，避免返工</li><li>关注当下，只做有实际意义的事情</li></ol><h2 id="如何实践"><a href="#如何实践" class="headerlink" title="如何实践"></a>如何实践</h2><p>这里给大家推荐一个小技巧，心理学上叫做激励。我们可以把分解完的步骤罗列在自己的笔记本上，然后每完成一个步骤就拿笔在后面打一个勾，这样做能给自己带来一定的成就感和满足感。</p><p>相对于小任务来说，大目标规模比较大，非常有必要对其进行分层处理。都要有一个中心思想。这个中心思想下面，可能会有几个主分论点，而每一个主分论点下面可能还会有几个二级主分论点，一直细分到每一个子论点。</p><p>我们在分解大目标的时候，就可以借鉴上面这种分层思想去操作。</p><p>以个人成长为例，我们的核心目标就是成为一个更好的自己。那么这个核心目标就可以分解成思想（学识更渊博）、经济（财务自由度更高）、健康（身体素质更好）、人际（跟身边人相处得更好）四个主目标。就经济主目标而言，我们又可以分解成开源（提升赚钱能力）和节流（提升理财能力）两个次主目标。接下来还可以把节流目标再次分解，分解成理财（储蓄和投资）和消费（理性消费）两部分。就这样，我们可以继续细分下去，一直到了现实当中可操作的每一个动作。</p><p>通过目标分解，我们会意识到这些事情虽然复杂，要做好的难度比较高，但是并非不可企及。先将大目标分解成小目标，然后再一步步通过实现小目标的方式，看到一条有希望实现大目标的道路。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p>关于产品有两个令人不快的事实：<br>真相 1：我们至少有一半的想法行不通。<br>真相 2：即使是好主意，也要经过多次迭代才能变得可行。</p><footer><strong>eBay 创始团队成员马蒂·卡根（Marty Cagan）</strong><cite><a href="https://mgadams.com/the-founders-guide-to-actually-understanding-users-c68feaecac44">mgadams.com/the-founders-guide-to-actually-understanding-users-c68feaecac44</a></cite></footer></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/29117340">任务分解的五个步骤 - 知乎</a><br><a href="https://www.cnblogs.com/levenyes/p/10783861.html">2019 年程序员最值得学习的思维利器——任务分解 - LevenYes - 博客园</a></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> FMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TODO </tag>
            
            <tag> 项目 </tag>
            
            <tag> OKR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将代码打补丁（patch）？</title>
      <link href="blog/2020-11-04/git-patch-apply/"/>
      <url>blog/2020-11-04/git-patch-apply/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在基于开源项目做二次开发的时候，我们可能会在某一个版本号上开始，然后做开发。当开发进行一段时间之后，远程上面的代码可能已经和我们的代码大相径庭了，这个时候想要合并就会变得相对比较困难，所以在此记录一下流程。</p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><h3 id="查找-patch-开始的-id"><a href="#查找-patch-开始的-id" class="headerlink" title="查找 patch 开始的 id"></a>查找 patch 开始的 id</h3><p>一般来说，我们二次开发时会先拉取分支作为本地仓库，即第一次 git init 的内容是和开源某一个分支或者 tag 代码完全一致。<br><img src= "/img/loading.svg" data-lazy-src="/images/Snipaste_2020-11-04_18-08-50.png" alt="init 提交"><br>所以我们需要把 init 之后的第一次代码作为补丁的开始端（该仓库第二次提交），找到该提交的 commi id。</p><h3 id="生成-patch-文件"><a href="#生成-patch-文件" class="headerlink" title="生成 patch 文件"></a>生成 patch 文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git format-patch 703ae2b80580e1xxx3f718d428572b50</span><br></pre></td></tr></table></figure><h3 id="应用-patch"><a href="#应用-patch" class="headerlink" title="应用 patch"></a>应用 patch</h3><ol><li>一般来说，我们使用<code>git am</code>就可以将补丁应用上去<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">imoyao@DESKTOP-NIQS11K MINGW64 /d/Gerrit/dashboard (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git am ../patches/0029-fix-bug-16115-fix-bug-16117.patch</span></span><br><span class="line">Applying: fix bug 16115:关机之后无法点击开机;fix bug 16117:批量点灯也需要传节点名称;</span><br></pre></td></tr></table></figure>没有 error 则表示补丁打成功了。但是，有的提交里面难免会有冲突，这个时候<code>am</code>打补丁会报错：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">imoyao@DESKTOP-NIQS11K MINGW64 /d/Gerrit/dashboard (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git am ../patches/0031-fix-bug-16115-1.-socket-host.patch</span></span><br><span class="line">error: patch failed: controllers/host.py:13</span><br><span class="line">error: controllers/host.py: patch does not apply</span><br><span class="line">error: patch failed: controllers/ipmitool.py:484</span><br><span class="line">error: controllers/ipmitool.py: patch does not apply</span><br><span class="line">Applying: fix bug:16115:xxx</span><br><span class="line">Use &#x27;git am --show-current-patch&#x27; to see the failed patch</span><br><span class="line">When you have resolved this problem, run &quot;git am --continue&quot;.</span><br><span class="line">If you prefer to skip this patch, run &quot;git am --skip&quot; instead.</span><br><span class="line">To restore the original branch and stop patching, run &quot;git am --abort&quot;.</span><br></pre></td></tr></table></figure>如果直接<code>am</code>报错（上一步不可跳过），此时操作流程如下：</li><li><p>尝试以 apply 的方式直接 <a href="https://git-scm.com/docs/git-apply#Documentation/git-apply.txt---reject">reject</a> 到源码上。</p><div class="note info modern"><p><strong>reject</strong><br>为了满足原子性，<code>git apply</code>命令默认在某些 hunks 无法应用时会直接返回失败且不会创建工作树，该配置使补丁可以部分应用同时将那些被拒绝的内容直接保留在<code>*.rej</code> 文件中。</p></div><blockquote><p>For atomicity, git apply by default fails the whole patch and does not touch the working tree when some of the hunks do not apply. This option makes it apply the parts of the patch that are applicable, and leave the rejected hunks in corresponding *.rej files.</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git apply patches/0002-1.-2.-disk-host.get-api-3.-4.-utils-5.-conf.patch --reject</span><br></pre></td></tr></table></figure></li><li>手动解决冲突，找到 rej 文件，然后把冲突内容手动添加上去，之后手动删除 rej 文件。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status | grep rej</span><br><span class="line">rm xxx.rej</span><br></pre></td></tr></table></figure></li><li><p>之后提交代码，使用<code>git am</code>应用补丁：</p><div class="note info modern"><p><strong>–resolved</strong><br>补丁失败后(例如，试图应用冲突的补丁)，用户已经手动应用它并且索引文件存储应用的结果。使用从电子邮件消息和当前索引文件中提取的 author 和 commit 日志对内容进行提交，然后继续。</p></div><blockquote><p>After a patch failure (e.g. attempting to apply conflicting patch), the user has applied it by hand and the index file stores the result of the application. Make a commit using the authorship and commit log extracted from the e-mail message and the current index file, and continue.</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git am --resolved</span><br></pre></td></tr></table></figure></li><li>查看日志，之前提交的内容应该已经作为补丁应用到新代码上面了。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><a href="https://git-scm.com/docs/git-am">Git - git-am Documentation</a><br><a href="https://git-scm.com/docs/git-apply">Git - git-apply Documentation</a><br><a href="https://blog.csdn.net/sinat_20059415/article/details/80598347">git 打补丁方法总结_JT 的专栏-CSDN 博客</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 中动态调用函数或类的方法</title>
      <link href="blog/2020-10-15/python-call-method-dynamically/"/>
      <url>blog/2020-10-15/python-call-method-dynamically/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="使用exec-方法"><a href="#使用exec-方法" class="headerlink" title="使用exec()方法"></a>使用<code>exec()</code>方法</h2><ul><li>示例代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># module.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;this is foo.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;this is bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baz</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;baz……&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>在 main 中调用：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line">module_name = <span class="string">&#x27;module&#x27;</span></span><br><span class="line">exec(<span class="string">&#x27;  &#x27;</span>.join([<span class="string">&#x27;import&#x27;</span>, module_name]))</span><br><span class="line">a = module.A()</span><br><span class="line">a.foo()</span><br><span class="line">a.bar()</span><br><span class="line"></span><br><span class="line">module.baz()</span><br></pre></td></tr></table></figure></li><li>结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this is foo.</span><br><span class="line">this is bar</span><br><span class="line">baz……</span><br></pre></td></tr></table></figure></li><li>解释<br>这里请参阅<a href="https://docs.python.org/zh-cn/3/library/functions.html#exec">exec() 官方文档</a>，相当于使用<code>exec()</code>执行了一句<code>import module</code>语句，后面的也就不用解释了。<blockquote><p>这个函数支持动态执行 Python 代码。object 必须是字符串或者代码对象。如果是字符串，那么该字符串将被解析为一系列 Python 语句并执行（除非发生语法错误）<br>值得注意的是，实际上对于 exec() 的正确使用是比较难的。</p></blockquote>关于<code>exec()</code>的使用说明请阅读此处<a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p23_executing_code_with_local_side_effects.html#id4">如何正确使用<code>exec</code>方法</a>。<blockquote><p>默认情况下，exec() 会在调用者局部和全局范围内执行代码。然而，在函数里面， 传递给 exec() 的局部范围是拷贝实际局部变量组成的一个字典。 因此，如果 exec() 如果执行了修改操作，这种修改后的结果对实际局部变量值是没有影响的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def test1():</span><br><span class="line">...     x &#x3D; 0</span><br><span class="line">...     exec(&#39;x +&#x3D; 1&#39;)</span><br><span class="line">...     print(x)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; test1()</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="使用-import-魔法方法"><a href="#使用-import-魔法方法" class="headerlink" title="使用__import__魔法方法"></a>使用<code>__import__</code>魔法方法</h2>单独使用<code>__import__()</code> 可以直接加载模块，但是当需要动态加载类、函数时，就需要配合 getattr 来实现。<br>实现步骤：</li></ul><ol><li>获取模块名(module_name)</li><li>使用<code>__import__(module_name)</code>导入 Python 模块</li><li>使用 <code>getattr(module_name, class_name/function_name)</code>获取类、方法的对象</li></ol><ul><li>示例代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># module.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;this is foo.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;this is static.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;bar……&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baz</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;==baz==&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"></span><br><span class="line">module_name = <span class="string">&#x27;module&#x27;</span>  <span class="comment"># 模块名</span></span><br><span class="line">class_name = <span class="string">&#x27;A&#x27;</span>  <span class="comment"># 类名</span></span><br><span class="line">class_method = <span class="string">&#x27;foo&#x27;</span>  <span class="comment"># 类中方法名称</span></span><br><span class="line">func_name = <span class="string">&#x27;bar&#x27;</span>  <span class="comment"># 函数名</span></span><br><span class="line">module_obj = <span class="built_in">__import__</span>(module_name)</span><br><span class="line"><span class="comment"># 调用模块中的类</span></span><br><span class="line">class_of_module_obj = <span class="built_in">getattr</span>(module_obj, class_name)</span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">instance_of_cmo = class_of_module_obj()</span><br><span class="line"><span class="comment"># 调用实例的方法</span></span><br><span class="line">method_of_cmo = <span class="built_in">getattr</span>(instance_of_cmo, class_method)</span><br><span class="line">method_of_cmo()</span><br><span class="line">instance_of_cmo.static_method()</span><br><span class="line"><span class="comment"># 调用模块的函数</span></span><br><span class="line">func_of_mo = <span class="built_in">getattr</span>(module_obj, func_name)</span><br><span class="line">func_of_mo()</span><br><span class="line"><span class="comment"># 也可以直接调用（像真正import模块那样）</span></span><br><span class="line">module_obj.baz()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用-importlib"><a href="#使用-importlib" class="headerlink" title="使用 importlib"></a>使用 importlib</h2>这种方式其实是<code>__import__()</code> 方式的扩展。<code>Python</code>官方文档推荐程序式地导入模块时应该使用 <code>import_module()</code> 而不是<code>__import__</code>。<br>这里我们继续使用上面定义好的<code>module.py</code>模块。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line">module_name = <span class="string">&#x27;module&#x27;</span></span><br><span class="line"></span><br><span class="line">module_obj = importlib.import_module(module_name)</span><br><span class="line">class_of_module_obj = module_obj.A()</span><br><span class="line">class_of_module_obj.foo()</span><br><span class="line">class_of_module_obj.static_method()</span><br><span class="line">module_obj.bar()</span><br></pre></td></tr></table></figure>文档参见此处：<a href="https://docs.python.org/zh-cn/3/library/importlib.html">importlib — import 的实现 — Python 3.9.0 文档</a><blockquote><p>importlib 包的目的有两个。 </p><p>第一个目的是在 Python 源代码中提供 import 语句的实现（并且因此而扩展 <code>__import__()</code> 函数）。 这提供了一个可移植到任何 Python 解释器的 import 实现。 相比使用 Python 以外的编程语言实现方式，这一实现更加易于理解。</p><p>第二个目的是实现 import 的部分被公开在这个包中，使得用户更容易创建他们自己的自定义对象 (通常被称为 importer) 来参与到导入过程中。</p></blockquote></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>我们在使用 redis 的时候，有时候需要添加一个代理类，示例如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisClient</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_con</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># do init things</span></span><br><span class="line">        <span class="comment"># like connect redis</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>然后希望直接通过这个 RedisClient 执行 redis 相关操作, 比如 set, get, hget…<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rc = RedisClient()</span><br><span class="line">rc.<span class="built_in">set</span>(...)</span><br><span class="line">rc.get(...)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>这样调用的话, 就需要将 pyredis 中的所有函数都在 RedisClient 中写一遍, 那就有点得不偿失了。</p><p>这里实际就是希望能够做到动态调用, 将 RedisClient 中的操作, 根据操作名, 直接映射到实际的 pyredis 操作之上。</p><p>所以, 我们在 RedisClient 中：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisClient</span>:</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, func_name</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="comment"># 这里的 getattr 实际就相当于redis_con.&lt;func_name&gt;了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(self.redis_conn, func_name)(*args, **args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    redis_client = RedisClient()</span><br><span class="line">    redis_client.init_con(...)</span><br><span class="line">    redis_client.<span class="built_in">set</span>(<span class="string">&#x27;key_name&#x27;</span>, <span class="string">&#x27;key_value&#x27;</span>)</span><br></pre></td></tr></table></figure><br>这样，就实现动态调动 pyredis 的操作的目的了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://threezh1.com/2019/07/12/Python%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/#1-exec">Python 动态加载模块、类、函数的几种方式 - Threezh1’s blog</a><br><a href="https://www.u3v3.com/ar/1313">python 类方法的动态调用 - u3v3</a></p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p20_call_method_on_object_by_string_name.html">8.20 通过字符串调用对象方法</a><br><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p23_executing_code_with_local_side_effects.html#id4">9.23 在局部变量域中执行代码</a></p>]]></content>
      
      
      <categories>
          
          <category> 🐍PyTricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程 </tag>
            
            <tag> magic </tag>
            
            <tag> exec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Python 对文件进行原子性（atomic）读写操作？</title>
      <link href="blog/2020-09-23/atomic-writing-to-file-with-python/"/>
      <url>blog/2020-09-23/atomic-writing-to-file-with-python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道：Python 中一切类文件操作的最佳实践都是使用<code>with</code>语句。（如果对于这个说法有疑惑，请参考阅读：<a href="https://stackoverflow.com/questions/3012488/what-is-the-python-with-statement-designed-for">language features - What is the python “with” statement designed for? - Stack Overflow</a> ）在编写<a href="/blog/2020-07-22/alua-with-drbd/">仲裁服务</a>时，我们需要将仲裁服务器的信息记录进配置文件<code>referee.conf</code>。同时，不可避免地需要对该文件进行更新。由于系统需要对文件在某个线程中进行读，与此同时另一个线程可能正在对其进行修改。此时，使配置文件操作保持原子性便至关重要。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>比如我们要将<code>enable</code>由<code>True</code>改为<code>False</code>代表禁用该功能。同时另一个线程读取仲裁服务器的<code>ip</code>以不停探测仲裁服务运行状态。则必须保证文件修改操作具有原子性。即使使用 with 打开，还是会有一个窗口导致文件被打开但是新内容没有被刷写，此时意外掉电或重新进入窗口，则可能会导致：数据修改失效、文件被清空等，即无法避免竞态操作。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>一种可行的方案是让文件真正落盘，然后对文件重命名。参考代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tempfile_cmgr</span>(<span class="params">suffix=<span class="string">&#x27;&#x27;</span>, <span class="built_in">dir</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Context for temporary file.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Will find a free temporary filename upon entering</span></span><br><span class="line"><span class="string">    and will try to delete the file on leaving, even in case of an exception.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    suffix : string</span></span><br><span class="line"><span class="string">        optional file suffix</span></span><br><span class="line"><span class="string">    dir : string</span></span><br><span class="line"><span class="string">        optional directory to save temporary file in</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    tf = tempfile.NamedTemporaryFile(delete=<span class="literal">False</span>, suffix=suffix, <span class="built_in">dir</span>=<span class="built_in">dir</span>)</span><br><span class="line">    tf.file.close()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> tf.name</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.remove(tf.name)</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> e.errno == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_atomic</span>(<span class="params">filepath, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Open temporary file object that atomically moves to destination upon</span></span><br><span class="line"><span class="string">    exiting.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Allows reading and writing to and from the same filename.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The file will not be moved to destination in case of an exception.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    filepath : string</span></span><br><span class="line"><span class="string">        the file path to be opened</span></span><br><span class="line"><span class="string">    fsync : bool</span></span><br><span class="line"><span class="string">        whether to force write the file to disk</span></span><br><span class="line"><span class="string">    *args : mixed</span></span><br><span class="line"><span class="string">        Any valid arguments for :code:`open`</span></span><br><span class="line"><span class="string">    **kwargs : mixed</span></span><br><span class="line"><span class="string">        Any valid keyword arguments for :code:`open`</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    fsync = kwargs.get(<span class="string">&#x27;fsync&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tempfile_cmgr(<span class="built_in">dir</span>=os.path.dirname(os.path.abspath(filepath))) <span class="keyword">as</span> tmppath:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(tmppath, *args, **kwargs) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">yield</span> file</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="comment"># make sure that all data is on disk 确保数据刷写到银盘上</span></span><br><span class="line">                <span class="comment"># see http://stackoverflow.com/questions/7433057/is-rename-without-fsync-safe</span></span><br><span class="line">                <span class="keyword">if</span> fsync:</span><br><span class="line">                    file.flush()</span><br><span class="line">                    os.fsync(file.fileno())</span><br><span class="line">        os.rename(tmppath, filepath)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>该方案需要注意的是：</p><ol><li><code>rename</code>操作的原子性只针对<code>POSIX</code>系统；</li><li>操作的文件系统需要保持一致，即代码中在同一个目录的目的；</li><li>在电源故障，系统崩溃等情况下，性能/响应能力比数据完整性更重要，则可以跳过<code>os.fsync</code>步骤；</li></ol><p>关于<code>os.fsync</code>的说明参见官方文档，<a href="https://docs.python.org/zh-cn/3/library/os.html#os.fsync">此处</a>：<br><div class="note info modern"><p>强制将文件描述符 <code>fd</code> 指向的文件写入磁盘。在 Unix，这将调用原生 <code>fsync()</code> 函数；在 Windows，则是 MS <code>_commit()</code> 函数。<br>如果要写入的是缓冲区内的 Python 文件对象 f，请先执行 <code>f.flush()</code>，然后执行 <code>os.fsync(f.fileno())</code>，以确保与 f 关联的所有<strong>内部缓冲区都写入磁盘</strong>。 </p></div> </p><ul><li>不要造轮子 </li></ul><p>直接装包：<a href="https://github.com/untitaker/python-atomicwrites">untitaker/python-atomicwrites: Powerful Python library for atomic file writes.</a>，然后代码这么写：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> atomicwrites <span class="keyword">import</span> atomic_write</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> atomic_write(<span class="string">&#x27;foo.txt&#x27;</span>, overwrite=<span class="literal">True</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;Hello world.&#x27;</span>)</span><br><span class="line">    <span class="comment"># &quot;foo.txt&quot; doesn&#x27;t exist yet.</span></span><br></pre></td></tr></table></figure><br><div class="note warning modern"><p><strong>注意</strong>：<br>如果是 json/pickle 文件可以使用<code>rb</code>格式写，这样才是原子性的，参见<a href="https://github.com/untitaker/python-atomicwrites/issues/29">Can it work with pickle.dump/json.dump instead of text only ? · Issue #29 · untitaker/python-atomicwrites</a></p></div></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> atomic_write(mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(info, indent=<span class="number">4</span>).encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://blog.gocept.com/2013/07/15/reliable-file-updates-with-python/">Reliable file updates with Python – gocept blog</a></li><li>上文中文版：<a href="https://www.oschina.net/translate/reliable-file-updates-with-python">使用 Python 进行稳定可靠的文件操作 - OSCHINA</a></li><li><a href="https://stackoverflow.com/questions/2333872/atomic-writing-to-file-with-python">atomic writing to file with Python - Stack Overflow</a></li><li><a href="https://mozillazg.com/2018/05/a-way-to-atomic-write-or-safe-update-a-file.html">通过临时文件实现安全的/原子性的更新文件 - Huang Huang 的博客</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 文件 </tag>
            
            <tag> 原子 </tag>
            
            <tag> 并行 </tag>
            
            <tag> 上下文管理器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开篇 | 基金管理计划</title>
      <link href="blog/2020-09-17/hello-fmp/"/>
      <url>blog/2020-09-17/hello-fmp/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="a3c0ccd01e82a41124eb8f646277fa351fdfa0bb52b38e8f1f4314f20ddc336e">4f15ddc76047ef172570bf424968b26d0bfa38a2d42a8fddbc707eedd0d9d1370630a42cba6cf932a02072c4b36de10ab1f6891a0c4ac791ac39c8aede60923052c4060af5bab78f6a0add796e77bed5d39bbb408ba23d0889a80d9d292bab335cda59b29b652c5cdd9012c6440ca522e593ac0dee091f276bcdd8108f3812c11955a1a845afce4bb3515fa36d2ddb3a64641d4002e9474a44133ba9a35eb1c4dbd5d098fe5643aeefcf207579a644226407d53760582a2eeb5f6877e522a362cf305a36922be33b6876d4c9af76cd79cb2d20e8a6724a013553ed3c60a7eb168e7fd5cc0bfc93461d3bd0b565a9005abae675f21c5bda00dd2e74e51a48ea5effff13ccfdc42beb477ebd36b8b626d62ff8b5f5a4a52788b28d5ccdd032fa3712d7d0ab19c7add3b5eddaf7d5258feddc34af661a474d91e1721643b3405fc31c0073901016afb400394b27b10ade0017d62f06fe84306848eefe3d2231ba2f9f12f343b960f9ec3f0356a13a116e9e2416fe41275a7a870d7e94e0d86f6c9fef872cca2e43c9cb13eadc66a79b5173eede3792fbe42755357ce1b912d5c66e918e1d4acc4d237bf4799ae0e4a86ffb170d755f9664663434d94885a6b2e844cd8fdf37584093c7a9c2ecd7c2dc9334f2e798801973f64a5c0ee1dbebef933ee28a5048c6104c17c5b0b612c9e72950ab4c8d67ff7c5e00a4aec4ae2d63197a20f3dd2671405c993f26fe38e2f45ce7e2bfcfac3afed0f8742a5ff7077d1bc2709bc7b9dd83b3061a5c1c583b4c53f86903ea73fd63746623b6bf22662d66d1a56b1e190b862fed3c7242df04bf90195ba527b205a821c444d48e5268d5b6421f5c99fc909a6ef732c960c0e0b101a8deffebb80bacca7169415de13b33f5f3fec9bacce71f8b3e8ee52ff427ca06db737749f30e48afc24e85619f664a58e40b6084ee8b706fc3239ea0908edd41110fd7025a3a382a444bb90af8d4c2b8d5f7624b5e5dd41f401580b8a76ca343cb47e1d198a1badd4312ff14c2e09892cb0e21ae29c8027ecc265e8cd72c417f032d240928370eb7cde21081bed3ea154122d60b3bed2950af03a7794f2e4ef2983faaeb20997edeb8bfbdaa24c66b3dc6b745a3d811a0cfd0d7b32e06dc48a5531d3112801250ea61209116c4f3aebb5ab9723fe27f9857a9c9e8dcd0fdc6302d8865e9c39b9770b5e113c38dcc093ab8ee18c63deb45d3473f6fee5ccded25ccb06eff5f28e86ed22388f3d6878eab23dfd514547deb6c27feb9ae4a64f23282c6e757bff954fa9f214e94dc5b1d72492749a4cf38c6e2c305fb9093cf4e2b0a3259d852d56325014604702e751ab2c3352d7eed6beab33449fbab9c7335943fcd0bb2e9ac93553d242f4d2788e42d4d02731adbe06cae76901a6f6d24044aaa7a9c350907be7c38199eb04a96a6dbe91de8f9b4ed54b99cf7f2835636c34f853d4db7cdb6a423d79f61ac9ee7446e8b4d70138c1031b9ef25c0b002d538bbb2cbbb1adae725fec7355f23d362e40b49e82ffb1bfefd5f6ce04153fed7d1a55c80f4204203c76955edf7f0a1f3276c1ba7e50bc0adec17c9bb989648a96206c68ed3e88115cb6022ecc4c92c0cdd12d15db2443f8c2955b1dd824e6b3d4883b92e0bd8a061f9dfada075aa741dc18a35fe367b675d1a52e7fd3763288335a2382516a91f6bf3c26a19899ab0565d2f1b51a5e6f0ba27a20cab6c1c5c83d88fbd615912925cdf2f1e86ad6501afc99081929d5211126e3173c39a1f37bba4cfec44a36fee68420ebfc584dc58f7e05b449ba993d1e9ffdb1f97ca4352171d8d7d0ae9ecb5cf8abd900cd6610328afde10d08a79621853dd6e46b0b18dc2f10a318a26a5c6bf3ff43c8b33e3bad52d350aa959cfb5b343f354c05a068865dddd89f6b33186134f508068d4969616dd3814fc7e899ee94901fbb1861d0d8cb26a87cbf16964e0fef0141b6175f17cbb372ff94c8b4d5ddf9b35fabb335a67a4ca5957a8f3e2d7091b05c599e794ae969b98f133f9381ccc561d00f0baa5ae5328030c7a581a0968288f0de265453230e2753606622e58cf7851ea250e4d6cf2456127a1569db410acccdeab40568447471e3512751110c95365e081ea82278a148b12b5482fcaf6ec6021c1ad994392eede78a359259cbcb5ec008863efdbffa0ce4f8c419755786977e688a1f566bf35d62937025da21f42186a50d1e712be0eddfb7db9025584cde5cb3f513f429a04c009e437c93c986a268f53fe1bbed680b61465a6a020a429ff3513afaeb3d9eb3ba1754ad8879d22efd18828544b34d99adfd229562cee32769d2ef4643b5e7583e0dfe5ee5fd084400b5f5c4aea2f17ada2a3f1da11a9ea512a5d0d56077d6284e9959a563eb0b060adc544bfd6ac945a0ddab9a9a9a3ec773cc8aa8d41e4eb50acb6792118d7d229fc1eefa86f96bfb130a132a3a7305a00da5e1bff18861a275f08411915d98022624c2e846fc69be830cee89ba95ad0f5b2bbe528413eedfe8f8083e25d7672712837a14765c72d42cbb4d78032bad1e72c104048db507274a4d7713c8cca73087cf5b2975a16c28747cbef46f099eff3840f5a673d8c5412dbf0e461ceac905b40a2f40b2a4436ab645c2532458ff52c58764f56be90d9bf7520789207bc29191d9bbba1d2030b6da53c4695fc0840f7d904c7939a94138ba96d44d90f776d34afbeb35183b0d2fcb17b9515304067ca0d758459e76c417f0ef7f46bfb87f80b0da6dec57c59da3adac503b39d2badd80012871b2d540f8ee0ad5be0b9af35b07d136637a284f85b9c3c15d446a1216ca86f2dfb53f2b0d5a0c0fb5144f97452897cd3c5eda41e9fae5a4491836d8c019c8bdc30e8f63af31ae0b13be4ee623054167546b72c7691839495dba945f3efea614a0c6498c1c4faac18007cc47e44fbf0cc8df46d715f7fd204a1817005df819fd63a04aa5a2d8496646684db2ed8b02576025ab4a1f7071a29d7dfa541c11c3161d9f73285ac63609949f1b0121cea20779b98fdbf2e21ab33bf04a1403fd8e511f23374bfb69ef00c7a7343d998ea3a87d84d9c7e1cd0736f3e8b498115449b197c04f2dcff16a3ce4dbe6ec16b827db0ecadda4a1b1d55f511393b2ce039f6a032f3c5c08774d03c753daabe1306949db32e0d7dcd3bc1fdffaabee3a428999af2cc7b40ab41dbff97165f7c9083f3a18d7f1641957be10dc5ce60261c1ce7aac03f559e4637ce356625016e6629c4637569cd4257784d63efdbee96b617944c4d372b3b7b5de190366a372c72e567c39fdbbc8550</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码，如果想查看请咨询博主。</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> FMP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TODO </tag>
            
            <tag> FMP </tag>
            
            <tag> 基金 </tag>
            
            <tag> FundMate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三思而后行：谨慎使用你的装饰器</title>
      <link href="blog/2020-09-03/use-python-decorator-prudently/"/>
      <url>blog/2020-09-03/use-python-decorator-prudently/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>在学会使用装饰器之后，我们可能时不时地在心理暗示下使用它，下面是我个人总结的一些代码实践中遇到的问题，主要参考 <a href="https://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators/1594484#1594484">这一篇</a> 中关于装饰器链式调用中讨论的问题。</p><blockquote><p><strong>最佳实践</strong></p><ul><li>Decorators were introduced in Python 2.4, so be sure your code will be run on &gt;= 2.4.</li><li>Decorators slow down the function call. Keep that in mind.</li><li>You cannot un-decorate a function. (There are hacks to create decorators that can be removed, but nobody uses them.) So once a function is decorated, it’s decorated for all the code.</li><li>Decorators wrap functions, which can make them hard to debug. (This gets better from Python &gt;= 2.5; see below.)</li></ul></blockquote><div class="note info modern"><p>以下演示基于 Python3.7 讨论，测试代码时请检查你的 Python 版本。</p></div><h2 id="请神容易送神难"><a href="#请神容易送神难" class="headerlink" title="请神容易送神难"></a>请神容易送神难</h2><p>装饰器一旦被使用，就很难调用没有装饰器的原函数。</p><h3 id="改善建议"><a href="#改善建议" class="headerlink" title="改善建议"></a>改善建议</h3><ol><li>在<a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p03_unwrapping_decorator.html">9.3 解除一个装饰器 | Python-cookbook</a>，源码（<a href="https://github.com/dabeaz/python-cookbook/blob/master/src/9/unwrapping_a_decorator/example.py">dabeaz/python-cookbook</a>）中，作者提到一个方法：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco_it</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义装饰器</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;----inner of wrapper before func----&#x27;</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;----inner of wrapper after func--&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco_it</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;Hello,World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo()       <span class="comment"># 被装饰的调用</span></span><br><span class="line">    foo.__wrapped__()       <span class="comment"># 解除装饰的调用</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----inner of wrapper before func----</span><br><span class="line">Hello,World!</span><br><span class="line">----inner of wrapper after func--</span><br><span class="line"># 原函数</span><br><span class="line">Hello,World!</span><br></pre></td></tr></table></figure>需要注意的是，这种方法有两个缺陷：<ol><li>装饰器函数内部必须被<code>functools.wraps</code>装饰或者直接设置了<code>__wrapped__</code>属性；</li><li>多个装饰器时，返回结果是不可预知的；请看下例：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">another_deco_it</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义另一个装饰器</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&#x27;This is another deco.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@another_deco_it</span></span><br><span class="line"><span class="meta">@deco_it</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;Hello,World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo()</span><br><span class="line">    print(<span class="string">&#x27;origin func under below.&#x27;</span>)</span><br><span class="line">    foo.__wrapped__()</span><br></pre></td></tr></table></figure>返回结果：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is another deco.</span><br><span class="line">----inner of wrapper before func----</span><br><span class="line">Hello,World!</span><br><span class="line">----inner of wrapper after func--</span><br><span class="line">origin func under below.</span><br><span class="line"># 原函数定义（实际上，此时并没有解除掉@deco_it装饰器）</span><br><span class="line">----inner of wrapper before func----</span><br><span class="line">Hello,World!</span><br><span class="line">----inner of wrapper after func--</span><br></pre></td></tr></table></figure>甚至，如果我们调换装饰器的位置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@deco_it</span></span><br><span class="line"><span class="meta">@another_deco_it</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;Hello,World!&#x27;</span>)</span><br></pre></td></tr></table></figure>返回的结果又是符合我们预期的😯：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is another deco.</span><br><span class="line">----inner of wrapper before func----</span><br><span class="line">Hello,World!</span><br><span class="line">----inner of wrapper after func--</span><br><span class="line">origin func under below.</span><br><span class="line"># 原函数定义</span><br><span class="line">Hello,World!</span><br></pre></td></tr></table></figure></li></ol></li><li>鉴于上面说到的缺陷，我们尝试使用 <a href="https://wiki.python.org/moin/PythonDecoratorLibrary#Enable.2FDisable_Decorators">这里</a> 提到的方式继续改善；<br>我们说<code>Python中一切都是对象</code>，所以可以将我们的装饰器是否使用通过 flag 传递给调用函数名：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enable_deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使能装饰器</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;----inner of wrapper before func----&#x27;</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;----inner of wrapper after func--&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disable_deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    禁用装饰器</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GLOBAL_ENABLE_FLAG = <span class="literal">True</span></span><br><span class="line">depend_with_flag = enable_deco <span class="keyword">if</span> GLOBAL_ENABLE_FLAG <span class="keyword">else</span> disable_deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@depend_with_flag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;Hello,World!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>我们通过<code>GLOBAL_ENABLE_FLAG</code>分别定义的<code>bool</code>值可以将装饰器启用或者禁用。这个方式也适用于多个装饰器的时候，只不过我们需要定义更多的 bool 变量来控制而已。<br>实践代码可以参考此处<a href="https://medium.com/@AuthorVivek/leveraging-the-power-of-decorators-in-pythons-unit-test-framework-5ae0285d0d27">Leveraging the power of decorators in Python’s unit-test framework | by Vivek Shrivastava | Medium</a>，注意文中说到的 <em>second point</em>。<h2 id="凡有导入，必留痕迹"><a href="#凡有导入，必留痕迹" class="headerlink" title="凡有导入，必留痕迹"></a>凡有导入，必留痕迹</h2>调用被装饰函数会导致装饰器函数外部逻辑的执行。示例代码如下：<br>我们在第一个模块中编写一个装饰器<code>deco</code>：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deco_module</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;out of real wrapper.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;-----inner of wrapper.----&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_func</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>在第二个模块中，我们导入<code>deco_module</code>：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># foo</span></span><br><span class="line"><span class="keyword">from</span> deco_module <span class="keyword">import</span> do_func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invoke_deco_func</span>():</span></span><br><span class="line">    do_func()</span><br><span class="line">    do_other()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_other</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_foo</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    do_foo()</span><br><span class="line"></span><br></pre></td></tr></table></figure>此时，不管我们是否真正调用被装饰的函数<code>do_func</code>，装饰器<code>deco</code>中<code>wrapper</code>外面的函数都会被调用①。假如它是一个耗时的操作呢？😕<br>第三个模块中，我们导入<code>foo</code>模块：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># main.py</span><br><span class="line">from foo import do_foo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    do_foo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>同样地，只要我们从<code>foo</code>中进行导入，不管我们是否在<code>main</code>中调用<code>invoke_deco_func</code>，上面提到的消耗①都会被执行。😣<div class="note primary no-icon modern"><p>有同学会举手发言了：嗳，你这装饰器写的不对啊，我所看到装饰器的逻辑都是写在<code>wrapper</code>函数里面的呀！陈独秀同学请坐，你在第一层，我在第二层。<br>有时候，我们为了装饰器更加灵活，既需要它可以不传参数，又需要它可以传递参数，这个时候就需要使用偏函数的定义。<br>请看下面的链接：</p><ol><li><a href="https://stackoverflow.com/questions/10294014/python-decorator-best-practice-using-a-class-vs-a-function">Python decorator best practice, using a class vs a function - Stack Overflow</a></li><li><a href="https://github.com/dabeaz/python-cookbook/blob/master/src/9/defining_a_decorator_that_takes_an_optional_argument/example.py">9.6 定义带可选参数的装饰器 | Python-cookbook</a></li><li><a href="https://github.com/dabeaz/python-cookbook/blob/master/src/9/enforcing_type_checking_on_a_function_using_a_decorator/example.py">9.7 利用装饰器强制函数上的类型检查 | Python-cookbook</a></li></ol><p>当然，我们都在期许第五层的老师能给我们指导释疑。</p></div></li></ol><h3 id="改善建议-1"><a href="#改善建议-1" class="headerlink" title="改善建议"></a>改善建议</h3><ol><li>装饰器<code>wrapper</code>外面不要写函数；如果非要写，应该是很小的操作。一个函数一旦被装饰，它就不是<code>出走半生归来仍是少年</code>的模样了。所以，尽量不要把这种含有<code>wrapper</code>外做逻辑处理的装饰器到处导入。</li><li>写进类里面；<br>如果你类装饰器写得比较少，可以参考下面的链接：<ol><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p08_define_decorators_as_part_of_class.html">9.8 将装饰器定义为类的一部分 — python3-cookbook 3.0.0 文档</a>；参考 <a href="https://github.com/dabeaz/python-cookbook/tree/master/src/9/defining_decorators_as_part_of_a_class">源码</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p09_define_decorators_as_classes.html">9.9 将装饰器定义为类</a> ；参考 <a href="https://github.com/dabeaz/python-cookbook/tree/master/src/9/defining_decorators_as_classes">源码</a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deco_module</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deco</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;out of real wrapper.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ret = self.func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_func</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>此时我们在装饰器定义模块中执行返回:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">out of real wrapper.</span><br><span class="line">hello world</span><br><span class="line"></span><br></pre></td></tr></table></figure>在不包含装饰器的模块中导入上述模块:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> deco_module <span class="keyword">import</span> do_bar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_foo</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    do_foo()</span><br></pre></td></tr></table></figure>此时，如果不调用被装饰函数，则可以避免其被连带导入；当然，如果你导入它，那肯定还是会执行。🤓</li></ol></li></ol><h2 id="执行顺序和调用顺序不一样"><a href="#执行顺序和调用顺序不一样" class="headerlink" title="执行顺序和调用顺序不一样"></a>执行顺序和调用顺序不一样</h2><p>调用时从上到下，逻辑执行时从下到上。参考此文：<a href="https://gist.github.com/kirsle/bf24622fc5f255256c6e">Python decorator order</a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_has_set</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    是否进行了模块配置</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">f&#x27;out of func: <span class="subst">&#123;sys._getframe().f_code.co_name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;inner of func check_has_set.&#x27;</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_has_enable</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模块是否启用</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">f&#x27;out of func: <span class="subst">&#123;sys._getframe().f_code.co_name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;inner of func check_has_enable.&#x27;</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_has_execute</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模块是否执行，这是一个耗时操作，并且需要一定的条件才可以执行</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    print(<span class="string">f&#x27;out of func: <span class="subst">&#123;sys._getframe().f_code.co_name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;inner of func check_has_execute.&#x27;</span>)</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@check_has_execute</span></span><br><span class="line"><span class="meta">@check_has_enable</span></span><br><span class="line"><span class="meta">@check_has_set</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;I can do it only when has_set and has_enable and before has_execute&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># foo()</span></span><br><span class="line">    bar()</span><br></pre></td></tr></table></figure><br>我们执行上述函数，得到返回结果：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">out of func: check_has_set</span><br><span class="line">out of func: check_has_enable</span><br><span class="line">out of func: check_has_execute</span><br></pre></td></tr></table></figure><br>这个符合我们的预期，因为装饰器类似于这种写法：<code>check_has_execute(check_has_enable(check_has_set(foo)))</code>。</p><p>接下来，我们真正调用被装饰函数，即放开注释，将无关的调用<code>bar()</code>注释：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out of func: check_has_set</span><br><span class="line">out of func: check_has_enable</span><br><span class="line">out of func: check_has_execute</span><br><span class="line">inner of func check_has_execute.</span><br><span class="line">inner of func check_has_enable.</span><br><span class="line">inner of func check_has_set.</span><br></pre></td></tr></table></figure><br>注意看返回结果中的前三行和后三行。此时先去执行了<code>check_has_execute</code>中的操作，而后才会执行<code>check_has_enable</code>和<code>check_has_set</code>！此时我们做的提前返回的限制就无效了。</p><h3 id="改善建议-2"><a href="#改善建议-2" class="headerlink" title="改善建议"></a>改善建议</h3><p>如果只是调用顺序导致的问题，底层函数不会有特别耗时的操作，我们可以按照条件的先后去装饰<code>foo()</code>函数，让其按照预定的顺序检查:<br>即<code>if check_has_set</code> &gt;&gt; <code>if check_has_enable</code> &gt;&gt; <code>if not check_has_execute</code>，只有条件都满足采取真正执行。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@check_has_set</span><br><span class="line">@check_has_enable</span><br><span class="line">@check_has_execute</span><br><span class="line">def foo():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><br>局限性：<code>check_has_execute</code>中长耗时会执行，此时会拖慢你的程序！如此处<a href="https://stackoverflow.com/questions/10294014/python-decorator-best-practice-using-a-class-vs-a-function">Python decorator best practice, using a class vs a function - Stack Overflow</a>2018 update 章节处所示的写法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>To be continue.</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://wiki.python.org/moin/PythonDecorators">PythonDecorators - Python Wiki</a><br><a href="https://dbader.org/blog/python-decorators">Python Decorators: A Step-By-Step Introduction – dbader.org</a><br><a href="https://realpython.com/primer-on-python-decorators/">Primer on Python Decorators – Real Python</a><br><a href="http://witkowskibartosz.com/blog/python_decorators_vs_inheritance.html">Python decorators vs inheritance - Anselmos Blog</a><br><a href="https://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators">python - How to make a chain of function decorators? - Stack Overflow</a><br><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p09_meta_programming.html">第九章：元编程 — python3-cookbook 3.0.0 文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TODO </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> decorator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何通过网卡名称获取其所对应的 IP 地址</title>
      <link href="blog/2020-08-11/how-to-get-the-physical-interface-IP-address-from-an-interface/"/>
      <url>blog/2020-08-11/how-to-get-the-physical-interface-IP-address-from-an-interface/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>如果项目中有用到 netifaces 或者 psutil 库，可以直接使用下面的方法：</p><h3 id="直接调用第三方库"><a href="#直接调用第三方库" class="headerlink" title="直接调用第三方库"></a>直接调用第三方库</h3><ul><li>netifaces<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">via_netifaces</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    调用第三方模块netifaces</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ip_list = []</span><br><span class="line">    <span class="keyword">for</span> interface <span class="keyword">in</span> netifaces.interfaces():</span><br><span class="line">        <span class="keyword">if</span> interface <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;lo&#x27;</span>, <span class="string">&#x27;sit0&#x27;</span>]:</span><br><span class="line">            b = netifaces.ifaddresses(interface).get(netifaces.AF_INET)</span><br><span class="line">            <span class="keyword">if</span> b:</span><br><span class="line">                <span class="keyword">for</span> link <span class="keyword">in</span> b:</span><br><span class="line">                    ip_list.append(link[<span class="string">&#x27;addr&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> ip_list</span><br></pre></td></tr></table></figure></li><li>psutil<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_net_ipaddr</span>():</span></span><br><span class="line">    ip_list = <span class="built_in">set</span>()</span><br><span class="line">    dic = psutil.net_if_addrs()</span><br><span class="line">    <span class="keyword">for</span> adapter <span class="keyword">in</span> dic:</span><br><span class="line">        snic_list = dic[adapter]</span><br><span class="line">        mac = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        ipv4 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        ipv6 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> snic <span class="keyword">in</span> snic_list:</span><br><span class="line">            <span class="keyword">if</span> snic.family.name <span class="keyword">in</span> &#123;<span class="string">&#x27;AF_LINK&#x27;</span>, <span class="string">&#x27;AF_PACKET&#x27;</span>&#125;:</span><br><span class="line">                mac = snic.address</span><br><span class="line">            <span class="keyword">elif</span> snic.family.name == <span class="string">&#x27;AF_INET&#x27;</span>:</span><br><span class="line">                ipv4 = snic.address</span><br><span class="line">            <span class="keyword">elif</span> snic.family.name == <span class="string">&#x27;AF_INET6&#x27;</span>:</span><br><span class="line">                ipv6 = snic.address</span><br><span class="line">            ip_list.add(ipv4)</span><br><span class="line">        print(<span class="string">&#x27;%s, %s, %s, %s&#x27;</span> % (adapter, mac, ipv4, ipv6))</span><br><span class="line">    <span class="keyword">return</span> ip_list</span><br></pre></td></tr></table></figure>如果觉得只是为了一个小功能引入第三方库有点大材小用，那么我们也可以自己造轮子。</li></ul><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">std_get_ip_list</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_ip_address_of_iface</span>(<span class="params">ifname</span>):</span></span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        ip_addr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip_addr = socket.inet_ntoa(fcntl.ioctl(</span><br><span class="line">                s.fileno(),</span><br><span class="line">                <span class="number">0x8915</span>,</span><br><span class="line">                struct.pack(<span class="string">&#x27;256s&#x27;</span>, <span class="built_in">bytes</span>(ifname[:<span class="number">15</span>], <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            )[<span class="number">20</span>:<span class="number">24</span>])</span><br><span class="line">        <span class="keyword">except</span> OSError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> ip_addr</span><br><span class="line"></span><br><span class="line">    all_eth = os.listdir(<span class="string">&#x27;/sys/class/net/&#x27;</span>)</span><br><span class="line">    ip_list = []</span><br><span class="line">    <span class="keyword">for</span> eth <span class="keyword">in</span> all_eth:</span><br><span class="line">        <span class="keyword">if</span> eth <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;lo&#x27;</span>, <span class="string">&#x27;sit0&#x27;</span>]:</span><br><span class="line">            ip = get_ip_address_of_iface(eth)</span><br><span class="line">            ip_list.append(ip)</span><br><span class="line">    <span class="keyword">return</span> ip_list</span><br></pre></td></tr></table></figure><p>这段代码的原始出处是<a href="https://stackoverflow.com/a/27423915">这里</a>，我们主要尝试解释一下它的工作原理。</p><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><p>Python 的 socket 模块提供了有关网络接口的底层控制方法。<code>socket.socket</code> 函数会创建一个新的 socket 对象。它的用法如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">socket.socket(family&#x3D;AF_INET, type&#x3D;SOCK_STREAM, proto&#x3D;0, fileno&#x3D;None)</span><br></pre></td></tr></table></figure><p>第一个参数 <code>family</code> 指定了网络地址的类型。最常用的值有两个：默认值 <code>AF_INET</code> 对应 IPv4，<code>AF_INET6</code> 是 IPv6。</p><p>第二个参数 <code>type</code> 代表了传输层协议的类型。默认值 <code>SOCK_STREAM</code> 是我们熟知的 TCP 协议，而 <code>SOCK_DGRAM</code> 则对应 UDP 协议。</p><p>因此，<code>s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</code> 的含义是，创建一个使用 IPv4 网络和 UDP 协议的 socket 对象 <code>s</code>。</p><p>为了获取网卡的 IP 地址，创建 TCP socket 或是 UDP socket 是没有差别的。由于 <code>socket.AF_INET</code> 和 <code>socket.SOCK_STREAM</code> 都是 <code>socket.socket</code> 函数的默认参数，所以这一行实际上可以简写成<code>s = socket.socket()</code>。</p><p>socket 对象 <code>s</code> 创建后，可以通过 <code>s.fileno()</code> 获取这个 socket 的文件描述符（file descriptor）。</p><p>另外，代码中的 <code>socket.inet_ntoa</code> 函数把一个 4 字节 IP 地址（即 <code>struct in_addr</code>）转化成点分十进制的可读形式。（网络字节顺序的整型值 -&gt;字符串形式的 IP 地址）</p><p>现在，我们可以推断出，从 <code>fcntl.ioctl</code> 到 <code>[20:24]</code> 这一大段内容，是用来获取网卡对应的 4 字节 IP 地址的。</p><h3 id="fcntl-与-ioctl"><a href="#fcntl-与-ioctl" class="headerlink" title="fcntl 与 ioctl"></a>fcntl 与 ioctl</h3><p><code>fcntl</code> 与 <code>ioctl</code> 是 UNIX/Linux 系统中用于文件控制和 I/O 控制的两个系统调用。Python 在此基础上进行了封装。函数 <code>ioctl</code> 的用法如下，参考<a href="https://docs.python.org/zh-cn/3.7/library/fcntl.html#fcntl.fcntl">此处</a>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fcntl.ioctl(fd, request, arg=<span class="number">0</span>, mutate_flag=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>参数 <code>fd</code> 是我们想控制的文件的文件描述符。在 UNIX/Linux 系统中，I/O 设备也用文件来表示，因此这里需要传入 socket 的文件操作符。</p><p>参数 <code>request</code> 是我们想要进行的操作。这个操作由一个预定义的 32 位整数表示。</p><div class="note info modern"><p>代码中使用的 <code>0x8915</code> 在 <code>/usr/include/linux/sockios.h</code> 文件中定义，它对应的符号是 <code>SIOCGIFADDR</code>，我们正是通过这一操作来取得 IPv4 地址。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_16_centos ~]# cat &#x2F;usr&#x2F;include&#x2F;linux&#x2F;sockios.h |grep</span><br><span class="line"></span><br><span class="line">0x8915#define SIOCGIFADDR0x8915&#x2F;* get PA address     *&#x2F;</span><br></pre></td></tr></table></figure><p>想要查询 <code>ioctl</code> 支持的所有操作，可以在命令行中输入 <code>man ioctl_list</code>。</p></div><p>第三个参数 <code>arg</code> 是操作所需的参数，这通常是一个 32 位整数或一段二进制内容。<br><div class="note info modern"><p>根据<a href="https://man7.org/linux/man-pages/man7/netdevice.7.html">文档</a>，使用 <code>SIOCGIFADDR</code> 时需要传入的参数是结构体 <code>struct ifreq</code>。<code>struct ifreq</code> 的定义位于 <code>/usr/include/net/if.h</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_0_16_centos ~]# cat &#x2F;usr&#x2F;include&#x2F;net&#x2F;if.h | grep IFNAMSIZ</span><br><span class="line"></span><br><span class="line"># define IFNAMSIZIF_NAMESIZE</span><br><span class="line">char ifrn_name[IFNAMSIZ];&#x2F;* Interface name, e.g. &quot;en0&quot;.  *&#x2F;</span><br><span class="line">char ifru_slave[IFNAMSIZ];&#x2F;* Just fits the size *&#x2F;</span><br><span class="line">char ifru_newname[IFNAMSIZ];</span><br><span class="line"># define _IOT_ifreq_IOT(_IOTS(char),IFNAMSIZ,_IOTS(char),16,0,0)</span><br><span class="line"># define _IOT_ifreq_short _IOT(_IOTS(char),IFNAMSIZ,_IOTS(short),1,0,0)</span><br><span class="line"># define _IOT_ifreq_int_IOT(_IOTS(char),IFNAMSIZ,_IOTS(int),1,0,0)</span><br></pre></td></tr></table></figure><p>在我的计算机上，<code>IFNAMSIZ</code> 的值是 16，即网卡名称最长为 15 字节（第 16 个字节必须是 <code>\0</code> 用来表示字符串的结尾），而 <code>struct ifreq</code> 的大小是 40 字节。对于 <code>SIOCGIFADDR</code> 来说，只有前 16 个字节 <code>ifr_name</code> 是有意义的，后面的值都可以设定为 <code>0x00</code>。</p><p>操作 <code>SIOCGIFADDR</code> 返回的结果也是 <code>struct ifreq</code> 结构体。其中，网卡的 IPv4 地址信息包含在 <code>struct sockaddr ifr_addr</code> 结构体内。这个 4 字节的 IP 地址位于 <code>struct ifreq</code> 结构体 20-23 字节处。所以我们会看到，<code>fcntl.ioctl</code> 返回的结果后面有 <code>[20:24]</code>——只需要把这 4 个字节拿去转换就可以了。</p></div></p><p>到现在为止，只要我们可以正确生成 40 字节的 <code>struct ifreq</code> 结构体，就可以通过 <code>ioctl</code> 拿到 IPv4 的地址。生成结构体需要用到 Python 的 <code>struct</code> 模块。</p><h3 id="Python-struct-与-unicode-string"><a href="#Python-struct-与-unicode-string" class="headerlink" title="Python struct 与 unicode string"></a>Python struct 与 unicode string</h3><p>Python 的 <code>struct</code> 模块用于生成和解析二进制内容。<code>struct.pack</code> 的用法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">struct.pack(fmt, v1, v2, ...)</span><br></pre></td></tr></table></figure><p>这个函数比较像 <code>printf</code>，第一个参数用于设定格式，后续的参数用于填充内容。</p><p><code>struct.pack(&#39;256s&#39;, ifname[:15])</code> 用 ifname 的前 15 个字节填充成了一个 256 字节的二进制空间，未指定内容的空间会用字节 <code>0x00</code> 填充。事实上，由于 <code>struct ifreq</code> 的大小只有 40 字节，将 <code>256s</code> 换成 <code>40s</code> 也能得到期望的 <code>struct ifreq</code> 结构体。</p><p>最后我们来讲一讲字符串的问题。Python 2 是不区分 <code>str</code> 和 <code>bytes</code> 的，所以 <code>ifname</code> 这个字符串可以直接拿来当一组字节用。代码中的 <code>ifname[:15]</code> 是一种防御性的措施，即只保留前 15 个字节。如果确信用户的输入合法，直接使用 <code>ifname</code> 也可以。但是在 Python 3 中，由于字符串不能隐式地当作一组字节用，所以需要额外的转换。具体来说就是把</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct.pack(&#39;256s&#39;, ifname[:15])</span><br></pre></td></tr></table></figure><p>变成<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct.pack(&#39;256s&#39;, bytes(ifname[:15], &#39;utf-8&#39;))</span><br></pre></td></tr></table></figure><br>其中 utf-8 是字符串 ifname 的编码方法。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fcntl</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ip_address_of_iface</span>(<span class="params">ifname</span>):</span></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    ip_addr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 拿到网卡名称(15来自Linux底层定义，与操作系统有关)并截取之后转化为utf-8的bytes字符串</span></span><br><span class="line">        ifname_str2bytes = <span class="built_in">bytes</span>(ifname[:<span class="number">15</span>], <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 构造`struct ifreq` 结构体，对bytes进行填充至256位长度</span></span><br><span class="line">        struct_ifreq = struct.pack(<span class="string">&#x27;256s&#x27;</span>, ifname_str2bytes)</span><br><span class="line">        <span class="comment"># 发起操作请求，拿到返回，截取其中4位长度的IP地址作为有效值</span></span><br><span class="line">        sockaddr_ifr_addr = fcntl.ioctl(s.fileno(),<span class="number">0x8915</span>,struct_ifreq)[<span class="number">20</span>:<span class="number">24</span>]</span><br><span class="line">        <span class="comment"># 对4位的ip进行转换</span></span><br><span class="line">        ip_addr = socket.inet_ntoa(sockaddr_ifr_addr)</span><br><span class="line">    <span class="keyword">except</span> OSError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> ip_addr</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/my_life/articles/9187714.html">详解 Python 获取网卡 IP 地址 - bw_0927 - 博客园</a><br><a href="https://stackoverflow.com/questions/6243276/how-to-get-the-physical-interface-ip-address-from-an-interface">python - How to get the physical interface IP address from an interface - Stack Overflow</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种基于 DRBD 实现的 ALUA 解决方案</title>
      <link href="blog/2020-07-22/alua-with-drbd/"/>
      <url>blog/2020-07-22/alua-with-drbd/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="37781662c64bccf39bd34e3ccb5854f4b3f784db7a8ef4a7f3fa3cfa72af7f64">b48514d55716e1a96c0f8f9b1f5ab687bc24b20bab4bf27a5424100432dc17499d87a6a657eb6d2669993aea908eff6edbc2ba82e80644a5a8337e90c5497d14dfeccf93a2a75123c4f3db79007d32843c6f72112270d3016d8a4fec7c6369bff9fbcced5d2710c1e3eb27cec86ff4f03fb94f4bad26fedaa7924f865d5cd203383c8e11be1c2c5b032d536a70896ca2fdd348ec6c9787e6ffd5849db2d7680f678cb151d66e039e1532b7f3beacc73989b93cfdfffb8873b3db537a0fdf866bbd6a5f7d1f3067fb4432216489969106386dc7eaee8beb9ca6800bbc7108bb27f4f4a1b298c840ab615eebb156b769e558f02c228f1a8672e78630944719e5c30c66b5393829e55738e44f59366da679f8d696eaa871252d4b19913304e54f218d6a0e195d4b4d25eb350a97b6e3846d568175e1e2e12b7401700c94b66813e3862300888c5893c681bfb734a226482ba84c4be3e36747f9af644218888fcffcc8167c504a503c317ef292ab6ba54c5f3ea29f717370b63b236ea36e162d52357179084fff6b642a74f25f5095fac8b85c086cb78a9149dc48047f06ef5c1613de9edcf2a08fe6e422e7432d11614f7e859103478c3401920e0b7d5b72d81f7a5ffe6fc100e77925b1f93dba1e585b715e4e2b901c2e2e937cbe1838e33e7c4f9200000a7dfa381ba894db7bf3dd178c6010597517102dc53b233ca758553efbe9062fdd6f07b4d0195f7327ac964c64b4d7557b243b7b72cc656be5d07a7948fea2067f688e2792e6cb01683b8c4f8ad117ebe17ed1aa8e1f087459f03d0a40868221db449ab9c64b38361cefc8678926afc2eb4a6a869a0120c0804b27cf807f20fb61ddf49d50298ddd30b52b3f81826b24532655b0db20d5103ae82b71857f0b380f074d7441a90b5d022bdb876093ca7fc24d7a19ed1678aac7d2136db6ce29f30a798fa6bedad6e86fe419a229fd1722b53acf519aef1dbc40ee4375538ffab1b1479595a915bbc8cf69705c7d461465302c2843fcc9be6d681fe4100d14b2b85d7dab6c270f181260e2e603b296b1ab3ec8e1cfa6b74e442f37d054906e938c2e7da9d1f6fb2f452f6dc074909c7d077086be7abd66f0a3900d04f647e3c01783c9bea38af66c25b053eae627825d719ea1121fcc3d90ecb03c949069d610bed5b60ad2a2ea2dbaf328218041d8e389c537be7d3d693a000ba6b7f1d91316e4c377422532ebbddf3849a10d109846a2d58d48625b001a9e5fa04d5c56b7c50b6d3b5fbd3da541f5dd9b62b7fef297689fa8d0bc2885c9567d18dc5b8cb7c2b82785df181eabbe98b06ff36583acb70d93d228edfaeb0a49d973d7cb8054b1a6695194e47821d7ca8bc55c04a24e8dfabe3b3ceb2d8e206438a90d0784df0ca0ee60134e83afbb343851a6c5450ff99db58ecbc1b5428dc7d593bf27f3a4221f74077d236eb31b210eadf7014d08d71f9baba65b28f4734a83c59f0c33a956524d5eeeaf05cd9989ef37d9a0047f8ef40d5fd475ac116c9e42239465ca6c3659ad6dc9faa014a5943945affe93f4c8d16f96272e332884d079eadf78a60e0118296dc8d2ed7cd8848b2ebb3915ad874a3ec769bf3821f1e7595c95061e8445f306fec30803cd272c343448949d4b0e817916cf50ab780f3eb7a8447415dd9d0fdf611ab4a8d1725293c9f5afa92de846564af25d1efb77d5a0cc18ffaab5663421c105eca01c72c81cd29d4b85c7d7dafdb1a195c08d05862c1a7a4c1a4119b5941394614af586f03170b8f27ce2c774cad9b41096dde939d8f533fcb8afee163701cd9511903f3a9bd85e9334af9ab0b3edff80f589d6b01f2483c8d2dc3ff84958eb5e287575fdf28826dc97000d50a351db917123dca5a96cc6230ca82250fb6f7b136366b7162dfd317da060ea5025205fd530407905815466003a257cf382de5a6ba4499f11ce332314325b0069e5b26ac2ade68034851dcb9c7dda7d7b468953a289de2f8ea30456fe43c5c0cd3550e441f08ff64890b1a8b2d1778fe0b0095b9003f54b487df42aefbada2838128dfc93df5c7c44ae1da216e12131d8ded0a0e994931f89a676435f5bf44c353a8547a325e3ce994b36638eee9e1acf092237b359ba069579a508c08a001c6321097ec77ab713b2f69b2eef4df1e3b13992d50a7e9a42f268599e5fda4fec59ac27aee9dba38b0667b36e1a6ab7a0bc74573cfffda692cbae36704e732546c71f0a654515ff520533eeedbd19a8e602bb2a607eee12a31c1a19552607206e37910caaf7574f04599071dcca5a20a90913c8f19cf6a19af6231200b1d1fca2b7d0e0012c61f8efd1c94bce4a0c1992da2736ee9b515e0f3b4e74cd4efde1222c912becd6825ecfda404d73481aea6abf83113ffb58636c1729df1db66207ee5d141b478340e9373fc950e0af7806339206ec64ee23667da6dac3c9a940af51f0134bf0205cacf04c069eea757bbaecdbe84edff3c951b0799dd6adf49b4edb05e5a02fc276f87dd087b55a8256c1ee35e7ed9d800f5ecb495d1637aab78cb7aa0d3cabd19702384e9281c0db013afa0d4dfe1de83a5828d49f495eb24ef04c1752f66d4a1aa71741cd5aabf2a3be9b87aa112530d73f660a44a54cecc23e19bc0cd7529e98b2323c10dc4d371aff77ced42334bd18019074204778180da2bed4df78bf904dd4a38b3d0837296918302b32c1b35026ca4c5502ab49414140a3af1f529950e40548841a49376fb9420e034f05ea90f4ceb2d5d16d95986e67dc4cd660e0b34300217864aaa7e8436027c9760ab6972bbd587b65dc3071dee8a1cc17afc3a55c6cbfc5ecdd00bf7e6b6bbecace6257f48cdebef3c52a1d121fe32d8086c289b8da1e3cf4e71fcf6fe0cb4d787d0cef333ee3112a96dcfbe2a7df582bc017f791cd55476ba629622c2ed4511f5ca03d8b1b01a9d236f4c341b53cdbc8452423a722863bd57797da6d561be56a3a4fb7dd8445cafa7b415478a82117c43b36dad58bd6e2594a23cadd17b7b0147e57ef04b942cd945689046223f48ef7c74023c4f6184a3f5a079158d28a3974db7d57ff6f1b9fd5eae83a24db4d59a269acd4a67d39495d6f8ccfd1fedd8968f4df028ea1572773c5cbd6d04a1658bec54c073e6cf0d7933b2fd8b5d60d545ad8cbbb330bd0237b3e375caee6b1cf3a97903d847c8b22ccd99d78a875ffe44d05255290ad8aacb2debd735f5bd9ade350e2001f19e83787cf7681bdbcabb522d311dc6b3d8b7cc1f209a3577805ac59be040c9a05f90b8efd091ce2c07d2d1b87067aa257e447f45747b2c657588271f5bd3dd639cfcbcc35f342eb4b5fc47fcd9f9e372e8ec08f3165d69413488f365585fd14f7df0ad4acef1d0f5863d1d92cd18cdeaf36f7a73c696b339c8aafe46533b741e1480bb9b1176c35779bcdd9f9cb91fad0725aaddfcf91615a781f0f545c67dcc5f050baf355ddb81254bf2deba66b5b9b3fda3caed9ed777c89c4318540907c6622804c4d9536446c472cc505fab73eda4a3e40ac6cf2804c989046852a2d7bed2e2ccd0a5862cd5e6ed305dc4e203b302b47fcb077264e34652eb5b9cd9034605ca23369cbb2911dfb4e9d802c5e58f678a8efecb6619a11de63f4372539fe95f924da47be437689ca524d64c7b0b9a3f20bbd810b3133698e2d8a1527b23b0c132a4f0c5315e689a5fd5e520915e23548cc7310e0d6ded9ec263a894c76da834d6fe40c3406bf03dfa163140e8cc833f9e3f064a960458b5df8e2eebdecae36bb936e1b0fb245aae712a0ddc3edef074db8c7ef0c6d425d9780c3f5f700bd8ff0fc8a591c9297c52512781633280ede6a4bfea198e1916f7339a54137714e2e9be1ab9414d5126eb87476d84341db22a3cca13200994b7d7680947c5a240577017c743d97e484037df88bf4ba324096039e8606f31c735d1354b620859dcdc5b6ef54368a7bd46d403fde335b0a931989e357ed1c5dc2506c6d9c7d5c599a1e63c61dd2bf6dd1ccf2358ef0320de238287163837953b1baa32c80596082f733287d872e93991e6747d9c777f766b2f6d22b9ca650554e59052e9098fde6a85b4c375c79ef88fe215389ce2fae209acf934a3d5fe8153f08c054f00df18b0fda46b82e68c0ffe9e9081c93d4278899cf162c5d04371f86b8693f0bc8ea9a1dd42207967b34a58061acce5d813ec5bcfd3b081f007eef839e6b36154c7db2913141401b2af04e77b831f610a947e48035b500bd6396c72d67784691025bd71aae3b7895cb868d4bc789049f6364d600c499ee928ab0d05be49562181551d0e2c4a853e35b8388b35dd1df080f0389f3f5c75a8bfebd337d208891c081edc687acbb79f033eb2d1d4dcc814aa8627032aa8797dac2548ad7d8ac80ec8e5e6fda0dce0ace56ea1fdac3b2422dca703aa849e036f41e51e5abc1d91959f579c51a0f5b25c61d5ed8d844fbe65232b690649e025e76c9706886c0ff55b268bfba52f720992321cd2fbdadc65f9b9fb9368c0817a4023c2230d29e38b7d7102432aefe4991dadc60af553ae64c2263c66eadc9898b287180f5b10d1f43f5922cc0b8fa1dcc712f939fc47942aadaed6e885359f5aa719d2e51ec62c4a0a4734d51566284df81a1544461c1e14a9fd58d5c37c9d405bc9496e58dcc01783cc2d823ce0df7b546ce60c2edcd35795b66aff710a67854aa6923d8627fabd08f057df5a2afc5ffa4d080c0eae6ddb957e754109b459d2e880c0e343961db7d40a7a4b0a458e97b8cfd68fc1875d3323bdfc420d471625151dd54695bef1a0b54f461c91c61c339a4532f10258960be3590ac25bda6a453f673a41cd81b6cef96c556d310700bf40293615debb5087bbf21f04db9d8b60b33a7acd8bf4d570b71b26ed6e54595e9b03a8d4003879eeed7f2ea2cb3538d5ecc284a397f6947e6a455a84380c7fe91dde062af7c326eceb9dd4f4cb7b39a8a17336157841b29873edd4c9ee0b7e7f017fe8418e24030d49e36dcb38e4f95bc562253db8fcf81b33cde00db9a67c443291c1e7873b9ed8a6bcc42588e79c2798f0337eaada69d8edd9b68e704faee68e2f17217aceae5d76738b9ea63546ffaaa98613d3223a86208abbc3065a62bea9a44e2b35a3485d9b61d5d488e7197621e4aa5b42e59494b108017c71b86f2708d171ed675230b5f18966a390370acd34bff91d1f9144963894e5b399e42da6cb1a5df9a15c2ba12e4b345821b5de547e9c9c99479a410c482106eb4178daa089cd63db2c972708f395a8e65d456b80405870f3a01b3f9471a61157138cfd5485b0ff7bf9495699ba07af866a437b910d6c889555b2c32391ce7c1e3b9b180897272a525ad16e90e6c173eefedd30f9182aadf2f144d3411236b90b888a4e33b96a7877469a508654067194722b10fde5528be8d29b5137b17a0af1045af4b6a424346289e62edf582440e88008bd709811d0934ebe6d6f8cfd10cf15f73b0a0539d9ca2a1bdfe7c381b773a35150ffb121a77388f58c2cb38ec79e19fcbbfed642640cbaac8cbfad8c9eaee0f42aeed380fde37a8d521e8890c9ebc94513b5053b987181b21b9c7d6af8b5213f8699a76caa8d44c94fd0fef867a929323ca81c6c5d077949c2c86c44cba3e5097b20012851c2f39096e498ec6f6ff9e59aeabe07e8edd064f1c595fcd8cd0c46465735d98c30f4ecb537a816b97da6e6306fefb3f36df2974ed68f792b561bbc5e8750205b841aad1fabeed40951b489aa675a92d1c99718a6b3159f7a442a423e6ea6f50ae8b9063382a810f39ee07983f792b77143eb58421ca3dfa4fa49e652a9805f7eb9f8bee00de050a389066f8dadbd8ec0628510a94b01a45c820f8ad984359a783bd6788f7658c2d741c10a1cab8c8a07e08a7a627c5ec4b8444ab771b0bdfffc53d866f2367917f94d0f35891ef28f95c92ba3f25ddb8fa5185dc9387b8c1b0ae27248ad899c7ba8905d992c2030bb971570d471885994cc057dec020f9238c82388b56f9b0049ca80e282a1d282b8e4c19fa2df6f01c396513e657f270814161d37ea9d4db028651096c2ee1cb147b2b7e7ba7881a0c638b66022e1135c27a1ff81e551f4bc237c5ffc55198ebe56a015dd7782c2314254bbd80084f58c6122743679e4985b007208fbf78ac152f9aa5e18be9d0035be38602660343d72dc214f5b87389a967a3b6a213527e67e90ca1d536c5e518d1dc0c23fb355d2e92b762a8b7576671021ccf0528ffe232efe69bff9fd2487fe24d368c64df7c20d1c763653acecae7723838ca524ec05037f0f1e0d4d11dbeaed4317bad1be0e349b3b38deacc1aec0a322f1df981447a15926f8bcb2396e500b3fb5928ff042aa5a38e3cf2672db078e4b6fce2a6fb115e34b306777b5ad1013e72ca553af4695d53da0cf7dbd9466f2a492729ea9a0f6b76013fc79010cbfe79c9881a295c21bbc0f78465a66dcfa11a7de50bf6c106de9e887a2c744e3560b88f119b6f39ccc126e17f3935a6d4e469a6641ffd0512cb29510122255134e0f3594228442475d2c5261a948a54ec2d511b8b37fe7d47dcd7c24523b850e388a7962655ae2eb318c095a5853e47dbc3a951d303ed68f4b1e227bdf210d652711c68800e72263257b9fa71e41b5ba6ae4229d4d6f07f6a062ae548265302f79bc1b17a273810966ace388c05f932f051c47f1224600057791609308778bcd440bb5665a5c90ba3ade8b4b0a0f9a7cad5a54d33f8811de9cab1a660e72f53fef9a438fd0ede039f9795057373385755270efc04e65fc3050f96fd2916f65b63392397e4f9e6f5f3851c02f99e15d5498a0955fde0316b9a3e8cd522ebef3077e9a025d426bccc05d2889c789381ea7b629be2853e6ad29531703f6155ff56e475d1c34b6c6729616b4b0c29102cb24fdfe88474d3960f6b93cc6851315a9f00c82bbeb3a036e439addcead307396714ff9177a621b012ffc01d1bc365b408e5bc50c4d3ddc71474a64b84fef2748fd98f102fc320708734ec58c6995752a4a5cada923b9ac86dc40ecf6edc0ff2ee6ad3eb332c3f98747dc434d80bcde2eb9f03593ee086cbc594196dac3c63f795a7ae3fb2dbefc678040e3cb6bc78ed970580e35634fd204212d977dd71dbde9cdcbbc84d36f737e3ac525e953336a8f3b7db4da0dab6570007c6f77833d5ae0b9f428060f842cd4f17845df4faa6ce9641d2fe0d2244f2b0e201a2396e7f2b4fb5057bb8c8851db100dda0831409e271f25b1d96cc8a9109495da14abc148710eb61125fb936c239a7feabb3157c7cc9ade08c46ae5b25e69a9c161e618cb539957280f8fa750dd2706d059f29207ac8652cfa9b64f7193a839cd074eca589d038b47dafb90209d83cc5196f253d6718a277f776e00598cdaf581ca79c8a0bc9d5a583aca9c8746b76042dd29481b12cdb58cb10fbe7afd7d29e16485c6ac96460e516ac9da70bc027c3c1b196508be84d7fb934e29209aa88a82e0324636724d4044866f82e1fd6b2a983169f0bfa567ef5c44e4bdbb9b7bc1a24ba12f4a3fb106ddeae3c0b8a8038387ec2075621cf0feb187f5fb2e1eee8f8d219b8a0f38db0f1cefb970912390d1daa51bb639798806b43dd008c8510300e0c3ef3517197f272afb12315c876ca98539a7b68b5b31ab2d21b3d1df1c7c61252498cfdc53fd0e7c36dddf206fdad8a92706b9ccc518267129368e6c27fa6a8ddfed45516234cedb21a51678defb2b994536e95468918163fe06ec5f42362c67c3d77a2db1c54f968ba63f9a389ca641139a292b59ae839448cf0424b63cd1f1430690697c4edb76cbb80db84cd60f899fdb444027aa29d8b1ec1fe9f13c492848e3a8097101cc38ec817b2293a0d41b0fe28aa953c04b88ab5af0803dc99afca61eab1bd94cffb8d4f73f0c653a025df63ae32f4fbf942c8dffc05eeaa3dd29a5b1a286571ee54a742d16e276618975024a1d59cc520882b9650f974d7720d41ff227c8f9342207e08d13bd101d483713e50ad48219bdaa2f3957c5f4b5ac4a6c82ca743e1f3ba214e4b31fc9a348cbdf3b355aaad370aa8b74f446b107485a78a7cefc334f1d84b88e2028a4a6832bd70519c6bc44a81ca123fd523eb45e3bdfafad22b1d6629e8b5a061f7f478c283866c4f32ad874b208f496a16bd8cb6bc6077b9b9de8353b552bb0c89acece237f84df3f15c2c7894e413eaa16fedd94e7587427a4ccda8e0384efb6169b3e2b7c981aa7e603138cae2d27ca222656dfcd9edc0733feba5a8ad984880a354aa0e2b8f1c5299414e9a987ff12d95240954fe403307c5382e13cfc7aa8f278a204727639f9835a404b2c694f10ba54435c0a85ca7ea3e6c9e0af83e7ff905bb1742c0d1b26b61c0d92acae50fa168b2ef3cb70f3bd75e40281b0d05bed7537b499f1560664838d7d6425877d67747025b1354c20b56ae65a21d2e4e6b41647871b5bf14793a590371699ff8bba96927db800d6fe26f2589e23b3dd33b30d6b428ec3e9b2437725b9151c3f77f8201e94c7ce2379acfef7084c2e95adcefd0fbeed77587774d1a57776ca37502e710b0cfc32f0dfa31622764fd3cba16b21d2b209bcc82223242274e99fafb0c6b3907b41f313dd9de51edf8a15937f28808e36b090fed859212e8c2a5d250545ab8506fac473968e6c6ae6e1ca58dde86a4a3b5675bc6cc937b0ec55f3ca8f3a1dcbfba8d0db53bd1645048c0c63de2a19caf86a52f6276d5ba07f6f2f96de0ad48d04e3e67c52ecc72888ef4341ae0b76a8da92e3480ce86ace113f654516f23e8ffd3fecdeaf4c9f9b199e562316fbec963c8d0430cef4106f3fb7694df6926e54e5a5482e99fc78a90981bd3ab62cecd8f834db3371a2ecd89ac3a1e813e8c823b646be22035e38912acc9e7b9731b03bb5834c3808a978b56dd35a94c15f69a1180085ab4c5bb007c5b2ba9062f45fac3aed80bdd05074671e5b2dfc9579ebe90e36dd4453ca53aea382e54addc83dd1147d8ac46f8117d0f4f485ec7bf4612a7752b692161ae6f3a470ada77392c940329039e385838c956cb49a8fbbc937240d4c5c14d52236636c082c2c7f47efe0be2907fa8a8d9d81f556cf28920cd4fce4abb155d8f7e1404e8fcf8536416154f53d04484d30ee32cba2e3e36dd7969a66f2a5ed373ac74a0476b3fc6946a7d1051f9e552cf4f25d0c6964c13453cc6df67b77af4358bb76e6a897d5d0685bd307c4b0d63848fc42d686e65b8c43e7b779361d5675f3044068d648049f3c12ff622ab403b4e783713e028559b22241b354a46853f16d60802f674d2e6ff578dca045eed9e79f6fee60026236e0e59ffc242df65c995fcbe6ebaddf31d3a5c163c310d54b9cf2eef7b60bcc21ce694dd14697cb615fc687a2353fc6ccb181cf77ba9730f1248d3986ab8336d0d4f309a089d2adbd0ac9f416ad39255fb07b5114778d440f0a76636f9589c1624e67fb6e8e51d8714b26208b5594518d6586600a3b8111bbf0d2a9864220b14aedfd4ab6973786f6c37ed06cd01a19a1ebfe660b116266a6915b3bdcfd5c22333595c683949f2f7a7e36dd149f9fbd14b12ed1af4a7813f319012b51bd191d1fa520bfe6c8ffa40571feddcfa7cfcb183cc1d88fc13118db23071d3dc44ed19cc89a74ffbc2c86e8dc3722f1d3b734e89ff51fc09e031b9dc0de414f360db61dc844276d50abbb53dd1a9365c5ed6181793c5a64906092b0dee46b0962fef8125ac7607f10527bb2e3d33f7800b12a49f1d8f4fef0a60807e74fd286d4f56e0cc116eeb0b8e57283a026deb75637739c50f28ecb42d926d99cf61f231b899419e45c772f1370eab79a064808a3237311cf153c867573d2c250d719b906b37eb1e4f97cab6ff41fb460534398759f728a7cf6d8262365ac46da1bda0158e567b40b4e99e3f7fef16fc73545ee1c40d07a364d5b47ee76ec56ebdc6cd983d85c60a481e1b501cf45f1c27e47f4b7d65f967d80130886be10da7d5ebdf426fd94409ab18b0eaa9a394e2441abb6253264f1bd3b42c65136be0a5718459e5a7fea811e31a9312cc97ba63d7f181a29dd415b10a3e33c028a608fcd6ba83e34a34747adb324cc1a4b95af5d047fa529e6ff24f6d8bb589cf1999219d8782f334ff108e30aba4947dba161c5497ee332b3f969be5e1b8c8540ef389a1524fed1c03b5010f4ca18d1738c0a0b9d877594f25587fa13cc23402df3792819e6de4ccfa8884abbe69c16a3800320c31f5b5344e0a9e06dfac8f9bc1a92c3a65005edab5055bf217d9e62b19b543ed8edbb3c652f442d8f8320e80f53dd529df76439cdc3507e0c747a351903c4cb7a39e9bcc35cbb2d0aee00e78353c3e73682edb600581ee3523682b0b03a09d48a62af7f100edef0db739f5eb704c822e2c9eb7ec1569618521a28599d0770f0ad0fcb8c542f27d03b5fe60eca91fdd9ca50916d2eccef48ce524b1a0c3ece1d6c215bfee1162688b98adc397ead1788a85c44193c6b64a9d241e6300da71dc1874d5af5d93dd0672c7ef9545a16c72f9ca9b32da7c5965cb503a995e95bf76a1209b37e88c96891563493693a10271060fd1e16402065dd248ef50222d5187e5a80f397962f5c7394f43cd12c2a1fa3ac79b91120e9762a9f5d00b42c47d3b514b571aeb0671cb8ce27731ff14cc60d26f060aaf3e4ce5016ffb7c904227eb7560c5b17f61809fab25e7552f1e11cfa85df4e4da327f93a7b95b4ae0e46f14633c443975ab42138fc78602a55514b9c045df09a15fe945e1b7dbaa63b1741eaf99f49c87fd2a2f6b5b74bf0e906849899d6c37a9281c9da13f54d7d752b82a1247460f53451aba6ef086caeee777e363b8d405370b6446d09f81d350a67614e870967da854d5d60da2a722b0165e080ec2398c91bcf97f9e971ff3e437651561d0b364e82a5d1ae8f1b7e26491473b7c58769f1f697bbc32f92c5538abeed536351d7d29a2196765bb050fa633cbb960492d501fbcf7ddf18df7d807d891599f4be916383516eb491550b3f122fa5667a90af01d875776156af3ce60f68bcc20dfb4d585425400a99d5f1bc207fc8eec4511c3068b36819850bf50b159644df268f0b362fb01afc8a711d15abd4f6c2ae317cdf0b1a0f1467ac9ed92a143a3441f9e388a2be81568882f92be346012363de8ae7012ef06160c0a37de790b537fe4910951216fc06c42adbc6ce2d24b3c5d3227ceb15933536bc189e49344af140264f2707041565ce89b8e575da6dce268ef08f299c15ec4577dc2c6a6b9765e573fde56678b9701badee8b38d747f06d7e493025aaf0495d72e5b370fdddbf06d73e92582b61e4e33ec2b97ea1d1e3735956efe80eb140fc64aa1d045c19795afbacd8f2f62934a933bb2f74ddc80f79b757dfcfb1ef1536c439d42f2cdd840457ff7fd097c92d50d5e9cbefc71f56527a3fead5736fe72a7ca604a554092fc48b892a6804c607d88a670cd402dbfdb69aa3e778cc9e46976b931f2f10e6000b879f4c3ad38c5cbe46bfeac3769b06a1c60e076dbc558f29b23413ad4f08ed4cb90793f129dbb5c5a9fe3a3a749b7548bdeb2a1cc06baa05f75b34840cce97b186a516e5ed005a31af321ea55633e177f6e00048b1944e6ed3dd2554910c5723a1523c3e15e763c926138773262f4dd5a8ad577510902e4e015bdac4563392ff8157b79d9e776b3e2e4c8281aad772c5eb9300f13f5400c4ed2cce0483b257297868aea5d671d641dd9e41b68dc5ed1571062fb9124572810ebb8ee6db47a1c18c11604ea9a45e1420177a34795a0df41d50011b9935960308770873244124b68cf0292aba665ea46c78442b6ad1a4ff97e045c9484506681a5fb414a737364af53fbf0ac77963dd53fd5656aabe6fcdfe4fcb00f1c226ba5b787c5e6f40ec1e8fe0f7c84bc9dfd38864751ab15934179710592701d7c77eb7383c9404acde69ece3897b7b75fe31cd6259adfc5737a16135bbba72c66755b18eaf36632a859a7e99e13b86e11a158a6b02de98b06656ce8cc217b1f1fc75365403fb5b4a9d81a811c01e97755c741c7eca20c11a3667d00bd6c370926936a2d49ad05a867b5d559791a6ed5a8ab841e7e53a961f89cd3723656678b92dffdfd47b5b361a9a936a942c602361aa9803f6261c023fa4370de54d9b2c9672a801310d602d96dc8f1515f773077e577fcab6f7dcf43f91554b6901a89fc37d3a91e670f6daca7a572ef4483eb83596e84ecf0964648e38ddfcd6fcb7c88c942072e6ec17259fe86936abed5fb21ec6afcc1b9db83ab88dd2df2d308fe0a89660c76a5150fba8c5c886205bfa0f85bad2e4ee8caa9f2189442a525032510d5fcb364039c22325a958fb7dccc8e6b619584f98d45c6b47f227c985904e15a3fa28065b4471a7e6f5f21817f9a5b15294398030668f9d32157199c44dac13d133238bbc2d8d039d809346677d77be0e388852479dfc3c6ef081df693c6a550a1a57e0a581464031b94431db1de84e6fc7ea75ceef374e1f693c217f6b426b1fd2ff1db880d1e5c5efa5655e62fc9c32e4302b11f6261fd1d05249595ffab8b978e4f58a45da904697bf38df249cc6b9c1a94cd6811739194de779b09b801d2910e74f2f00d06476506edd05901e29a9f0082bac8166de15013ba54b1423e823b810578c5ed3a9aad849b752b579c7b5f8a45996b696fc8fc2c0108c1dc63f02832d3f1445bcf6f355cfa0c636eff0aea3508e96613aa12d2a55e7b90283c21b8ad18ab9a39450ae60a3fad299991d1a12d99b6de7c81bd70ef50e11cf986f29cbf291fc28ed7ca45416124f4b9538fdc5b2905bac4df6e767413bebb1f5911495637b8cd701d633523b24c5b56ef1b6e4df06465aafbc86f855ac9af16cccffe93bd3c7fc082a64ca07e7046280349870915c83cc0c5dee7ca27cec80a32b754b8e52f90bd1d16a5d954d162a8b93be073e8429a9b6fdbde3f153d4a4ea56ea6d82ba5ed72352810ae26e23c26414fdcdd7995e2131021e7cf306ef81ba799c96e4c3abf8d324521acc270f2c7fb8ab6cf300c876846608308ccee223b373707fc80aeb562750d06b9edae722c91489106397357ebb7533eccb9ee113678f9a95893dec41799e39a49afa116910d76aa614dace5d2795e2fcd4f21dca6486c04f28cd92ca1131beb03a75d0db3466964d7cf896d953031a90ee1458fa0fc4939d79baf39293fc8d8bffdb6edb103ca55933019fee20e061f5360aa11212926bf4e7bf3d4f0421c0abab9ef0b9b324a28a879d21b572cbb5aa35eba969c8ae0b921c8a871ad8b5843cfff76261174507c7b2969241ae0747e2e25c49b7ee6516ced3635db3795f12f0ba7bf71c9a255bbc40caaa09ba5633656d87c3fd6839b7c5c67cd717cdb01242673912517aec448c88ea9d2816acb0582b6775dcbdc15245dd05aa62b9da23461f543ae5016fb0d4fd7216c5607fb74527a7060be63eea44bd427bc6758a1db3f8c0d1ac78a89b53908dd664adb73c21c0175c0f5ccca549d3ae6f6115fbf9879d6e8a6e8c2eafe0ad26893bd1baa1e6104b2bc5a21dfd66dfd66af8f2afe2ae5fc5b1d62940f47d115d8f93791c81df4c9f6529dde75bc01b6e4447c8486b4ffcee9941fc197846a087369428d5a051450d1aa0600152acc067c4599e359fcddc1a9ef278acc7d418fdb9a4043c5fb15a8f9c78a2802dc5e071d987805222f4f3c99e40b3df7dc0430515bdb12c9403ac67e3b56108f7a20440a21881ac9cc1ecab450342881030fd3fe2f67a07ffc6f53f7a701f8b0da339b388dd770d3ade88d6d4a5c4eaa174169aca3b087315e82f9ba8747d68fac450415bccf9cfff9bffd66dda449d9f9899ef853fe71549c0354ce6c396099620e4dcc86ffac079a2215af67d21e2604a6c49fdf0f324cb4027f390e6c39303154c8881c3f5895085245c117cc63f0c5bcde720e4cd21126801810b54703e841c6c4a9f667a778653b6255592c03a9a659363dd3f1f2ab94ca4c1cb77c8e1cefe7fd87ace60f6d0016d415901344ec8063f12166045608f099f77bebff37ebaeec4eef84ea7823b9871ef63b642c91cf6e60a8df5526837d374ae7a02a03595254d258f3f8c9a990193684d42b4e44ef3537e83c8c76c4bbcfee127da4d3b16d38d8cf353adcd159e89f794b838b93e839c69aaffca68b5892555a34dcf9e6100249a5336d7dd05761527cba6e0e1e200429ee97b76dde400f11a1ccd62c002dec8513332e0057fac9e0838db2eec108005719caac334dac66c3e917d87f69df88cd9c7cd051a9715d9f074bf44d0bb0b86e776f7bdfe385ba9ac43f1ba2f76c8fd1d2de6ee7ff6b7e4319d3b20c4fa63a3dc1ebb4c53a48e0c79531375ebf098c03048e1c3d74b983ec41669561a9822ed1b2deb7e8c9fe0a56bad3414b93def815d44bbc2dcc38b6b0abf0444f197b0e38080677781516d2aeeab5b6b02eadd8e1432471bb1cb745910e965111459b8745d7aa0844c0718dd7a74bd5f9e5a1a1253e2481045b93b9199c3f000eaae29bfb6ffd8e9033810f37c19f9707551b2f0abc13e290bd74b5be29602ddc8551a152ee556b521b3f34298d56943621ac16a65c1fca56276d837ea570020611d01ef60b9af29d6c232ab7bab9abf5c176d30701abc6a8ee599c6ccdf8ec033d64dfa1607684686d5e5e69c962e2d277d6ece769f4a02819715c129e2e24c2dd86b76a0edc263d66cb4455dd5035a01fcbaf92e094c1a5659c05081a164e15a2f492dc6016bbbc2746d7187b301defba4cf339270f1e933cf373be5a4081fe52eed776b5400dad50163342668ce936dfe4dd32fd981cf297a39df7b4274a3ca4fe4fea74c3ecd548ed3336b504ed8755c7db99cadf90e2e20c8ea2fad03ef11c933c7d723c28fd0644dfc263e627240ec6186f27e07632dc03e1ea4c1af28cee6ba393109f857f1958cd53757f716844e3b15ae2eb28cc20b18c881d28768b1705770e15053afb88efee55fdf731d7caa0cb80d5d8580242189763ff745a32c017b542eb5bb61835d0176aa5c809e102d7489808564ad846d25ba76ff2306d59d8b51d093c49fb3954e7a643d66b245adcbfb80308cfb120c34d677290dae0b44758849db44168844e8a30b19b4be38174929a6b8e8a26002294b9a1d383b889037fbbb89f315e7de580eb2e4c8efde3b725bf64f943836cac70c4d80a82d92850bda8173ea3cc02f51203764ad8c9279cb74161c63501ee70a298ebdd5428b62cfb320a60bccada4b37160efffe1c32e65fc93918146d3fd20d9b15312551b351a547522372c12b63993649b9ff77587ca53179556e25b25db517288d117abb0b9ed5773e5cf48d26455c144d555ae262a784d6ab256948bc346e7e9ba7a04242afbc009a83bb59d1eda82d3cbfbb8c24ff89b2bfe24f1bc7d9eae6bfa9bd383512688090cd8906c8f7a740a8422e0f225bdba191a0f4a5a48fd0074530ee6bfd71490b6e810b61d5b8ab49111ac399c20e89a94bf07cc9bd0b28c4d4e1c0631f98f82806ca961f94d5017ec1924586ffccd59ad2b0e8d656ae943916ef97f650e785d1e7919aa2934995763da6ab81c618a768ed52a46a227b150a9e53e5595cbd926b397a4697ef16c7987ceb115af9ff435a715b007441ec096d1a71c18223e9a0d80e16913508262688816b796dd90b09cb97a3ae263440c8086917709b90d972a337a143d70542f54e4ec7e4ce5fbae07d081963b05f9446672b26e9e117a8fd6bb5768cf403d3e2a1472a779d5176423d2574fc58ecbcab05539e6a938cb6bbb0cedecc78bedd1fda57aac6f93cb82a54c8a76f0185e34548a3e54443ac981247fb086bf055d7c27fa889f684b84970fef7278327b658f0eb8ce7ea926339d554cc61376747b9a0dbe9f00d61ac3d8d8873c9b1326b5f1108c67a3454d90c97d71ccabfa51ed6ab89b39256ec0fe1f3ad402a5582a603d5e415dd50861493ec8068732f13bc113a0c4809a3a936ffa04d79b5cf2c7fc33ff95b4420597dfa68c6d969b21df45695d17791cd43a345d81655ad6f48bfece4a68d2ff2922e9dbcf28e61c7021111bf5ce201c94fe2eba740703f2c5804407b9e827300a0e6884d87299e2bb3d6969a1f74ee5378241216f202fb264a9da02ba0006183c9e63375f68a19820875dd28437367cc3fbd9baf4196d62f4303e80433d76be13d5315a3788ff8c1fbdf98472aa2140fc00b956abc19388fc6d5eaaa99de252ebf624300b6f491cadbd1ea00acfa1a557d7b50bb6b579d2d738dcb239be26ab6fc679a3dc148d180338c4210af85382402e48959f4b12dfec4ff509eea42b31a2175a02279425808901a7f1b9164973aebd2d9a2685c6a11a0fbba8447801e74667d6191ffb45cbc1bb605519c697ef1e723f8a714ec418e74d1662138a5bfa4456c72c8342a0cb766f897f054cd587a6413b48b928ecd65f1b3802bc20c953a5103ae7c44b81e6f5eee63df088fe4834925f2cf5b577a4a88fb495c38460d55c2773095cf87aa4f4ea589a6ace3c7f90ef012be186ae95f64c7110cba7018b71f7a6b39eb637cf59fb4fd378b6b1f2f53bc57ff4cc905349bf1599a790283285c1c0f6300986daf13eb7c46c943d55f8b8742304849974db4b859232f41a60a85abf70b413fad097db7f8a487b286ce72c8262c723f79ee886304eda24e27fe3d0f33f25b4535dd5c5bfcc9db3d56c376a8f973de4c31c56611bc908ad2174fe345692e11737e4f7583f98f0c2f93c1f4ab02fe197861f207e8d59ee1a9e20ad8c2d5307ff0989e4417d6d7fdcd081f765a1f663a2b1b06434caaeaec8c058dafe42cd9afdd4f82a8ada99911b294136e9e6078500762374af79c1bc20fd3b647b1991a899a323b606260d0ffed9ed15ca99105f177fccb9df8afbc73f4904a55f9108c75e4cf8bb8cf3575bf1b755b4259505cecd6817a858b301671a6aa2bfe2e99097aacbac5d78d2d77aa0e1b8a6836b6f7756b5e1bd7258b9a2d7f7519a0330402e1b3c00a57d01954480c922097b517976fe6945c18a958154ad20fe20d9e22861606ad17745d170bc28518c82a45e0177d7350dec680962cc758aac8c8870ee07551951427958b3b3da63bd81d5792d784ece94f2564c4eb02d420e08606651b9ef8ee011e58c77892f35b401a65abc9b17aa272076d3dd4f708ecd2d4f578f85d58f390e860c92374668b785ad792cdd6034bdbf347aff0045ed1bb1ad9799697ecbed5a6c6f992b9a9c8b2a51cc5d56d6b5dc143cd7e7734ac85f469c5f50eb7bab14bb333ecc34c7b2df017d0732b92c8bdb1f30ee3af682b22c12a2f0150cf14543bb6a519ce0df46f5f4ce3dfd4e3e1de13ef2ccdcb01a5c329e76c22185204acf0579283031f1bb5139bdf90fae86039ac734e4f28b30bcf18cdb0bee6471c8c1c5a437f41f0aeb827e6aafee16c27e557f16ec3f9238a94a82902183e24bb19a53d3f24e76e960e2eca0927e6481cbc3b53749c56602109944605f60976ea57d7bae90a5a3ecae53f309ce0600cc1f05368d254306d058b7e27e2526901028fea4ee458f67d62f2bdb98322bc64bf4f5013aa9ca5df55f353a6d424e695f07cc6cbf082deda2438a4612a00e63a5e61406c51bebb5be6ef1ed3cc49b719b3a6a8ac913217f646bb7c7c66ec87c05cca2c3f44f9d2a2b5434356193cd06852b4a3ef5b32673d8cbc077f1bff257b254856ebf7764fa6a82253493edeea32afc0793f1eebb6b205342094f1cf28d1b8e8ff5ba8ab1b8e05171aa0be7991e8a3f9e03766ada978bf5f0f2de705934b42cc1fed36ab05da4fd4b671b1c87418398d57b088767f7bd6d7be0a64c99abb3dc0bc989c0bd006442de10162fb69f48d7a6b332d941d5f37aec7412e3e007c66026e9222b28a9333809fa6c2fe0c15d2d6da4b35f171b151149c813372b38ec4b2d21e553027d0c08e6728572a9e8eb24a04216fcc5944e59b9121f0b2b00130d32c53bcddea5eafbdf6eaff0b6f323c8475c5250b4b2185135708d23724cd049c6520b2683209587119d855b67d8b2df59ed6afb8d617c262113a6c34ff50b386a06a1827cf85b47f8de46daa7e0826249db3034573d089b1ff3a9e88ccf47b5be879a4088261bd038e7aa71be034e7899bd87bcb9101075354c66ef7380b5b88461dbe088acc1553bb68f220ba95a78d5c19aea8dda50cb30032ada5e0c7056dea9a451b9732cb63de1e90b5f38d905521e9087b6f1b1cef528e939f9ae56fbd33d70fc0c36d4bd59428425bd82d671674eec5fef6e1fa2c60ed788c73944fe54017b43ba6cb141c6005266917d244a01732658a8726dabe84f8a3ec274373515879dc198029c0a6b7b0b0e7dcde0f17c0bc2e8d62f082aba16251406590eb92a71c34d338b66d1356ac6e2588dcaa39a91686f35304561e8adcdd044f9a69a19f9a99980754a30370e1a88b95f10c6f6498dd641a21c6d7313b6f7f3e0069cdc90299b7d365c79bb503cf679879c4958513a31c3ec78c3e364afb5f2f3ed5bd65515901021fd330cf5d6556b906f0ec52054db9b8916f4126c3e265defafabaefb8ddedf241e60d89c251efd90d8e08eb6332cb9ce41ca4926db3df1bc95b8c85c10e9409144ad5e66bdb23d5ac662d183cc78248651518a3a0750ba629e939fe6e08fae00d40ca8706bf863cb6a0d7c3defdc7358ff67a97aa7426663852faf01b615bb6eef461f6985fe4e1611c0deeb0fd2f08be7f4958a5486ee791fe197917072d119ecb9d5415ca01ca46d8835a7ed566ba855f0a5dd2b3a13a50fa2d42acd3d2984d3b0b22c409046fc94ca8a6ea6d6de5ce805278cce5a2fd445b3441058916e9924ef3f6a5adfaf1e7cf0bfc6b25ec083c78456730384936408d324d2d3433cdfc1f44c191d1fa3c8b1653cf8b15d2625e0ac42fb20ec765f28b003b55f4f5a25062cc9d302a6ebc57800cf6aeed7174eeb35d7a4a3a58ec1aa8a11f17d1b5818d13b9fe6b6893f11a6178e59a407702f9f45ae37dcb0ac9617b25680692b331b3d3279b817c9a22598bc2b3cbb9dfa64abcb5a00d090d7a61ad8d70b560a55572bcfa31bfefe903648f185594b39ab2a40e072b662d23aafd966558db14678b9aa65b725afc00aeb3db77a1a81d7bef63c52040f560bebac3098e4a91aad3183bf9073c03310e2bb4bf0ba6ab53f8d62762d6999c69e336faf0ab34510543827af1169ac698c28cdd18769065e3d42538924413f49557bd2b4149a2d75876aef735b095ffd8b8197629bda4b3d8c53914bb250e66dcd58379879894cf1d7c96df1efad893112409aca3502a602b1d597bdf77f09147734e3c46e18e5537363f5be8e6b4abcff946c1dcf0eacae6cd787cbfb066f39b626efe28d14c4299f7c0329259585254d871cd861af69346759a51c4525369b29db1113c6a513326de338dd25fbc548379781ce326ded219f28c24266834409697853c78f0cd1c9bdee637acb250d38f6e660bf9c43a27b282abb08d0462dd6026d821389bdc9513f2c9ff27e54054db73a6c0448c06e9296f6791518c9f01ebfbbab8eddc08ca4d76560ef5b41dbb466af5df713ed005e885a7fd89a2ba992e7c39a36cd2a80851005b2949b7156acdbe93f99ab79d750daff6d46bc341c455efd676f213ab31662d996258a794e59c25bfcc8eb459d28ff21646eb4f72c2ac391455ae699207aa33ea032d1446aa3f89d34c01b83e90e3d8c32c732b7cbf2cfcd6f9a7ed6e7d1243bd249b74c03f9bd8055db4537ea14c9bbfdebde11fd57ce34f605c484b26ebd67bf4c2c1558a2e2d3c7d5d25805c429cb5cd3e674a440d341c3d658f668ce32812605bc99d318b9320943ea4be5459429cfbd15a7a448aede6ba58d7a567bd3f0123099d92fbe2b5863bfbf0dc8ce1dc2a398337e7432767ea60b9e64d85f3731dd388e7123ab3a6f47bbe07edd9db3acc05517ceee83904dd13f0500374a1bad71b16958b3e96419d4c42440c3bc7207b3728ec9535763a00139611f702a64dc1d0e0adfcfc7c140d4ed8a90f1e7813ae6193c00993764a30adfa7222eddc776449b077fd465ce3cb1baf7fff2f489d1eac0b5fc5213fd1d2723fb8c20f472ff721b0a6798998a4c5c7b6b663bbe72bc747043252cbceccee0a92635c671ca306a3a085e0b1a4fe190d45f9216ac1ecc6d81d67f421ca61f47d860608511d9bf26cc1a7cb03db0acecea97081f1ed8f6212c131bd3174661cc27dd52ee5b0b60453d84581a2b83f30b1575cdce0fca12da0e42b224b067fe2860b74540e185886634ced1b75c8e9960952d28c4954dd9c0b7868cf28fe8c5453cf55b4f638caa6a241fd266e1228a2c6f7e437e776e32f69802deed666fd1066f38b3f69a064fc32032bb9d5d637f86fa27eb2a51e5fc14193b9ae93f3d8cc8112b060e9402940afa60f22bb0ccf041e4c974acc67ae8e16b9d0647eaac0b6063f130da5d7a1ca750e716b75360b0fa78ae518f8371b8d7f74b6a3349ce8ebf935482183701a36701ad75500f991efa19005fd244d3357abbcc87defe2a48eaddde19d33121949c1d2792976a66281aa0fab38197a9926f938644564854976ea273ac9cea01594dcf6610719366dedca4324a5cc04b4f37069857ca2280ee01c9a190580afc74da8a894e7b1f6ce2189e32a6e6659d048ed75f287e8f71eb7b864b1fd1dd6936941d4712b511515558075eac51d365a47a28b5722127728462f41deb3c81eb366857f29768947e2d3170eac2f289966b48687077e50640e3589e059210b0909ea202e1ed7dc5340d21689032af4142c87df4c542aca1118331d363cf466fe013d5826f244a840663bac1fe156be2fa53f1acd2f3bdade1369704c1e1c9d1b7d3ec7386a88d693721cf4a9773b40d15e9bfb0236d367e64ffbe043cba8c5ef44ae71e0436ea975d94df3694a3c6658819acef694e5c6f81a5b21d12b37bafa151384eb255261e3889c4ad197f59a5965855489336c7f2d355f7ee133c447a7b29396a40550736190b10968b9c0871ba5491570965e0e1d0e759902b4679fc166c0482572d1ce77e48f95834e505e4e74ec17081ffcf3934bb2fd2479c147b706216331b9e46f66f8731f3d7b6329c3723b0f5c5a792a20a6406517aaeb34cb25a75d94c38492a1b198505805aa5f90fc98e4e808e0222ea724d715bed7fc81837a0b7e55dd78776f261ac6b9fe507d2ad5a184f8403056e3e19750ea8bda8569e674b51a280d18ed76be073826e92d53e9442658216a0c496d9c07b1d11765e94228d0c6817876d22b3a03fa0ef1648defc4890e87f75e7c412a2fc40f21d1bc7b14edad8d111133aa2df73ae2eda3a547792e00125c7f0c10098054e75b3f8f7d7c7eada4844e67edc7ffac2bdb9665b6c67b593af34634eb027975addc23b7f689d5dd5e687eab2d04ef557c5e9fdc7856b6a56d8a6e16e061a5a911d618c4b61c749d5b66224db4a944d267ce0c7cca7267b3c397d5c7fb719b7dcb64c3139fb0369fba2a3b8deee28be7cc8f31ca439e102dd990e242f65276ab143ebe64cb4c496728f34820a8403e6ce06a30e97b54eca75c37b87a4735e2ccabf904e469beee917f501822ee00c162a80d0a0ccdc2f16c9b08b666b6449474daab03a3ca05e6ad862afa7128c53da6bb2cb408db09f4e227f7185b7e8847630bcce00db92afea05c20bc96f1412228e2c40c8607c90cd9d97ee8a6585eaca012144232027e0bb48e7900af82a87c037474ac3772a97819c4402cd1606dcb22e40a5c5826a3d2afd2b93fd053bbddf612c0b3b6f32d79f164d301f58436d4ccae3d57373c8f9dbadc431a4b001082e084ca649cad24330c7304ec1aced3f8052cc04d62bec6667ca515d6abedcbaae7e0f23bf9693d0805f4d449b5ac73daa0261080e488b69ff0253cd2d7d3604a3ebb4416607a58bc93a761fe091c1ce5a7923dffe805f3e21739d0e6e1e2b6bfec8f0c38fd4f1228cc6365b0f3e3b9eb8d78a07a7eed16c1a169102525e8d4a07a354080c80f35eaf759564199559b0201e981bc74e3740031e3b023e9a59975214a4024b0632b2bc97d51e12cd1bcb932d0b14d1e95b718c4da60df7d83c825ac37ae806300d62a5f1bbb369696137833ac9b8ce7d9b546384f1d57c0142060ca6aa2647beec3e7f7c6e105532b245087c059f90558af24105ba813e6affdb0d83df8292b7c351b517c6e1f08160a50a080f7021ce2bad50d6882b2d4b0fefef7104cc80edf5299bbfeda09e02d2712a1e980bb1d1593efcdd07140200e34a0709ad8866ce8222e823f48f490dd0677c6720daec186d2aa4ee0c7fa8cb30ed6abf993f72601a65d9ffd9fe741f56369920c715a8df220bcec72a6e6680ceb15db5413a7e29f7c3edd36d5c0b629edf04160a35692d99ba1a76cb314812ed94a1358d0bd1acd467a092b6f2dd347409358a6d46ee0845dbcf2f45e353e00fb67409e69959bf8e9f5840be273fd2bd5fe0af3a92a9a0619ac3497d868a29c93d9549bd5ef64a64dd092aaca65ef92c23ec426bb190535b32265d4aaea2c5052c4b60c979fcbdffe5a61b2347549002c67e568a6de5b44b4a52d8a173224b87c9a13e9fc9c678000a0507f187f3d87465b17b19f238784e655183a2527ce4c9ef87faf16fc7d8d277e4b62b8c8260f1f5636368afc1fbdf210cfd8def655a1b068fa8f570a79ea587e0ed17429376f9d12c9d5121cd44fe16e2e43f57c766187f9cf6c1f76b0915d4506fdf7fff9b82769b34f301dbd0a687f8890c15601ffc5d0bd2a4ab55e7b7c34bc5b37c3addaafb42b76032c750e60e90b503b3c3c4cfefcd1d78e9c8d6fb684ae9125901c99897f43689475402d2c847ffa46802ceca9b8a575ba7d6a363621d04cbd94cda30a6de72f7e592be90fb341293be4deefa4cb2b692d397d4b5d458d462afb96043d0e2e4d8fded8060a644f4b5d1dee9c79385a4e63bab475aeb76bea27459a8a036e878e86190b2b4859e130d0d558b7b28aecb34a77b51f4b360ef03c98325211c1909996b021538ede3edfc193c358942b10857ed3df4ec81bf64e2fcd6cca4f06a6f923b65558d4d12588ce2e3b4552052a02b9287ae8df189e04b21a4938b822e3790b2769b83341f8f21856d1635f3cbb95bbd5f3a98f5352834a8099bb1626a03cf3e2aba1454af411cb6f6950a59878aa847e242ba8fc9718a5c334bc58d187bfc92bd1f3a32aa9175f59739b247c051e9cfcfa745a5701bd24a2767c911cc4f8c2ca7298c51eb0a4414e753ea9fa98fc0333450361bdc6d511b6b03a2775831e426d7c41d54138026dcc0becf29f377fb433b24a618fb2dc3bc70a7951eab37f8ae3be715356d2b622c74dc162d16f730aa4445363145771dfea863c143cb14b6e1116b644a0b63a21d2bf1509f749fd4e5655a03bd0a05f8d53eeef3ae75e1a21049cab25e8c657cfadd730121717804550a04c605419949c13a0d2c6230ad039942dd48ecd55817aee7220452727a832553a3096eb244fb05ac426ee7252cc1ea9e4100446813a8f594422360257caea63e0d17c303aee111fb5cd20d4dcc3a9a8db845e5918e9ad35a6e34a843d698d96330221d5bff9f9c4b4e94079a9fcaa5dc2f14ac6c865c3951d3124ba6ca61ce431a3492ee131009eefc3b39fd6b2a392dc5574939138711718de00d05c9537f678c35108e42903c1234ae345221c0d90232caeaf97390eae6e83e9048cfe38b1660b59c9695d5d5ccf7cdcf4f7a4013e3fec2c4bdeadf0fd00dea784ef8e1da3ffeb7cf4ce6b77f7feb041b34a1c7989a4dc01fb21969c50147148d58f7eb575f8461a15c5eea5ca2a6978526b1d327cc7fac1244bd781b3b2d45d2a4a0ac90dae6ff34db882342fd61cc57af255fbb7b7f8a9145168731eafdc9cadf5928b19e7148314270662ef1146eec6253e651ccfd8662911955c73989aefba12ed14ac76db10f29147feabe695718afd769a782a4fa4dad5bf03053b6d0a4a5bc5bc39663dfdf91d39b6f34623ae43decfb8ec5e6aff98437069c9ec2f9ebf20bc82065cb24ab661ee4cfbf0fabb753e596f5a0b6c5f43dd150aadb19c75da2991b91836bb6303e44377277f30b54e45e4d40209b36bb926d8d2ab781930838f0420c8f74f1c89873369cbbd003218c9a1699d5e7becc2c2e777726c075b89db6051258bf680718edeed08e20f4b4f8fd50c51be689bbf49eb4b257cc39a30fe86e6519453de24e8ac8299190542538531181595669c5484a2b9418d9b3ea067e433beacd1c8895371edb577bc5887b9438398013c22171d3b7aa50488109cdfcca445b4013ebae8697601ee0618aa94fa77dfce6855bf8d21eb2b95c2062a3f456ddb6d8fe61d5c6e761232cf98cb95e04927befcbbbd3dd4e5abc3e8fed4d7acb15d34fcad7346046e525db6eb566e930b66f2c48648a9d20d0d2bc28e2debf1c8262c843debbc9a36b65450d28b6004fdb564a96a1a8fbd8423a6ee1481093a351eef7af6b98f457f0a1e688369be1a48e3e5b5a8d479da09e87b4273358c6de4259a1fc66d79d12ec7425ffccb22aa8d0392f40518becf9f38ffa2a613a83c7dd7fabfcc3fecb90670151dfe8c6cf251f3c78993be590945a7263f974006083a3e1dbbfc1ff1e392ee1a1b3f8a80c10c135978d0163083e6fd0b327b23f93f4a0858443ae3d413a9b3e9d398976ad88bd38b3273d6172f01de716a918df9156de076abec24e67f3a3a71930fb9c57d68b1b0d868f281a38e8daedde67d40762ec1a140dc871267456104b33293979adcf75aa8ef4368f3a6694420dc2641d0bbdeda099cd592148406877d2983694ef2d39933b1192c3a559d75d631b98ef9a8a2fd0284100bdac782e4a022d16440e627d2a264adc5115a57baf5504ba1402789d1053ba8d717605ae2f97c847316ff5e927f5bdd8423a92858c70a81ca937fbf08cd275305b96ef478e7e4fe6745521011d307523ad2dbfd9b8d2111b506129781d7b3509b190f94927a3e9576cda2d64f050b6d98b96dd39efe51361d86d0e2ad6481bbbd62af2f439e900903fce8ac39b8f5e8beb9bb1507281a4b42eb479f7053b4ee14b3fca3783264691db4998c9791596573cca5e727cb061b4ba67fa12e7422703d01c6a4970c3bde0bebc22f3c1efadf5b094af361f0e96066bceed84810130716ab513b7aab5ef183b7cbb5998a149c13bfcd371d4551571eb59f12bad66a2d8b7e41c6eeca66d546591fa9fc1d2bdd60ef0c194b7bccef8261f79cac5c36b0efa86f3a43620dd1b3805a9e9b35a42e97e7f93962b7b32dddd5615b88539403614b752f7131461a0951d575af43d1c5b9f739f1c67a755f5224af6c87503e68f59ce7f79e09ca7a25e9c1d9a7fe7c6b153a5057174dbf69ec93cedfb1ff592ce02fc7d43bf6dfb058b7b9163b97e1f38bdbb429c63aaa48af9f98d1d6b8b8fe9dacae27887e14c1ab4e34e281cbc3d7d4cd945a385fdc56c308599519682957093307993c28b0e2c7ba6f6148e4e982f0d81a1121b4776015d135a0084b0130461771bc366f00f168d24bc11067bb34e8b3ec57c30a503ee4750f392d1196d9a2f514800bf37ca5946bbd3d37230aca0f914c4fd33330f21102c0687ef8013981039d3d11926cb2d6a81278862ee560cb5f80d9b5cf64de83fda5ec9e6eb63f7380eb7ff099c05e868eb125675d88cd33ceab3eeee9722260d6ed265c0c906b257b34e0710b6b9efcef84d80d5d49cdcdf7177ff59c4b17bfdfbccda51cf6999e073c6949e93e75f68fb5e45392e3677a4e81c0051007e30cad7c277b888f6b5bbbdf031ac0ee75ca6c9df3c0f1ef0938ea72e01659f0bbcaad5032291914de543d32440544d4f5982ed6543b2404faac366e6f8d57cb980bdec349c65439228ff30259f216f60968c6f8373cafc5e1c8d91bc3241b553dd2c610ec21e0280553305455a222f7841f4f019eb919f4076c8ca6a601ada66e83c7c37225731e7c6e546540fbeedbdce287646dea3e4888ab5a29ccf6bb8d0214190a4be0560f1248c22176ecc1e7fc584857839620f826942e57df2a6612ccf7fbaa3e1821feeedded82dae2220c0c10b45ee6d7a02f5a15da72f94aaef34fb223bf19f96c71b5b4ecfff2c4c9083c55f7347275fc2dd5859972e6aa009ab310e4c8d6f2633f3f96a76582d61b5918431e2731696384bc97a0802c43765977f61b9646096a75b1f3836d5d9acc78e0ad7979d0da282f935c6dd5bcf9f1e40df9d12a50a36194720774bcbb53d2d71eef28963e1953b410922f17004dce531eb0c8d359be6c0b82d10709c644f4c24ce1229b55ace808a2de332fcd47f318b32f9bfce11c3a32fafd66579a5dd7717f3a0a1425118c8e5569594f360393f7c9ce1125eb34630f25570752d1301862d2ad3a95757c5aaf3b2d04c2ce9b550d1a4e1b14fe55756d133c08e68acf0318baf6649447deead46a494e69c002168fe4e0972f31d9b1e9844dc18c2ae1157d17b6c8c4259a8de2e1c8f6a46075c7dad9cec3fff793548de6dc6f1c27ac4b1364d94b154e8d0462d01e5397b4c36236e8ba9699763b044821d2c41dc60fb00e63a2531524a3cb5faf552f1be2da02e54e16996ba0e81b4d494a0efcae7c736ed56bb736c31b1a7148fdabd1e6c975e9ae04b977ed8adf8ada6d6a545fb174693b251ae86614239d0633411c6d92d0599dcbd3fb214a8605601e70dfee82e73725cffd1027d8b3aa8fb9679d036d4cd10967584e636e9aaa967aeb1fa998a3f667d50cfc9f93706a4d92363b73eabc79cee2eee5ed6bec72a5ff8a0d40ea0f68a96c84601a5c3dd82093c3bdcbe673a24425731970d9c882f2a4f97c1db5b278a88653f73a29490501b1501b1e38c8c5f687a4d38a280366da8624543d2f8c8835ae3dcc1666d605072e1184eb27d705920b5ced5a6ad675e41e472daed976aaaef092888ee3fc7fa59a816af553411916878a435761c64405cf776fedf8c33e05d192394357ab0f66fc1f5d1f86459722bd19b400ae2ca2663dc99cbfc45cf0acb8102eef8281ebd965c14f57f73b66ece5f9692bd7b3a7ced17ed4181ce8a91dca3b8549558db63c62071798eb092132f121f369db9f1151a476a63b99b38ceb8c9bbb8254e95671690b82d5135ce87eddf4120cfa20ac306f346a659803c803349d4ac575e4b5e0477055e02c2fa006233a879f578f3780a50924c587bfef69982c14c82f9be1782388c20d4cc1c3c6353b4f5e3300e1d7faa812964a5422fc1ee1ba04099ab2242358e54215ce4691443ebaddc81ce2527626c62e4287711b30bfeb609020867755bc7512c37dcd756bff193bd37902dbab64cd2b55adca477e8530df24f0207dcfa06a24abb280a9077f3751fccceedbb7b5a8dd7ca7d46e97bb0004b0829082ee68f520bb48f710062aaf262d01b0050344a028c7b3de8a5044613e98a97f2c5762b45d9ffa4551a8a02484630b466e1be0d03c8737898c8d09be11a15ce622370e36078d7340ab19906feb8e03ec9bd88165ad5842905e0b05da03d21f8e0dadcd8b79018661da5fb702580bcbc03450e769c545217d82700ec785c9984e627700da81e74b01cad785ee08d79378025b089cfcc6e5075afa45c7d5796296bb4e8cceb9fed0a0b36fc56eaa3617bceb50c05774a68b559a17484e1c1e3324b6f310ed0e7792f1f811cb1b89faf7666f2192b35b6017d18e5f8c6de260a6315c31db6930a8a8d04410491578a2aeb05874638688e2ee316b040ff023f25779cd0b2495aa534a60eef55b2c36c28bb64160de13a9cf1037b5b6548c98ca2e317c963fd62cacd735d9ef8df56491561bf2d458c17fe11c685dfeed0446142d46b19193abeedf5121ebe8c77db1997a55f9d1de3f52c0b5770200eecedba410660c96e1d8dcdf726abc485d412124b408341b89d358f7f9ba172c2ab758ba1e88e9544ba2a4792682b7e36651f3021a9192062e6637f728dffa804904b21c43cc1736e9fef2d87ae6a580c7adb111f1fd844af69497adf923faf2efef3a3a81ac67672020480b3a3050d5192ae2555a7e0f071e03af3cd11376d40cc1fb5f4760657b1e095d5f7c2aba498fb84486c467d7b0f173b842ef69deadf98cbac1b45bc279ce5177038f1497f755425c9552032de922ea03d1209844002f3c5135faab5b337f9a38e824b4c43ea3298442c6ee42f9abc1181fef7ef5201e66cdc791068307e3907e3f943f77053fe6dd0200ce06e7f167e1ba320b10740672938d127368edc33c1df2b4a1f657af3024ce8f0fac8e0dd15d0ba336f7a313be45050c91a03adb19b2d27fb6b804e4c1600aac178892928d8066ef5214d86d34816e7ee40716cbd80b0282a56a6d18ca8ff001a18cede803fbec874fd399ff31ca9407e2b97ad085149c0dc938b3a96bf28e9b4e757fc264a99bda74b8024f7eb86a13a8718d60697cd2d82044e0e8e558f92f0eecb8d01207b382fc32b60910537103b40eb21552e2fb8c442b9c72b7af969ac9f803eb1eb3b3e061af1d133a709b82622bd20016a986d24233fb22517b1283782fa861bdb6e79b67bf779bfcaad66d4165c18a4f45943cd0e715962c3067aacaf9336fde573c62c1a02a740f6e3f600242090e759498a2f64ac3d940392a25f3fd45c18802dc86fd31132396de823f6c775ae1f1d37c9cebe3cffe9346541a3f0b4ac3ece8f914fd242dc74113abd9b7a463ea75877470da2a841a879436d4c7ce7f1b614c70b769046b6f3a03d4f3ae59af3f33f4bf5e5294cfd74854a33945bc9f83493299eead4ec9a3e733ab5009287d94a569571257cf8c96e40742b63af8f1c4ad2653c2c30d58c914272c538a400bec2e6800274ae8bdfd3ac99ec42484b6c940698317a22b4c6f53828f52ba4683e6123c2a3dc308a47bd78988e2aeca58c869cf066ab3d6e313d1750395863b8666c34859ddb5af4af088a6d933933e1fe9d8ae7b2763cadf9ae97d61d9980c286513108aada62cf60ef91e858254ba024bf4b2a383e15616fc31335fef5a716af3bd328473449a4f13aa10ace734c1bcafd763acbcaedfff44588d08b9db3182a328c020b37233c64d938a1c4ce2d9378f12d7289a2463d0531318fab336f020ded438ab36cd5aa651a00e36c7d3f940a5ce194b4c11a721ec4acfb2efc8558e9ee3756f2ff896544b7745df59e0844fe4f2c3b5b613c954c72d383d96e5b2d82f3d88fe10b00b7d5f16b4a55d8a4b1250301d52e18da67c604b86354937f759fd2b6a05fef98f6a4b948298e2bf50683f63c7322ea30e74eebb0ab3231eb2aa2bc25b276e69e7866be7acb431667261842f175dafe0c9d6248375158072f5e3cef40494830cb17dd0f11b2ed0d85ca39161669f8fb1eb53e2ca16de1228037c274e71945050a815c7ad748209719bae9fb42f084507f8107efa68bde123ecdf25ad2555feab0ebc8657c0e78a629786ad9bdfe10d0c561a1d6082391e533891a0cd78bceb9335ff1398358fe3db17e642d3722ad4dd3eb6a578862085b216a9b6d49758616d396774a5ccfe2b7ec46665ef8f4a4d6e91e40d233e3f2d5f5cbd36d18349de70779f6f6503d8bf9660bd3ed5168192940c6fb7ecc52138672d3221d728eb445ee0e743e4e1729c3a2caa5d61d542eb26b33dffb1e25fbd8eae255023ba21590a0158c53957d45cf66a6c541e30a928d7ea36a996f2ea28d320b356729ff71d25d7fa9127f32141a563f3d25c8dd82333dc247b317cd63689d3e9c8f3f263c086aa109cf2549da5fce5f764fe4cc3a317d6b1b8ab1728deac79f42a677db783bf85cb91305e5c91abc35f16f79df124d7d7f114018d2ddbe2ed8553593bbf994d59cecb925daf1af6ff2ad5c438cab4d8175102397eefcf36b284943f111b8118880d4878827d7fac58f649c1485d4295a587b0f1eb660487eea4e855f26ed0b46c6da2fc54c529db8890b6c3c6ff4f031f8a755f6e1c18021b060b038420d1ced13d6412294058467f0f9853bbb64a29a3044d50c5d79c977a6d2de02762a502f13a79483d6a94269f1e64c24c4f62d7b44320522445287446241cf06804a049bc9988cbd6354fa7e6816bb27835d5a8db17069dc2d81797c30e9d5d28d2c64068ffa9d143c7bff72628c9deaa120f067e4cd1b37b69e0358059cdfb1e9569caae9e5080b652449785d12ab764c2974df8d960622aa2898c79050c8ce82ad566aa4840cac775cf939e101f850812790a029e98c1defbcc9e07852e7d2f6ca469f6f607c6432c733a92c08705027caee5c5f6c353d8ff4ce547f1b1e763535b87bcf23290fa69d4a26d5a75966210bf79a7b960bfd15e32ecb650c4c4d7aba4ae424fb64003f4b0b91f4d2dfa8d372982ea83ed1db41d69112edf4bcc57a446b0d8689ae62b1e320e704be5c460a9ff6da5ad143ab1f5d43f7e8cb8943a9338d772ebf0049ee34a4c4b6938f6b0645ddebbe5c622e763a57c8fdb5296b1d50dcd35fdc39b4a84994fbf01a8f898d86b5852fd798b754903729e9bba540534f57a3e57da5098fd57eb0f132c01c3547285d9b03f4afe6c9b942b089675d2b9e9d1283872e914d5f5e30ff18ad42f785cbef2cac8c63250a63359d0fd8a20ca1d6825dd4e60095323b18f0afa1bfe912e216641f7927e3c7e0fe26a74d5e4545ebceed8b6bc4bbcc7946a169693e75b458ec96e828555e75119af82f44cc6ed21a8edda9bacb7611559bed2da7d6906d6d4fc82a4de0bf16b11471bebeec5bbdab275e859da56dcc586c1059b638911c4790cb49fb87ceedb42f8679e41cd4e11569961dc025192340ae1830ad865f9d18fbb20e03b5c190d38a0ed7fe58ac8878b5180eb3c2aa6ecc2f6398b130d6672d0250689055829a773cdec34aec00e447ebee30c9b343599bfeb537443b9314a98ff7da0fa7b345a834f9d70d8920e487afa6159b1a0995c583484faf0f91e24e509bf56d570cf82f88558cbb1629fd60d36af7088237cab8cc12f67ab999a7b8e7f6b1b79baacc44f822b081d52bfd27685c5b004c71fdfef3f5b92d96e15ca11be17e35ecd65b79975ef47bff9ed6a82d5cd47ac090397b7300b53d01582d04a6c7efd7910ab101e39c0bb7b70e31d64743d72797298587ca32cdba775add3f03fb2712a4b2f1471f1069bac786c41ff8e873bd66c045c47e410bb17540fecfdca014e731aaed6f84286b7862f5b33f0253df90e525f8020b4d10c264dc651ec4fe9d452f39a0a0f9626adde06ba5009b7ee11108e5d65a7f35dc49681ac21fc0ccc1bc538ddd0e630f8a3d027a96cb49097cc67762bb46d99f756068778af241e6928b5ff8b882649bac03a2ccbb0073568b58b28067662fa9abdfcd15913749c39f8d4d5d3a652069b4bff5210d105008edf2d562a2a5e4ae948660417da0880d8a95035a410a6df8aeab5443f4792cadc04ceb7c0cfedfcd16fc273f6a9c7a9866d17e16c970fb9326de25af5989646cb2752359b5cc004bf51df3fbc1c6fd5ccad41d3e5f7d12911b44f6bca8cc45c03331956c3b8ff2a1b0f54e884965d6431e3495048e019fe50a0cad2f22ff7bb27c009a65e15ce8646870d5f6fead701dae7b69db14f2d6bdd2efc0e93eefe8e0cdd3d0b7c7ca3d68ce98ecb2feb30302b6df35f6e3f0144025c6e8f627d423186b2008fe9d248686828cd532b8d363ac94b4da8b9005c96a649dde671d833131292f7a2c23ed0b3101b14abe26237bb9c34d444028450d9c8e862a40d2cb10fb5e1a7ae04478c28a8ae62a0d2f490629f7b35417a5bf703ed47928ec0781a19c15dc8de93819f4df01d6cfc8f3bb4a1eb6f8e9ed547b07b7d82b6ee06461620d2bcb452b560c1f3538e78e51279ddeeffea03223e362b62c17dc9aefc6eae32a98224aeb8257f68f24ab0eec9eeab4bfbf5e574bc5d38312bce4e74353178f89d17b249cfbafd88ca9197beb3f05af4da8d40b4f327015b1ca2d1c66c7bc089ed6166ce7d5c56097c22c09a409c00ef8d7c82bf0c73791ffece88e859c9ec505f218b4327ba8351bf23ec91c6774fd3c3c7623c5dafb7732467de728b56e97772e8aa37c2955acef1b67c175e3149ee9547705eb1e1bb97119e6c8b566ddc2c8969fe67df31058e487d7f75f707d44a327db5f11688bbc2db7d61710e62b45dda5ddffbe10e935c2c1af297139e8c18a86a24f85c5593790763358566a26f197eadfc3843ee3c09019a89527d704370058489f3018613221b718f5fe6555b5fdede5b66173852e2d0f60836f9e73f41f8237d8ddec73711195d7f88c4a79c4a98973aa187b7f61c8753e594f568ece6fc8c334ecb0a4805345bcb18f2fde6b119fe58417840a46c69901d8cadd78c6e0feda0f0a6cf6f7f527a0aada0eff8436605adb788e7bc9365878f43dd7c3288dbc0da4919f4c99448202ea9334a6fad9a5c4fdeb3a59a57dbc7f831474ccf15aa2e9a7bc7c45f33eaa94a150b30259678ab74941007e9965840970c65f737897b62058a09edaeb8fdf738d7b948d184c84eb65293ffe7aeeee39367448935dba04e3188f63553aa9dc1d9c7914c4bb0c2f5fafab54314779dfa692563a6839b9dfacdbe24d10c5d078b33a53c18d2720cacf98e5a6acf2a762e4102566e7aab7570719b01927902e8ba022ce16d3da4ddae4aa69cc9c70dbfeccf9a3625d79cccdb6133f7193db26a769ebd875af665b3e884894391bf96bd9f3a49c71a1c7709e491eb017b4fcb57a59412a9ae90fc456126054dd997ea4b4f9e9dcdd2eb73549f83988dfe9ab4b7f76d4c99a3b06e1fb5c0cfe1266a011458e92fcdea99b1e2528f9c60acf049b5443ba268c589ce1d9f597375d83e3394ec4a9fadb29664e01d98a02496b2a1e901d3bb0cfd036ff9a034af2d73002b85dc6b508acff811802abf3f4eec363aba81f5426e2efa341b8b2462cfe1ff429017cc4dde799f0950c316073a51773b712019e53acba1d7324f7e7d307951cc23a6f715b6b5bd43f537eafd045ca82e825d70a2ebf377b390955d75e2a210e8a5cf5889d180f674d5a0986417db3b2d4de7fa61a8c288be580cacceadf4a3da9d9836a4bdfc179507cefe120891f51fdd3cd14001d1c01d9412ac03bc7a2f206f18d56de3e23e2a507caac98ad40bb7398277d8f837711f0421442585f5c569fbe36e1a4f2dbd89763cbaa0527870d04835e87a0a4da1e4596e57785b38eafdb51651f869644ca7baecf5d8509b5b223fe1f39cee66749336bc2abc112a38d7a851ca98ad2030c362cfe1f9b97a4a1e186e4d16df3d75cca697a0243992bebd12d5073efcf2c03da09601cf3c67faeae670e83e84655262cb28e2966fa128633662d9113e5d4deb1677a22ae699daedc5a30924e0fa45f808084abe79b935cd0a84778c45d56e6ee7681bde4d73d97f21f49be598d7957a114181a506f66d5ce05c94fdbcb9d6a45b0b16ed14c02217aa949eea4fa38dbaef2632d4c810566bb0e0815c3e86f7350a4e26b14fb74f3986a48a4f95108e43ff5307f81ca3d7b453e98f937ba55d11fdbe18d7ba951de482b57dc54cc32e9246ad2433255c67b0fc022887346ac540361550f0239b2a1265d1567d5eca905b5ddee5f9f6f18ef745a63214fd7b536b1610d8df403ac811d0ae77bdc06873e07ff6f710147ce4dec1efb5957d7b8637a791451a7660470deceb2f2c5581f59111f7cfeb8ca2551632d8820df9077d223104ed4fce73678b87247bdbc856f90af563b9d4caacca40ab8702893987df5a5880271005a558f36981786491a1bdc9502ce78ac9a0816a58faad46dd4a5c3a3a16907521d0cb40dcc1d5f3a24b0fe08714ffd58c863b1e5f056826b0038122f82735826c8a1dfa00def57f2901954224d8a0d5865659324b45a110a685155768d56dc146448dedf1eb21cbe19e7856e81091ca6bbe4fabd94d4b87ee2a5b853393b76e9417dc336d5d039b3055bf88eeaf69363e5d4b9c599f92f3c1329ab23463976d399b4176929a6a21bc7dbfbf1d302c4ce3a733a9dbbbbb3da58f5e9473a8045b76807694de10af1549cf2ee03cc71a6474372f4d9078fdb4f78d06566fee93e766b2371248cecffdbc641003103314259381d354afface6ec1672fa68005f66c1313921c4fa59330d638da1c8485d3dd36d653614d57f64e23686c914a64ef7c31329c5313726ca15cde7bd971fc11c3f52e376cd471fd152bad1c5aa90dc43d0ef311ceb2ff3f3d883ccda20964a7fe258a542894e47d6949942e59cec7b4583a41fa60e948ced430edd5b4bc8bbc71bf8f083c26bf01ce48ae21ccf31348becca62318c1220b3bfca87e826f27d8bec5dec78c7664dc4ace28da35b4e2243e5c44fe6a3501f364294d34c8eee0d8fc1c9c4334a8429f7d5a31cc2e2807013abe74a0c31a23f6a9f0cd7611742aeca6c557ae95de138108d3c08c1dc9099641a57e69502c8557658d756ffaf9f4ba83ebdf9eb96f3dd6d3d50e47cc083f15c037b524c2f2433dc24e2903701beb4974e9f3debdd61f0d47f4f1277bf36594c0439057ce1c58adfe050e1066bf2f37c78be625f69d42d37ceee43c4a1133fd4c61bdbcb0b2a4db6b7699ecfb34192a6ca66159470d48662e604771b6e032daadd455fd4d4192a48400648d51e7736bcc49815f9af510651b383ec1025f5b6c213f0366fd03113965d93cbb1bf191112b2a7389ef0acf26541fc03a0b6d9bbc5503ebc3c4f0a3837617da10ef041bcb6d87ca38ab7ebd8d4b896efbcf2c2ba041350ea86cced86ad789dee467799a76ec55e33297c6e1a0834206e19cf6138c875934cc605f3b6096d6545eb2232d3012c55169bb4d8e29d6c52684dce4708ef940c4ef06efe7cfc32096e9d5cc701a1216cfee7260a36cc79e19d98515f75d724cb7135f65e91fbb3931c411cf48aa045475605e912efd58360eadc1db2da3c3c00952834a7565692168cda92eb8bb81a6792cb21eacfea92b12c455ef26f469b2db40977fba4b393f34be2a2ccaeb600184ed0ff6fd4ef7267a7b00e740ccd13e8b6e115d159c206bb6a19f858e7bb60305a3cb746d7fa1f132fcfaa77e0c478f6aef7d7d6a9852f1b5f22899a088080053867ea7a15d5ba1b9fcd23c1c1713aaf6f67c702c4d687d90a206445b8c651524ca11f8d02642ff28af4170a761663be729b385be90bcb922fdba8e48308bb657087b385ac9c3d39377cd61bd2da9d53fa3022453d38acb40167841627f3799752b085f378ce9722602e22a376c67ac2e8c71f97a645ccfc09f47b03a073601a55aa67b0f72e912a4113155d61c52a671812e4edc672789255a933c9406ea1bf7cd049e1ed619900ac9f5bb4bbe199344f30abb3d8593c6db1c938dc098071ced779aa4c6ba16606cad24a48d31bdcc9839ef1dbf8f166862fd02d1564c2809ec14e90d38f4980ab8edd6fdcf66c40c06cde20169f27e1de004388c20b6854a446a9f16d75726cd8fd80bf58951d97e604c79c33b8f7c0f8cd64248c192852222e7063458216d2bd2930ccb431fff95abb261f1c7029e2a433f86b73aadae0bfe78c689e4dcd1649984f3e40d2e1256206c77c6ca2cc284ae06acc3e4917aab57740718132ee6396b20b5e954a04a4f30c75ab344ea303ef9ea4444ef3c47d092859eff206c92e5795c1ab604f6ef8aa3a09ddba2d0f3f07b5c08fc391cbb9e7e892f239bcfdf56a1be00a87c8bd9312f56edab592b1165ebf6922d7dfc0f4d8b3f9d95c489f3a7fa64c029f9b79472b396892088a22d10177a8956a3540fcd039288462bcdd0ee45d8ec9b3ed5d83eec0442c691671eef3dc684550c7a0a82c55b419defa26e750c8324a31fbf8a9ba030581437b4de63e88d50f92e5471e2745c0a5c0ae3efd618e3d52075c8bfe0c96a990a283a7032a342e767e5d350d5355520ea2e80651c9259db0eb769eae95d2f925e50096ab26408d38b2f0f96d49ff756f9c1419627d1d8299c2aaa46aa1372c2093adffbb2b93e13d4b4ad5c9ffc6c9f03d4b00d2f5891db6e78979df4b2fb2a0a840514fd75abdba9e7fe9c52e6dba7e153ce3f75bfa88cbbd280803f15fc854652b9924ee557c2a8ab1b835c4081de7bb5bf14af3545167a07f45b692504d893e090b96cfa27115afe9525195091e00641b457d43a7d48fec9709880d0ce2e03ef84aa7a3e65fe2776e62dfa1d349896349facb0ecaaa621c851445b9c7c8dbcefbdb4297532b79fa1403c1806aff6938ea1f3e56da35cdbf943dbe1fd6d6d67917dcc2b63e916451138bb513d8b32b6d05eccbd72f9e0fe275d07587b41599ad5f52bff8a973b9ff80842ae6c3f4256154fb054c2bd7c4acc96b3426bf3baee86e74ac1e43d79175eafd3f43c64a0cdb30c38cc1f61118392cd1541a1f6f14df8cab131a4b5fbaaff6a3735e85a1b40f401d85583446b4f45dd2010b0550fe3ffb6f5cabaa807245896d435f4b52a8632ffc462ad15f1c7013ada3b842ba8529c73e44e60117daee86ad559cf8d4d3a03f8afed324c0e3fc7b8eec624f199a40f20793fb8dba002974f9c97cf6c82aa84d83029ddb922659425ffa473107d060a26437e89857b3580cbc1518804a7567c58617568029641220c5b5f548924f2f4f44be186df124b81ee8b2e8f4d7d1649d584f4b5c9415d51bb1f78b8b2dd9558bf68b26c062204e223768ddbc0252a5d3e5462a36ff2d31086c532a2566e7da794159ad1f2a9f004d3bf3e112b130bf9b4f0a4f362e117da876fa75db2d136c68c59933f7147cc8feb075f405cb98364d8eed823b398faa3693ee1512db6fe080dbe7c4b49c160a48acf2d0c122b7b3410f47308d237b2559cfcfa8de926fa87307d94f0f7f2d69d48513a6fdd41109b12327cb055b522d310a678ac9db66d6f12079a15925018e8f80de39c85bc4195d0f6fbfc36f9b3981b3aeb97743ecc6dfbe0077efcbd7035dcc4007b4f6db7d697cf5e66bd73a78e242d8b9cd7ccbb11d225311d35e705d49ef103074032b2684f19788be159bf3fc02292bd09e2b999d5231e9f650fb7b354fd5c2c36875fc5e68412e45817d47a76db916d9a126f85726246de2204e84d44616756c574ed917a4620dd4ae8511e0840343094d6112357d31eed37a8358dd1847d25e40b585f01a2f861b8801565ab95f5307a907de59be7c2b61538468886cd017a53035c657b5fe931c67223ab818caa2ca10a8bcb9928f86088a51b9ff35538436a699a1a510182c4a69883a3460535c3007f39b2dba6db6dd3b8c4e686caca7eb264d3e2a615c2c2ee3db426601f003bf3693624030dee6fb8a29387a188a4fa0e263485dde6b5a9b11607b204c3b365cdd4a7224f639a804eb7dd349b0172aef4e1e7affffb645c46a570624fdb421a75e96f5ded5ffa760bf4f4f5a0d132463be68ee3935693ed81b62c10ff994d3f4e5346539b2b98c444355dbec667643785229562fbf026f070b93a6aa90a3300db9a068b64b980f7d1b104f3df37e4d12348b096bc8ce0534bceaa541ca9d1f5bed02af3c82543dd805264b9f565aabb7bc18e687162efb1ba2613ac12ab8cb543484726bafd94f51997c430fe057f156de7c3c431498c97af883c72231876ed8c0bc110564b9fd3a1b2e3425e127e18615c3e7a3eb0f928c11e30e76848c67b3463291617c5430f0fdde0a8974afb30c893ef3e8e70ce1083a0c6f8222581db5a5281f049c51a9b5a2ec32ec8611d75f21d802089de110cf5e4b6a3a2abba3f1972616103946f1caaa7eeb12be7451b0731117c5d0cbe50d9c2ac460a9cb887f6ff5807fab159f1d1f71b658ef86f5c15fdb77a37855928bc3028c70584d2cdcb2b9ff50cb1e2d3efee27f51b19c907a88eb2c9e0f55eeddf370e6c3d08bbad8b154d34e27313f5dd71d2579189fa319a9eb97c1e734ce59544863ed3a1e51971951f878fc6d7169f297e8c837009d15fd415d86ca0a2e1327f8ac7a033a6d9dbefde50c1100705e79b5456f91f741bad7c0ed9a077a7132e2369843c9cc11a415e5ee3dc7cff4b6a5edd4ac836d84298e32959a2a14c0149bc7ff57b713f135baedc4fc5baf5d58429ac19f332bd17a1bda655ba17b00e826e3cb500ab78edad5e58b3fd61766b8b2e5f6f2521ddab8a706b3fc331ae5b5161cc735fb78cd44d72c2e9c58b901d0732067eaf19d665259135b5193ccb36657ad44d411710163460f5d1970d6bb2c3627c71adaf61ee8325396d404e1a4b54aa4c23f169ed8a079a6bc68ca222c48919907afb9a319c52f1cf7eace209fdba5b67256b41cc4acd32f9deb5977f16085d6126e24e23e2101e412d1753036a51880c77fc9b620a8526ace97f49517197a8cd9cd13757140293aa754f14f88a5e914eb0f7b9a14c2dd540e63d4e085df351b9a15b1cfa35417dbca11a336461c9f6888f15a4a0f5bd44483d8c9c9cdf2cc61dfef82b74c023ccb13493746206edaaa652c622ce49b4daf3e0986be2c91db9432ecfc1fe2c0ca1e09561c187ac965d53d30f63c5c2a25bbce5b6af59eb4cef04917c2fb07068e67a6a66e03705fd5c55e97d73919125127621a0b330b50446659fac4d4d7607a6e42602f60dee5a0187836e035470d94c48bdd9f42006d0dfc6718250e9dd74c078a6641df6172ae3bd8f4c4a2e90cc25b581ece3f985b57b185deaa0aee69e30eb1640c23b1131dd5bd791d167a2a3553064e5838764e8adbffb5760dee4ea07d4dd163920d1fde7cce45de2fd5d1b58f8dee66459f635b617abab330bfd29d3c6c911e7a77e018cb312ce5f16652e1c400b4d205beee28ecf6617b8a97da738a2ca651caf1da447e72efb1b1f6e0558cf52f506e8e60130ec9d310bed9bb1400ed03d85bb80404f698fa0bbcbd43cf141b7582c4b86fbdea9397be29051965affe8724f8552fe9c74a8ee84b01c5150fe9fa1f37e6921b53f9c670d11bc59e9b9650602fe6d3a31fed30ff6d7c9bc24309cae77cbc6356f6a8e83b90b81d381d1d0e70f3b839cc7f2527e9e321ddccfd90a01a2f0ebdf246bbffc1144e02e9956b3264e50ceda96250892231e4b17cf9675e449965431e7d184208a9ffe5c2dfbbe2f059183dc4fc2acb05eee492bd041744884bf18bcd8d48190bd0a6b5d67c3c3d1c1f6fbe6806fcd51cab556eed4011771fc1c4df9bd5e1a300be23b02e278a3ab4b3436872903f52fe61042881f7dc069ae326d7737e2c0e688aec87c4d91c32ecf4e39674c9e181b167b4f57a4724f486681b9a5e42c15910d3cb31740c5f2feaaf7bdca132b9740b511da2cd754dc0006340820cb320d049c1991ebfe062d716e2f65058654f85ca84e1945587fbaf1ffc4b57759ccaac479dfcdd03b772438eb31ba63fd01be894647604634e2afa1741333b6968b1cfc2c2cafddd333b4be095aee78d24cc63dcb09c28db7119b082e2bd539b373494b8ea4484b40a1dec181de706285c711d89dc79d0af4b6eb7d9794ee2c1cee7e0d764b2ea78cd1efe231d3df14245eb1e2239308429527a102900e570271562f387727de8a14d6907f73a79ac04e4d326c8bb0aaf6b998331228c0d39f0ac018968084dc072c0cb232e206a62d401c9a0653bf8a02efa9b91acd23d580b3aae3174d56e8ebb6d48a7b89aa5b30376566acd8e241b6f4043d94dcb5d6be8262175c902f3aa6ba97ac30211ad361a0835579b478e44c6c0ec9f36c3d41bbf5e1ff528e0e735fc32a76576dbb8f34b568551fa6678b399cb195909c85676e92bed7021424ef19f383854a4d050259d763df2b98c998de741e3deeca06f52eaed1cffa4c924f450ead79124e2306baddefdc8bf46f363cd5b7e1281e6eaa34b736fdeb66d3fd26a61b4b356e6342289a5d3d623695c1ea0b858d9e1482c2e3405403a64672acc8b173f138a95c8e65ee38b96c27b4c44bf09295fa2a3572406e5d3ec92560573c25483b642620715c70a2c76b07499d8db1402f083ab64af7e3f3d5732c787655974f0a723e4cbaacdaac3aaafa181b4429169a9984adae2f0332b496ebca96a31e1bc02416e153d3803d1c418fab2ee7fced860861dee57162afa8ed0ae63091ccf2bf43e9e8c42cb51c977623f77fd17a4d0fa114f5e49c2804cc7abd26b185dc68ebe8ddcad5c9f28e66422e5dafcf5213787e446cbdd79ad5cf708cf7e7bdb871481a7f885051312c135ea3d79440ae57d13a5a72baa037b003d60830619dddf16299d4c4ceffa0edc2fb76516bfae9aa4b75addae7f6fc8f8e54b62fa767a3683c21d85bca6073fd32c0c3595e0cefba52a2542bb79bc502a0759246dc22e2099ac623f349a87346c8a19ed0acb2f3d3643f2c764dfc45edeee9b2aae351d91d2f51f4f6ac581144b434ceb9097a21cae610acf6a3ce7217f99ed0d839ed85d79c69c138f45af42d5ca1fee51031c85fe8f4c43286eb30c6eddcd02ae08a2160e99e7e8b8284ce0aca91ac039ba8fd83e0b8e895a9ebc99f896d05bbba950835523c547ae5d09e2eb846abafe44122697e22790a9ad2f3aa505cfe25b909a33ff9e1aa16699df166cd178c590f4a59caa5231f9fa84f4efbe2f4befeff5360933a69a8c8e13d96ab253f5be1aa9f1f77dc80695c9036bd1a3a7d16cc16a281f4a5e3de264cd8396619b17313a29738996fc200f660b0a49e8fda68e15331372a569a8b9da1856863352de1090d529b557db515326eb36b35283d00b6abe7b57685e8ce2e4111abdd64e80ab5ecd3e74f623ca3d2ff8fb18a6920fd61209603d0a5568956059ebc65f99d58c78bc5c80f6825967f406d915dbb0921871a4306507fd9c78e25f5bd43002863ca614ec51e5dde7617ebcaa43524158ea1b4415e8d6f177a037da01232ecb1ffd9ce182ab38375cc88b82b51e2579b465396668548775ee1b3a059ed23e7cd523071ebc02796e47d64c828497fca82edb972a97ff040ce0a452db748a45adf76ff75440a2ec2d481983dd3cfcd67b5b75b718530c3b33f5c36dca5ab8b4f9653c00a16faf62bacd0269f0dba39386f845e6eb276a6037f3bdd256691db30515b058311329b47f184a0d0c031ad3a98378003608079b96e2cd9bd0cde0bbd327dedd17149d8914bc2cb6811119fd856165e75d9f6d1c8efd37702d8ebee9ba6eb2c47c8010ee1ba607e3ccb457619ed284108abe8f98a4d1e2bc191fe6cdc55c94c60747ded0662164d71a199e4f4e1f729fd5f5c0958e174873c8c462dc4ad72a75552f71fdff504cf8d8636d7911b8873e7f55f21d9088d53a23a3b2213523fe7e0cbcf85854335ca4c35fe9365173b018248caf6ac167cc237d05ce644cc83f659895edbfcdfd378e32ea1ed296a1742a9638700252d2f4de155e3c36600c5be2511588b0f0a8cd77dc99d8606ebe1f4611a254a937d7ca4ced2aa39e01be329bf5a6837c8ec18aabfa4f7d8181c134c45086f02810fac0a13f202cbd9b34bb66b12847726579901ae97e8f9214bfcfb2c5f8f0ae778f46fae4041b4b6e69eeb8214e2b1c6442d1007bc761cf0fd2de4ea293e78879095df7385689465eba10315bfad44b3a8ce96024f9d8f96013666477aa8c2177261787ddca068e35524d86af347105551ada6b5b752fa0db1859189ced1051a3b60c037fee54f5878f4c60a3ad3170f4138f4c69088c140e74aff9d215f986008632ecbff1c1e31be07fb304003b85c055dc670129aa1b8186aedd50920ad3c093e95a93e703516b563d980f31129a5130ac76adc40360f585db86e154cc3e9ded1255d8f1547011786a08ea1894880d58daebab12eabf607dbf3f7f066b6abbd01ebb325c1e6361dc2dc9775ee9235343beaf4bf236be701f1dc282ec8e711969b6d9baa902becc2d716634d7edde2e84b412968b4cbf0696b0cb61abab342074017eca4fc26c5345fbc4510694d78d2ff3a54089f58c64479f6ab7db8d9468fe731c1c54a88b86817a62fa303cdc977a13ac623666c0a63b5780736486077dc9cbcea06fd61c49ded8c658f239abc5c6c9be6ef1e8679db579f6c62acf7b30b7c33d2bfeb30286c6636e1f477d48fae661166ed777321a95067f59e3c6a336815d7321da47ed6646aae09c2e1a37543ef6294c96948ebd15886613ef6b99afb18f59a31311778fc890f0aeb8a26c0b1446ae409f1a0ed293d7d0bcc0c3c206af0d9297145d649bf10dcdb5b02d27793ef9bdda75b5613a8f9f33e8b57636473f34f39acda899310ad713499bf317457620e164365686c6f0534645a49a0ca07f47258ab4f7078616560121c057aafcb9fffea13a2a3dd25e85c9decc517b7851d8fc1ac469c3723c964ede320a2f171b01632fe2ac6c46f3e18c6aa6f07effbca6d1028e3ad0c4ff19cf92ff6c69cd6350ffeb1e3dbc05a16fcd1b39f6c334900af59069de476e2745daabe99c16c983f47c00e6f06099f4a7a06c7d7ceaae7bd42174e6c8567afc917574b06b48086e9645d39e9a30f0d6fd8bdb956d58f44e85053833aa95553906db95b25443a8ed98a1bf2d981fae25bee41403cb7f4699d2d96dc45233e0642531f30ba53466df58201a780f683fa72e478243c09ebd1c85eb256f5109095b0e5bc58af303d1e57d1d4f7a532fdd80070b985346a80ea25bb9d859d0814b296827338579783e738ac3ad03504eeba80831cc7eed47f3a27e3cb6bf3dfd8a3c94bbd0281012caadc2b428308c9fd77ac760e2684f0a0091d9d6146834ad4cb8f9ba830e5ffcd1631f7e88d1899b17cdc01cdfc55a2a7db9c1df4b3d4b0181772d2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-surge">      <input class="hbe hbe-input-field hbe-input-field-surge" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-surge" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-surge" data-content="您好，这里需要密码，如果想查看请咨询博主。">您好，这里需要密码，如果想查看请咨询博主。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-surge" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z"></path>      </svg>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 项目相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRBD </tag>
            
            <tag> 存储 </tag>
            
            <tag> 高可用 </tag>
            
            <tag> ALUA </tag>
            
            <tag> 双活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 如何实现跨主机文件目录同步？（基于 watchdog 和 rsync）</title>
      <link href="blog/2020-07-22/monitor-files-for-changes-with-python/"/>
      <url>blog/2020-07-22/monitor-files-for-changes-with-python/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="84b3269a32f0bbf80fdba0f07ff0120f8be67a215831b9f1934e2636ffc5572c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码，如果想查看请咨询博主。</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 项目相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件同步 </tag>
            
            <tag> pyinotify </tag>
            
            <tag> watchdog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 面试记录（持续更新）</title>
      <link href="blog/2020-06-09/interview-2020/"/>
      <url>blog/2020-06-09/interview-2020/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h3 id="文件存储和块存储的区别"><a href="#文件存储和块存储的区别" class="headerlink" title="文件存储和块存储的区别"></a>文件存储和块存储的区别</h3><table><thead><tr><th>存储方式</th><th>技术实现</th><th>优势</th><th>劣势</th><th>典型代表</th></tr></thead><tbody><tr><td>块存储</td><td>裸盘上划分逻辑卷，逻辑卷格式化成任意文件系统</td><td>支持多种文件系统，传输速度快，提供硬件容错机制</td><td>无法实现网络共享</td><td>FC-SAN，iSCSI</td></tr><tr><td>文件存储</td><td>在格式化的磁盘上存储文件</td><td>提供网络共享</td><td>网络传输速度制约读写速度，分层目录结构限制可扩展性</td><td>NFS，FAT，EXT3</td></tr><tr><td>对象存储</td><td>以灵活可定制的对象为存储单元，元数据服务器提供快速并发寻址</td><td>读写速度较快的同时支持网络共享，对象灵活定义</td><td>管理软件的购买、使用和运维成本高</td><td>Swift</td></tr></tbody></table><h4 id="存储设备不同"><a href="#存储设备不同" class="headerlink" title="存储设备不同"></a>存储设备不同</h4><ol><li><p>对象存储：对象存储的对应存储设备为 swift，<strong>键值</strong>存储，CEPH 的 RADOS。</p></li><li><p>文件存储：文件存储的对应存储设备为 FTP，NAS，NFS 服务器，Ceph 的 CephFS。</p></li><li><p>块存储：块存储的对应存储设备为 Cinder，硬盘，IPSAN、FCSAN、CEPH 的 RBD。</p></li></ol><h4 id="特点不同"><a href="#特点不同" class="headerlink" title="特点不同"></a>特点不同</h4><ol><li><p>对象存储：对象存储的特点是具备块存储的<strong>高速</strong>以及文件存储的共享等特性，只能进行全写全读，存储数据以大文件为主，要求足够的 IO 带宽。</p></li><li><p>文件存储：文件存储的特点是一个具有<strong>目录树</strong>结构的大文件夹，大家都可以获取文件。</p></li><li><p>块存储：块存储的特点是不能直接被操作系统访问，在分区、创建逻辑卷、格式化为指定文件系统后才可以使用，与平常主机内置硬盘的方式完全无异。</p></li></ol><p>这三者的本质差别是使用数据的“用户”不同：块存储的用户是可以读写块设备的软件系统，例如传统的文件系统、数据库；文件存储的用户是自然人（电脑客户机）；对象存储的用户则是其它计算机软件。<br> 参见：<a href="https://www.zhihu.com/question/21536660">块存储、文件存储、对象存储这三者的本质差别是什么？ - 知乎</a></p><h3 id="RAID-是什么？各类型之间的区别"><a href="#RAID-是什么？各类型之间的区别" class="headerlink" title="RAID 是什么？各类型之间的区别"></a>RAID 是什么？各类型之间的区别</h3><p> 参见：<a href="https://wiki.masantu.com/diff-raid/">RAID 是什么？各类型之间的区别？ | 别院牧志</a></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="可变-不可变、引用类型-传值类型、深拷贝-浅拷贝"><a href="#可变-不可变、引用类型-传值类型、深拷贝-浅拷贝" class="headerlink" title="可变/不可变、引用类型/传值类型、深拷贝/浅拷贝"></a>可变/不可变、引用类型/传值类型、深拷贝/浅拷贝</h3><p>dict、list、set 是可变类型</p><h2 id="中国电信云"><a href="#中国电信云" class="headerlink" title="中国电信云"></a>中国电信云</h2><ol><li>TCP 的 socket 粘包问题<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">bytes_len = struct.pack(<span class="string">&#x27;i&#x27;</span>,<span class="built_in">len</span>(send_msg))</span><br></pre></td></tr></table></figure><a href="https://www.hchstudio.cn/article/2018/d5b3/">Socket 中粘包问题浅析及其解决方案 - 代码星冰乐</a><br><a href="https://www.cnblogs.com/liuslayer/p/5441870.html">Socket 粘包问题 - liuslayer - 博客园</a><br><a href="https://www.cnblogs.com/staff/p/9643682.html">socket 粘包问题解决 - 要一直走下去 - 博客园</a><br><a href="https://www.zhihu.com/question/49144553">对于 Socket 粘包的困惑? - 知乎</a><br><a href="https://www.cnblogs.com/QG-whz/p/5537447.html">Socket 编程（4）TCP 粘包问题及解决方案 - melonstreet - 博客园</a><br><a href="https://www.cnblogs.com/konghui/p/9804914.html#top">python–(socket 与粘包解决方案) - 孔辉 - 博客园</a><br><a href="https://zhuanlan.zhihu.com/p/99736833">Python 中的粘包、socket 初识 - 知乎</a><br><a href="https://www.zhihu.com/question/20210025">怎么解决 TCP 网络传输「粘包」问题？ - 知乎</a></li><li>后端数据校验怎么做的？<br>一般就是用装饰器或者 assert，网上查到一个<a href="http://json-schema.org/">JSON Schema | The home of JSON Schema</a>和 Flask 专用的扩展<a href="https://github.com/sanjeevan/flask-json-schema">sanjeevan/flask-json-schema: Flask extension to validate JSON requests using the jsonschema spec</a></li><li><p>MySQL 事务语法</p></li><li><p>磁盘点灯对盘位使用什么工具？<br><code>smartctl</code>与<code>sas2ircu</code></p></li></ol><ul><li><a href="http://llxwj.top/post/storage/linux_disk_slot/">linux 磁盘与磁盘槽位的对应关系</a></li><li><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000041337/75f2d44b">如何通过硬盘盘符查询硬盘槽位 - 华为服务器 维护宝典 14 - 华为</a></li></ul><ol start="5"><li>RESTful 的缺点是什么？<ol><li>不是所有的东西都是“资源”，尤其是在业务系统中；</li><li>状态码，有的时候你需要“不存在的”一个状态码来描述你的操作；<br>一个适用于简单操作的接口规范而已，无规矩不成方圆，复杂操作并不适用，还是看业务发展需求的。</li></ol></li></ol><ul><li><a href="https://www.cnblogs.com/binlin1987/p/6971808.html">Restful 的理解，Restful 优缺点 - Alan 大 bug - 博客园</a></li><li><a href="https://www.infoq.cn/article/2013/06/rest-drawbacks">REST 的缺点是什么？-InfoQ</a></li></ul><ol start="6"><li>gRPC 与 RESTful 有什么区别？</li></ol><ul><li>优点<ol><li>protobuf 二进制消息，性能好/效率高（空间和时间效率都很不错）</li><li>proto 文件生成目标代码，简单易用</li><li>序列化反序列化直接对应程序中的数据类，不需要解析后在进行映射(XML,JSON 都是这种方式)</li><li>支持向前兼容（新加字段采用默认值）和向后兼容（忽略新加字段），简化升级</li><li>支持多种语言（可以把 proto 文件看做 IDL 文件）</li></ol></li><li>缺点<ol><li>gRPC 尚未提供连接池，需要自行实现</li><li>尚未提供“服务发现”、“负载均衡”机制</li><li>因为基于 HTTP2，绝大部多数 HTTP Server、Nginx 都尚不支持，即 Nginx 不能将 GRPC 请求作为 HTTP 请求来负载均衡，而是作为普通的 TCP 请求。（nginx1.9 版本已支持）</li><li>Protobuf 二进制可读性差（貌似提供了 Text_Fromat 功能）</li><li>默认不具备动态特性（可以通过动态定义生成消息类型或者动态编译支持）</li></ol></li></ul><h2 id="unitedStack-同方有云"><a href="#unitedStack-同方有云" class="headerlink" title="unitedStack(同方有云)"></a>unitedStack(同方有云)</h2><ol><li>跳出循环的方式</li></ol><ul><li>break</li><li>return</li><li>raise Exception</li></ul><ol start="2"><li>代码调试</li></ol><ul><li>print</li><li>log</li><li>pdb</li><li>pycharm debug<br><a href="https://blog.csdn.net/xiemanR/article/details/72775737">Python 调试代码的 4 种方法：print、log、pdb、PyCharm 的 debug_xiemanR 的专栏-CSDN 博客</a></li></ul><ol start="3"><li>索引优缺点</li></ol><ul><li>优点<br>索引可以减少服务器需要扫描的数据量，从而大大提高查询效率。<br>唯一索引能保证表中数据的唯一性。<br>利用索引对数据存储的特性，可以使查询语句避免排序和创建临时表。<br>索引可以将随机 I/O 变为顺序 I/O。</li><li>缺点<br>索引的创建和维护会造成工作量的增加。<br>索引会造成数据量的增加，除了数据表中数据占数据空间之外，每一个索引还要占一定的物理空间。<br>不恰当的使用索引会造成服务器重复扫描数据，造成查询浪费。</li></ul><ol start="4"><li>class 实现上下文管理器<br>实现<code>__enter__</code>和<code>__exit__</code>方法</li><li>js 异步编程返回的对象类型<br>Promise 对象</li><li>什么是 RESTful？哪些操作是幂等的？<br>HTTP 幂等方法是指无论调用多少次都不会有不同结果的 HTTP 方法。它无论是调用一次，还是十次都无关紧要。结果仍应相同。再次强调，它只作用于结果而非资源本身。它仍可能被操纵（如一个更新的 timestamp），提供这一信息并不影响（当前）资源的表现形式。<table><tbody><tr><th>HTTP Method</th><th>Idempotent</th><th>Safe</th></tr>    <tr><td>OPTIONS    </td><td>yes       </td><td>yes</td></tr>    <tr><td>GET        </td><td>yes       </td><td>yes</td></tr>    <tr><td>HEAD       </td><td>yes       </td><td>yes</td></tr>    <tr><td>PUT        </td><td>yes       </td><td>no </td></tr>    <tr><td>POST       </td><td>no        </td><td>no </td></tr>    <tr><td>DELETE     </td><td>yes       </td><td>no </td></tr>    <tr><td>PATCH      </td><td>no        </td><td>no </td></tr></tbody></table><a href="https://sofish.github.io/restcookbook/http%20methods/idempotency/">哪些是幂等或/且安全的方法？ - RESTful 手册</a></li><li>Python 中如何动态调用类方法？<br>参阅<a href="/blog/2020-10-15/python-call-method-dynamically/">Python 中动态调用函数或类的方法 | 别院牧志</a></li><li>项目中实际使用继承和多态的例子？</li></ol><h2 id="志翔科技"><a href="#志翔科技" class="headerlink" title="志翔科技"></a>志翔科技</h2><ul><li>简述一次 web 请求的过程？<br><img src= "/img/loading.svg" data-lazy-src="https://image-static.segmentfault.com/406/600/4066004169-5987d7380cd99_articlex" alt="请求流程"><br>一次完整的 HTTP 请求过程从 TCP 三次握手建立连接成功后开始，客户端按照指定的格式开始向服务端发送 HTTP 请求。</li></ul><ol><li>服务端接收请求后，对 HTTP 请求中的参数进行解析，包括请求的 URL，请求方法，参数以及 Cookie 等参数，将其置于框架的一个内部数据结构中，便于后续的使用。</li><li>在处理完请求参数后，会在请求正式<em>进入视图函数之前做一些额外处理</em>，例如：验证 CSRF-Token，验证用户 Cookie 是否合法，请求的 IP 是否处于白名单中，如果验证信息未通过，则直接返回相应的 HTTP 状态码以及相关信息，增强网站的安全性。在所有的验证通过之后，Web 框架根据 URL 找到对应的视图函数并进行处理，在处理过程中可能会涉及数据库，Redis 以及消息队列的使用，并很可能存在异步任务的触发。</li><li>之后根据请求类型和请求 url 中的路由与视图函数映射关系获取到底请求的是哪个视图，匹配完成之后，到 view 层的具体视图中执行特定的视图函数。在视图执行过程中，需要先到 template 末班层找到特定的 html 文件，再次过程中可能会操作 model 层（数据库），然后对视图进行渲染。</li><li>在视图函数处理过程中，很有可能因为某些操作而导致异常的产生，此时 Web 应用应该判断异常产生的由来，并进行统一的<em>异常处理</em>。 不管是数据库连接异常，还是用户表单验证未通过，都应该给出一个统一的应答，这样便于前端的数据处理，也能够让用户知道到底发生了什么。</li><li>处理完业务逻辑，最后返回一个 HTTP 的响应给客户端，HTTP 的响应内容同样有标准的格式。无论是什么客户端或者是什么服务端，大家只要按照 HTTP 的协议标准来实现的话，那么它一定是通用的。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li><a href="https://smartkeyerror.com/Flask-Web">一文理解 Flask Web 开发</a></li><li><a href="https://segmentfault.com/a/1190000010537218">用户访问 web 服务器过程精解_达龙 - SegmentFault 思否</a></li></ol><h2 id="佳讯飞鸿"><a href="#佳讯飞鸿" class="headerlink" title="佳讯飞鸿"></a>佳讯飞鸿</h2><ul><li>Python2 与 Python3 区别？<br><a href="https://www.zhihu.com/question/19698598">Python 2 和 Python 3 有哪些主要区别？ - 知乎</a></li><li>谈谈你对 Pythonic 的理解？<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><a href="https://www.zhihu.com/question/21408921">怎样才能写出 Pythonic 的代码？ - 知乎</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 同时使用两种主题（博客与 wiki 页面实现统一管理）</title>
      <link href="blog/2020-05-23/hello-hexo-wiki/"/>
      <url>blog/2020-05-23/hello-hexo-wiki/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><div class="note warning modern"><p><strong>@depracate</strong></p><p>由于一些难以预料的错误(如页面锚点无法点击跳转（不确定是否确实为子系统导致）)，本人已将 wiki 和主站作为两个仓库分割。所以本内容现在只作为参考，遇到具体问题请自行搜索解决。</p></div><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>想在博客系统的基础上搭建一个 <a href="https://wiki.masantu.com/">wiki 系统</a> ，用于实现一些非原创知识体系的积累。当然可以通过创建两个 hexo 仓库分别用于渲染博客页面（主题一）和 wiki 页面（主题二）；但是每次进行知识管理的时候就要切换不同的仓库目录，而且部分文件可能产生冗余（如：npm install 产生的 node_modules），所以本文实践利用一个 hexo 仓库内渲染生成使用不同 theme 生成主页和 wiki 页面，以实现一次部署和统一管理。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p><a href="https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">使用代替配置文件-配置 | Hexo</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo --help</span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml </span><br></pre></td></tr></table></figure><br>root 目录下有两个 config 文件，默认使用<code>_config.yml</code>，用<code>hexo --config config_wiki.yml g</code>命令渲染<code>wiki</code>页面至<code>/public/wiki/</code>，同时设置点击主页面<code>wiki</code>导航栏后自动跳转到<code>public/wiki/</code>。</p><h2 id="修改步骤"><a href="#修改步骤" class="headerlink" title="修改步骤"></a>修改步骤</h2><ol><li>更改原主页面的 theme 的 config 文件，增加 navbar 类别（不同主题设置字段不同）；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Wiki: &#x2F;wiki&#x2F;</span><br></pre></td></tr></table></figure></li><li>为了避免在修改 wiki 配置时影响到主页面，将 root 目录下的<code>_config.yml</code>文件（即站点配置文件），复制并重命名为<code>_config_wiki.yml</code>，以下修改均指此文件。</li><li>安装 hexo 的<a href="https://github.com/zthxxx/hexo-theme-Wikitten">Wikitten</a>主题，将其作为 wiki 页面的 theme；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd your-hexo-directory</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zthxxx&#x2F;hexo-theme-Wikitten.git themes&#x2F;Wikitten</span><br></pre></td></tr></table></figure>此外，你也可以选用其他风格 wiki 主题，如：<a href="https://github.com/wzpan/hexo-theme-wixo">wzpan/hexo-theme-wixo: A wiki theme for Hexo.</a></li><li>将 Wikitten theme 目录下 clone 所得的 source 和模板移动到 root 目录下，重命名主题 config 使其生效。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -rf themes&#x2F;Wikitten&#x2F;_source&#x2F;* wiki&#x2F;</span><br><span class="line">cp themes&#x2F;Wikitten&#x2F;_scaffolds&#x2F;embed.md scaffolds&#x2F;embed.md</span><br><span class="line">cp themes&#x2F;Wikitten&#x2F;_scaffolds&#x2F;post.md scaffolds&#x2F;wiki.md</span><br><span class="line">cp -f themes&#x2F;Wikitten&#x2F;_config.yml.example themes&#x2F;Wikitten&#x2F;_config.yml</span><br></pre></td></tr></table></figure></li><li>修改 wikitten 主题的 config，更改资源文件目录，logo、favicon 等。</li><li>修改<code>_config_wiki.yml</code>设定使 wikitten 主题生效<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- theme: origin</span><br><span class="line">+ theme: Wikitten</span><br><span class="line"></span><br><span class="line">- per_page: 10</span><br><span class="line"></span><br><span class="line">- url: https:&#x2F;&#x2F;masantu.com&#x2F;</span><br><span class="line">- root: &#x2F;</span><br><span class="line">- permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">+ url: https:&#x2F;&#x2F;masantu.com&#x2F;wiki&#x2F;</span><br><span class="line">+ root: &#x2F;wiki&#x2F;</span><br><span class="line">+ permalink: :title&#x2F;</span><br><span class="line">+ permalink_defaults: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line"></span><br><span class="line">+ skip_render:</span><br><span class="line">+  - README.md</span><br><span class="line"></span><br><span class="line">+ marked:</span><br><span class="line">+   gfm: true</span><br><span class="line"></span><br><span class="line">+ # 设置单独的source文件夹，用于放置wiki的源文件</span><br><span class="line">- source_dir: source</span><br><span class="line">+ source_dir: wiki</span><br><span class="line"></span><br><span class="line">+ # 设置渲染到&#96;public&#x2F;wiki&#x2F;&#96;路径下</span><br><span class="line">- public_dir: public</span><br><span class="line">+ public_dir: public&#x2F;wiki</span><br><span class="line"></span><br><span class="line">+ default_layout: wiki</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2></li></ol><h3 id="创建别名（可选）"><a href="#创建别名（可选）" class="headerlink" title="创建别名（可选）"></a>创建别名（可选）</h3><p>主要目的是简化输入，如果不嫌麻烦，可以每次输入指令。</p><ul><li>Linux<br>视自己情况而定，在<code>.zshrc</code>或者<code>.bashrc</code>等文件中新增 alias<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> hwk=<span class="string">&quot;hexo --config _config_wiki.yml&quot;</span></span><br></pre></td></tr></table></figure></li><li>windows<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">doskey</span> hwk=hexo --config _config_wiki.yml</span><br></pre></td></tr></table></figure>参见：<ol><li><a href="https://www.zhihu.com/question/51962577">windows 系统如何给命令起别名？ - 知乎</a></li><li><a href="https://www.cnblogs.com/chenjo/p/12550207.html">Windows alias 给 cmd 命令起别名 - jetwill - 博客园</a></li></ol></li></ul><h3 id="新建-wiki"><a href="#新建-wiki" class="headerlink" title="新建 wiki"></a>新建 wiki</h3><p>如果跳过上步，则将下面的指令中的<code>hwk</code>替换为<code>hexo --config _config_wiki.yml</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hwk new &quot;xxxx&quot;</span><br></pre></td></tr></table></figure></p><h3 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h3><p>共用 db.json（猜测）会导致主页面 blog 内容与 wiki 内容混杂，需要在渲染前后进行 clean 操作。</p><ol><li>首先渲染主页面，生成到/public/<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li>删除 db.json 及旧的 public/wiki<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hwk clean</span><br></pre></td></tr></table></figure></li><li>渲染 wiki 页面，生成到/public/wiki/<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hwk g</span><br></pre></td></tr></table></figure></li><li><p>手动删除 db.json，<strong>MUST！</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm db.json</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/25389051/db-json-file-is-created-and-added-to-gitignore-using-hexo-io">db.json file is created and added to .gitignore using hexo.io - Stack Overflow</a><br><a href="https://johnwonder.github.io/2016/10/17/hexo-flow-second/">hexo 流程梳理之 database | john’s tech blog</a><br>以上流程写了一段 Python 代码来流程化处理，目前仅适用于 Windows 平台，Python3.7 测试通过。源码见此：✨<a href="https://github.com/imoyao/imoyao.github.io/blob/hexo/tools/hexo_wiki_site_gen_all_in_one.py">imoyao.github.io/hexo_wiki_site_gen_all_in_one.py at hexo · imoyao/imoyao.github.io</a></p></li><li><p>查看效果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2></li><li><p>Wikitten 主题会根据目录自动生成分类，所以不建议在文章的 front matter 中再去定义 categories 字段，或者定义 categories 之后直接放到首页 index 目录即可，不然可能导致分类出现重合。</p></li><li>为了以后“分家”方便（降低耦合度），建议不要和主站的图片目录放到一个文件夹中，比如我的主站图片在<code>sources/images/</code>文件夹下，则 wiki 的图片可以放到<code>sources/pics/</code>或者<code>sources/imgs/</code>目录下，这样以后如果要做拆分，直接剪切相应目录即可。当然，如果你使用 OSS 存储或图床服务，则不需要这样麻烦。</li></ol><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><ol><li>wiki 页面中文锚点无法点击！</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://konfido.github.io/2019/03/16/hexo-wiki/">Hexo 同时使用两种主题</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客个性化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> wiki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决博客 idealyard 支持 emoji 显示问题</title>
      <link href="blog/2020-05-15/idealyard-loves-emoji/"/>
      <url>blog/2020-05-15/idealyard-loves-emoji/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div class="note info modern"><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>以下演示内容基于数据库版本：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br><span class="line">mysql  Ver 15.1 Distrib 5.5.64-MariaDB, for Linux (x86_64) using readline 5.1</span><br></pre></td></tr></table></figure></li><li>utf8mb4 的最低 mysql 版本支持版本为 5.5.3+</li></ol></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道要想让数据库存储数据支持 emoji 显示必须将数据库编码格式设置为<code>utf8mb4</code>，可是我在代码中修改了数据库编码还是有问题，具体见此处 <a href="https://github.com/imoyao/idealyard/issues/6">Issues</a> ，当时列出下面的怀疑：</p><ul><li style="list-style: none"><input type="checkbox" checked></input> <del>数据库设置为<code>utf8mb4</code>编码；</del></li><li style="list-style: none"><input type="checkbox" checked></input> <del>单个表格编码未设置为<code>utf8mb4</code>；</del></li><li style="list-style: none"><input type="checkbox" checked></input> <del>由于前端使用<code>pangujs</code>导致传到后端已经出错；</del></li></ul><p>昨晚进行了排查及解决，现在记录一下。</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><ol><li>首先查看数据库编码格式<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [iyblog_product]<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> database iyblog_product;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Database       <span class="operator">|</span> <span class="keyword">Create</span> Database                                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> iyblog_product <span class="operator">|</span> <span class="keyword">CREATE</span> DATABASE `iyblog_product` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li>查看相应表的数据格式<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [iyblog_product]<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> iy_article;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*省略*/</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">15</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="operator">|</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>其实此处多余，因为代码里有如下定义：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLConfig</span>:</span></span><br><span class="line">    MYSQL_USERNAME = os.getenv(<span class="string">&#x27;MYSQL_USER&#x27;</span>)</span><br><span class="line">    MYSQL_PASSWORD = os.getenv(<span class="string">&#x27;MYSQL_PASSWORD&#x27;</span>)</span><br><span class="line">    MYSQL_HOST = <span class="string">&#x27;localhost:3306&#x27;</span></span><br><span class="line">    MYSQL_CHARSET = <span class="string">&#x27;utf8mb4&#x27;</span>  <span class="comment"># 为了支持 emoji 显示，需要设置为 utf8mb4 编码</span></span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2>之后通过搜索知道除了把数据库和表格设置为正确编码，还要修改数据库配置。</li></ol><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf.d/client.cnf </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># These two groups are read by the client library</span><br><span class="line"># Use it for options that affect all clients, but not the server</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set &#x3D; utf8mb4     # 添加此行</span><br><span class="line"># This group is not read by mysql client library,</span><br><span class="line"># If you use the same .cnf file for MySQL and MariaDB,</span><br><span class="line"># use it for MariaDB-only client options</span><br><span class="line">[client-mariadb]</span><br></pre></td></tr></table></figure><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/my.cnf.d/server.cnf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># These groups are read by MariaDB server.</span><br><span class="line"># Use it for options that only the server (but not clients) should see</span><br><span class="line">#</span><br><span class="line"># See the examples of server my.cnf files in &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># this is read by the standalone daemon and embedded servers</span><br><span class="line">[server]</span><br><span class="line"># this is only for the mysqld standalone daemon</span><br><span class="line">[mysqld]                # 此行开始</span><br><span class="line">character-set-client-handshake &#x3D; FALSE</span><br><span class="line">character-set-server &#x3D; utf8mb4  </span><br><span class="line">collation-server &#x3D; utf8mb4_unicode_ci</span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8mb4&#39;</span><br><span class="line"></span><br><span class="line"># this is only for embedded server</span><br><span class="line">[embedded]</span><br><span class="line"></span><br><span class="line"># This group is only read by MariaDB-5.5 servers.</span><br><span class="line"># If you use the same .cnf file for MariaDB of different versions,</span><br><span class="line"># use this group for options that older servers don&#39;t understand</span><br><span class="line">[mysqld-5.5]</span><br><span class="line"></span><br><span class="line"># These two groups are only read by MariaDB servers, not by MySQL.</span><br><span class="line"># If you use the same .cnf file for MySQL and MariaDB,</span><br><span class="line"># you can put MariaDB-only options here</span><br><span class="line">[mariadb]</span><br><span class="line">[mariadb-5.5]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重启-Mariadb-使配置生效"><a href="#重启-Mariadb-使配置生效" class="headerlink" title="重启 Mariadb 使配置生效"></a>重启 Mariadb 使配置生效</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart mariadb   # 如果是mysql需要起相应服务</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [iyblog_product]<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">WHERE</span> Variable_name <span class="keyword">LIKE</span> <span class="string">&#x27;character_set_%&#x27;</span> <span class="keyword">OR</span> Variable_name <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8mb4                    |</span><br><span class="line">| character_set_connection | utf8mb4                    |</span><br><span class="line">| character_set_database   | utf8mb4                    |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8mb4                    |</span><br><span class="line">| character_set_server     | utf8mb4                    |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |</span><br><span class="line">| collation_connection     | utf8mb4_general_ci         |</span><br><span class="line">| collation_database       | utf8mb4_general_ci         |</span><br><span class="line">| collation_server         | utf8mb4_unicode_ci         |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">11 rows in set (0.04 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>必须保证下面的变量编码是<code>utf8mb4</code>格式。<br><table>  <tbody>    <tr>      <th>系统变量</th>      <th>描述</th>    </tr>    <tr>      <td>character_set_client</td>      <td>(客户端来源数据使用的字符集)</td>    </tr>    <tr>      <td>character_set_connection</td>      <td>(连接层字符集)</td>    </tr>    <tr>      <td>character_set_database</td>      <td>(当前选中数据库的默认字符集)</td>    </tr>    <tr>      <td>character_set_results</td>      <td>(查询结果字符集)</td>    </tr>    <tr>      <td>character_set_server</td>      <td>(默认的内部操作字符集)</td>    </tr>  </tbody></table></p><p>实际验证一下：<br><img src= "/img/loading.svg" data-lazy-src="/images/idealyard-emoji.png" alt="emoji"></p><p>最后我们发现了一个新问题（TODO）：<br>链接的 slug 中直接把 emoji 也给显示出来了，此处需要对 emoji 进行过滤或者转换为字符单词。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jb51.net/article/144079.htm">mysql 存储 emoji 表情报错的处理方法【更改编码为 utf8mb4】<em>Mysql</em>脚本之家</a></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> IdealYard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> idealyard </tag>
            
            <tag> utf8mb4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不问色号 | 口红色号获取之烈艳蓝金系列</title>
      <link href="blog/2020-05-10/GUSCSS-lipstick-xiji-lylj/"/>
      <url>blog/2020-05-10/GUSCSS-lipstick-xiji-lylj/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在项目 <code>给你点颜色瞧瞧|GUSCSS</code> 的 <a href="https://colors.masantu.com/#/lipsticks">不问色号</a> 模块中，需要收集口红的颜色，本文以西集网烈焰蓝金系列唇膏为例，演示如何通过简单的爬虫获取图片，之后使用 OCR 技术对图片文字进行识别，同时获取图片特征颜色部分作为口红的 RGB 色值。</p><h2 id="使用-urllib-request-获取网页"><a href="#使用-urllib-request-获取网页" class="headerlink" title="使用 urllib.request 获取网页"></a>使用 urllib.request 获取网页</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">from backend import settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_html(url):</span><br><span class="line">    response &#x3D; urllib.request.urlopen(url)  # 发出请求并且接收返回文本对象</span><br><span class="line">    html &#x3D; response.read()  # 调用read()进行读取</span><br><span class="line">    return html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    url &#x3D; settings.DIOR_LYLJ_URL</span><br><span class="line">    print(get_html(url))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;urllib&#x2F;request.py&quot;, line 649, in http_error_default</span><br><span class="line">    raise HTTPError(req.full_url, code, msg, hdrs, fp)</span><br><span class="line">urllib.error.HTTPError: HTTP Error 403: Forbidden</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.svg" data-lazy-src="/images/Snipaste_2020-05-07_22-56-56.png" alt="公共厕所咩·电影《疯狂的石头》"></p><p>这么写，一般网站是不会让你看的。因为正常的用户访问会带浏览器的请求头，而我们用程序访问时没有请求头，网站知道我们是“垃圾请求”，只会白白消耗流量，所以拒绝为我们这样的请求服务。</p><h2 id="遇到-403-怎么办"><a href="#遇到-403-怎么办" class="headerlink" title="遇到 403 怎么办"></a>遇到 403 怎么办</h2><p>为了获取到数据，我们要将程序伪装成“正经人”，告诉网站：我来给你们送钱了，让我进去康康吧？<br><img src= "/img/loading.svg" data-lazy-src="/images/urllib-headers.gif" alt="headers 作用（穿上燕尾服再去参加）·电影《赌侠》"></p><p>于是，我们戴上<code>headers</code>的装扮，门口保安一看：这位没问题，进来吧。程序就顺利地进去了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen,Request</span><br><span class="line"></span><br><span class="line">DIOR_LYLJ_URL = <span class="string">&#x27;https://www.xiji.com/product-127266.html&#x27;</span></span><br><span class="line">HEADERS = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4121.0 Safari/537.36 Edg/84.0.495.2&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">url</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        爬取一次之后，保存网页到本地</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        content = Request(url, headers=HEADERS)</span><br><span class="line">        response = urlopen(content, timeout=<span class="number">10</span>)</span><br><span class="line">        html = response.read()  <span class="comment"># 调用read()进行读取</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../../_data/xiji/products.html&#x27;</span>, <span class="string">&#x27;wb+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(get_html(DIOR_LYLJ_URL))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读取到的内容与我们鼠标右键读取网页源码所获取到的数据实质是一样的。</p><h2 id="利用-lxml-使用-xPath-解析网页"><a href="#利用-lxml-使用-xPath-解析网页" class="headerlink" title="利用 lxml 使用 xPath 解析网页"></a>利用 lxml 使用 xPath 解析网页</h2><p>获取到网站源码之后，我们使用 xpath 规则对目标元素进行提取。<br><img src= "/img/loading.svg" data-lazy-src="/images/Snipaste_2020-05-10_11-40-57.png" alt="xPath 提取页面目标元素"><br>依次获取到页面中该系列链接、编号、名称，之后对图片进行提取并保存到本地。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen, Request</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LYLJ</span>:</span></span><br><span class="line">    DIOR_LYLJ_URL = <span class="string">&#x27;https://www.xiji.com/product-127266.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_item_element_tree</span>(<span class="params">item_url</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        给出网页地址，获得网页信息</span></span><br><span class="line"><span class="string">        :param item_url:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        content = Request(item_url, headers=HEADERS)</span><br><span class="line">        response = urlopen(content, timeout=<span class="number">10</span>)</span><br><span class="line">        html = response.read()  <span class="comment"># 调用read()进行读取</span></span><br><span class="line">        result = etree.HTML(html)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_content</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = self.get_item_element_tree(DIOR_LYLJ_URL)</span><br><span class="line">        links = result.xpath(<span class="string">&#x27;//*[@id=&quot;product_spec&quot;]/ul/li/span[2]/ul/li/a/@href&#x27;</span>)</span><br><span class="line">        item_ids = result.xpath(<span class="string">&#x27;//*[@id=&quot;product_spec&quot;]/ul/li/span[2]/ul/li/a/@rel&#x27;</span>)</span><br><span class="line">        names = result.xpath(<span class="string">&#x27;//*[@id=&quot;product_spec&quot;]/ul/li/span[2]/ul/li/a/span&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        dir_name = self.mk_dir()</span><br><span class="line"></span><br><span class="line">        img_src_list = []  <span class="comment"># 对当前页单独处理</span></span><br><span class="line">        img_src = self.get_image_src(result)</span><br><span class="line">        current_id = self.current_item_id()</span><br><span class="line">        self.save_image(img_src, dir_name, current_id)</span><br><span class="line">        img_src_list.append(img_src)</span><br><span class="line"></span><br><span class="line">        current_names = [name.text <span class="keyword">for</span> name <span class="keyword">in</span> names]</span><br><span class="line">        links.pop(<span class="number">0</span>)  <span class="comment"># 移除第一个script</span></span><br><span class="line">        print(<span class="string">&#x27;Start get details……&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> img_id, link <span class="keyword">in</span> <span class="built_in">zip</span>(item_ids, links):</span><br><span class="line">            real_link = self.join_link(link)</span><br><span class="line">            result = self.get_item_element_tree(real_link)</span><br><span class="line">            img_src = self.get_image_src(result)</span><br><span class="line">            self.save_image(img_src, dir_name, img_id)</span><br><span class="line">            img_src_list.append(img_src)</span><br><span class="line"></span><br><span class="line">        item_ids.insert(<span class="number">0</span>, current_id)</span><br><span class="line">        <span class="keyword">return</span> item_ids, current_names, img_src_list</span><br></pre></td></tr></table></figure><br><div class="note danger modern"><p><strong>注意</strong>：<br>如果遇到报错<code>lxml.etree.XMLSyntaxError: Opening and ending tag mismatch: link line 14 and head, line 15, column 182</code>是因为网页中 html 语法不规范，如本例中的<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://img0.xiji.com/themes/ecstore/images/styles_ex.css?d2019110801&quot;&gt;</code>应该是自闭标签。</p></div></p><p>我们可以添加解析器：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = etree.HTMLParser(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">html = etree.parse(<span class="string">&#x27;../../_data/xiji/products.html&#x27;</span>, parser=parser)</span><br></pre></td></tr></table></figure><br>爬取到的图片数据如下：<br><div class="justified-gallery"><p><img src= "/img/loading.svg" data-lazy-src="/images/Snipaste_2020-05-10_11-50-52.png" alt="网页"><br><img src= "/img/loading.svg" data-lazy-src="/images/Snipaste_2020-05-10_11-48-38.png" alt="本地"></p>          </div></p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>获取数据完成，下一步，我们需要对图片进行分析，借助<code>Pillow</code>识别口红色号的 RGB 色值，使用 <a href="/blog/2020-05-01/python-OCR/">百度 OCR 接口</a> 识别图片下方的推荐词作为单个色号的描述。具体实现参考源码<br>最后返回的的处理结果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#123;&#39;id&#39;: &#39;127266&#39;, &#39;name&#39;: &#39;#520&#39;,</span><br><span class="line">      &#39;src&#39;: &#39;https:&#x2F;&#x2F;img0.xiji.com&#x2F;images&#x2F;19&#x2F;01&#x2F;5b96671ae769403827ec84b8200805abb36a40a0.jpg?1577773530#w&#39;,</span><br><span class="line">      &#39;rgb&#39;: (247, 0, 83), &#39;subtile&#39;: &#39;爱情水红恋爱中的粉红&#39;, &#39;desc&#39;: &#39;这是一支非常有寓意的口红,520我爱你,表白专属色。这是散发着恋爱中粉红泡泡的颜色,暧昧、热恋,都洋溢在唇间。&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: &#39;127267&#39;, &#39;name&#39;: &#39;#080&#39;,</span><br><span class="line">      &#39;src&#39;: &#39;https:&#x2F;&#x2F;img3.xiji.com&#x2F;images&#x2F;19&#x2F;01&#x2F;cf3cc958da0bc2b3715b69038ad417ef29523110.jpg?1577773529#w&#39;,</span><br><span class="line">      &#39;rgb&#39;: (220, 2, 3), &#39;subtile&#39;: &#39;微笑正红春晚同款色&#39;, &#39;desc&#39;: &#39;这款也是正红偏橘的色调,红多橘少,像是血橙的颜色,清新诱人,更适合日常使用。滋润质地,对唇部非常友好。&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: &#39;127268&#39;, &#39;name&#39;: &#39;#740&#39;,</span><br><span class="line">      &#39;src&#39;: &#39;https:&#x2F;&#x2F;img3.xiji.com&#x2F;images&#x2F;19&#x2F;01&#x2F;12248f21bf2a429cce01b41fcfd79b232f391e70.jpg?1577773531#w&#39;,</span><br><span class="line">      &#39;rgb&#39;: (181, 46, 24), &#39;subtile&#39;: &#39;脏橘色南瓜色百搭&#39;, &#39;desc&#39;: &#39;网红人气爆款,实力显白,送人送礼佳品,这支口红真的是人见人爱,厚涂也可以hold住!&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: &#39;127269&#39;, &#39;name&#39;: &#39;#888&#39;,</span><br><span class="line">      &#39;src&#39;: &#39;https:&#x2F;&#x2F;img1.xiji.com&#x2F;images&#x2F;19&#x2F;01&#x2F;003d9dd19d6612a42b107f427cea2a534c851c42.jpg?1577773531#w&#39;,</span><br><span class="line">      &#39;rgb&#39;: (220, 29, 36), &#39;subtile&#39;: &#39;火焰开运色&#39;, &#39;desc&#39;: &#39;888发发发,让人想到热烈的火焰,红红火火。如果觉得正红太艳丽大可选择这款,正红偏橘,非常显白有活力。&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: &#39;127270&#39;, &#39;name&#39;: &#39;#999金属&#39;,</span><br><span class="line">      &#39;src&#39;: &#39;https:&#x2F;&#x2F;img4.xiji.com&#x2F;images&#x2F;19&#x2F;01&#x2F;fea134055f2050c0a3c9ad992529aa377b0a722f.jpg?1577773532#w&#39;,</span><br><span class="line">      &#39;rgb&#39;: (168, 15, 9), &#39;subtile&#39;: &#39;人鱼姬正红&#39;, &#39;desc&#39;: &#39;已经有999的小仙女一定不能错过这款金属光正红,偏光的微闪人鱼姬色在阳光下不灵不灵的,非常富有层次感。&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: &#39;127271&#39;, &#39;name&#39;: &#39;#999滋润&#39;,</span><br><span class="line">      &#39;src&#39;: &#39;https:&#x2F;&#x2F;img0.xiji.com&#x2F;images&#x2F;19&#x2F;01&#x2F;6efcdf3646ab405e003d3feefa2d463ac20b9d3a.jpg?1577773534#w&#39;,</span><br><span class="line">      &#39;rgb&#39;: (201, 2, 5), &#39;subtile&#39;: &#39;经典正红色&#39;, &#39;desc&#39;: &#39;颜色最纯正的一款正红色,不挑肤色,喜庆特别显气质。嘴唇状态不好的小仙女一定要选这款,能让唇妆看起来更美腻~&#39;&#125;,</span><br><span class="line">     &#123;&#39;id&#39;: &#39;127272&#39;, &#39;name&#39;: &#39;#999哑光&#39;,</span><br><span class="line">      &#39;src&#39;: &#39;https:&#x2F;&#x2F;img1.xiji.com&#x2F;images&#x2F;19&#x2F;01&#x2F;ae4fa46845a4db70dc8fe02ed4faa214de12ad1c.jpg?1577773533#w&#39;,</span><br><span class="line">      &#39;rgb&#39;: (190, 18, 14), &#39;subtile&#39;: &#39;经典正红色&#39;, &#39;desc&#39;: &#39;李佳琦墙裂推荐的一个色号,每个女人都必须拥有,涂上气场两米八!哑光质地,不偏橘也不偏玫,厚涂薄涂都美到爆炸!&#39;&#125;]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> GUSCSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用 Python 识别图片文字（基于百度 OCR API）</title>
      <link href="blog/2020-05-01/python-OCR/"/>
      <url>blog/2020-05-01/python-OCR/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>做项目的时候需要用到文字识别功能，以下是对一些方案的实践，最后选择了<a href="https://ai.baidu.com/ai-doc/OCR/Ek3h7yeiq">百度文字识别 API</a>，其他的要么是云服务器内存太小，要么是 CPU 太低，没法用。还是直接找最简单快捷的办法。</p><h2 id="百度文字识别-api"><a href="#百度文字识别-api" class="headerlink" title="百度文字识别 api"></a>百度文字识别 api</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install baidu-aip</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipOcr</span><br><span class="line"><span class="keyword">from</span> backend <span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaiduOCR</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.client = AipOcr(secrets.APP_ID, secrets.API_KEY, secrets.SECRET_KEY)</span><br><span class="line">        self.options = &#123;<span class="string">&quot;language_type&quot;</span>: <span class="string">&quot;CHN_ENG&quot;</span>, <span class="string">&quot;detect_direction&quot;</span>: <span class="string">&quot;true&quot;</span>, <span class="string">&quot;detect_language&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;probability&quot;</span>: <span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span>(<span class="params">file_path</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        读取图片</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">return</span> fp.read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">basic_parse</span>(<span class="params">self, fp</span>):</span></span><br><span class="line">        image = self.get_file_content(fp)</span><br><span class="line">        ret = self.client.basicGeneral(image)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self, fp</span>):</span></span><br><span class="line">        ret_data = self.basic_parse(fp)</span><br><span class="line">        <span class="keyword">return</span> ret_data</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fp = <span class="string">&#x27;../../_data/lipsticks/mp_test.png&#x27;</span> <span class="comment"># 测试识别文件路径</span></span><br><span class="line">    bd_ocr = BaiduOCR()</span><br><span class="line">    ret_data = bd_ocr.main(fp)</span><br><span class="line">    print(ret_data)</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;log_id&#39;: 2510103433725039650, &#39;words_result_num&#39;: 2, &#39;words_result&#39;: [&#123;&#39;words&#39;: &#39;·微信搜一搜&#39;&#125;, &#123;&#39;words&#39;: &#39;Q三傻的编程生活&#39;&#125;]&#125;</span><br></pre></td></tr></table></figure><br><div class="note warning modern"><p><strong>注意</strong>：估计是原图带有二维码，所以导致识别超时，返回<code>requests.exceptions.ConnectionError: (&#39;Connection aborted.&#39;, timeout(&#39;The write operation timed out&#39;))</code>；而我们手动给二维码打码之后，才可以正常识别。</p></div></p><p>测试图片<br><img src= "/img/loading.svg" data-lazy-src="/images/mp.png" alt="不可识别"><br><img src= "/img/loading.svg" data-lazy-src="/images/mp_test.png" alt="可识别"></p><h3 id="再来一遍"><a href="#再来一遍" class="headerlink" title="再来一遍"></a>再来一遍</h3><p>调用远程 url 图片：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic_parse_url</span>(<span class="params">self, url</span>):</span></span><br><span class="line">    ret = self.client.basicGeneralUrl(url, self.options)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    bd_ocr = BaiduOCR()</span><br><span class="line">    url = <span class="string">&#x27;http://img4.xiji.com/images/19/01/6efcdf3646ab405e003d3feefa2d463ac20b9d3a.jpg&#x27;</span></span><br><span class="line">    url_ret_data = bd_ocr.basic_parse_url(url)</span><br><span class="line">    print(url_ret_data)</span><br></pre></td></tr></table></figure><p>返回结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;log_id&#39;: 8559002589980060578, &#39;direction&#39;: 0, &#39;words_result_num&#39;: 4, &#39;words_result&#39;: [&#123;&#39;words&#39;: &#39;迪奥999排滋润&#39;, &#39;probability&#39;: &#123;&#39;variance&#39;: 0.016349, &#39;average&#39;: 0.931602, &#39;min&#39;: 0.602039&#125;&#125;, &#123;&#39;words&#39;: &#39;迪奥#99滋润(经典正红色)&#39;, &#39;probability&#39;: &#123;&#39;variance&#39;: 7.6e-05, &#39;average&#39;: 0.99548, &#39;min&#39;: 0.969314&#125;&#125;, &#123;&#39;words&#39;: &#39;颜色最纯正的一款正红色,不挑肤色,喜庆特别显气质。嘴唇状态不好的小仙女&#39;, &#39;probability&#39;: &#123;&#39;variance&#39;: 0.00176, &#39;average&#39;: 0.988948, &#39;min&#39;: 0.788893&#125;&#125;, &#123;&#39;words&#39;: &#39;要选这款,能让唇妆看起来更美&#39;, &#39;probability&#39;: &#123;&#39;variance&#39;: 5.8e-05, &#39;average&#39;: 0.996976, &#39;min&#39;: 0.97018&#125;&#125;], &#39;language&#39;: -1&#125;</span><br></pre></td></tr></table></figure><br><img src= "/img/loading.svg" data-lazy-src="https://img4.xiji.com/images/19/01/6efcdf3646ab405e003d3feefa2d463ac20b9d3a.jpg" alt="999滋润"></p><h3 id="更多阅读"><a href="#更多阅读" class="headerlink" title="更多阅读"></a>更多阅读</h3><p><a href="https://ai.baidu.com/ai-doc/OCR/Ek3h7yeiq">文字识别 - 简介 | 百度 AI 开放平台</a></p><hr><p>以下方案由于服务器性能不够，没法正常运行。</p><h2 id="pytesseract"><a href="#pytesseract" class="headerlink" title="pytesseract"></a>pytesseract</h2><h3 id="装包"><a href="#装包" class="headerlink" title="装包"></a>装包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pipenv install pytesseract</span><br><span class="line">pipenv install tesseract</span><br><span class="line">yum install tesseract</span><br></pre></td></tr></table></figure><h3 id="下载语言扩展"><a href="#下载语言扩展" class="headerlink" title="下载语言扩展"></a>下载语言扩展</h3><p><a href="https://tesseract-ocr.github.io/tessdoc/Data-Files">tessdoc | Tesseract documentation</a></p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> backend <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content_from_image</span>(<span class="params">image_fp</span>):</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_fp)</span><br><span class="line">    content = pytesseract.image_to_string(image, lang=<span class="string">&#x27;chi_sim&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fp = settings.TEST_IMAGE_FP</span><br><span class="line">    ret = get_content_from_image(fp)</span><br><span class="line">    print(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h3><p><img src= "/img/loading.svg" data-lazy-src="/images/ocr-1.png" alt=""></p><p>尼玛，坑爹呢！</p><h2 id="chineseocr-lite"><a href="#chineseocr-lite" class="headerlink" title="chineseocr_lite"></a>chineseocr_lite</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;ouyanghuiyu&#x2F;chineseocr_lite.git</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd psenet&#x2F;pse</span><br><span class="line"></span><br><span class="line">rm -rf pse.so </span><br><span class="line">make </span><br><span class="line">make: python3-config: Command not found</span><br><span class="line">make: python3-config: Command not found</span><br><span class="line">g++ -o pse.so -I include  -std&#x3D;c++11 -O3   pse.cpp --shared -fPIC</span><br><span class="line">make: g++: Command not found</span><br><span class="line">make: *** [pse.so] Error 127</span><br></pre></td></tr></table></figure><p>安装 g++<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc+ gcc-c++</span><br><span class="line">yum install python3-devel -y</span><br></pre></td></tr></table></figure></p><h3 id="回到主目录"><a href="#回到主目录" class="headerlink" title="回到主目录"></a>回到主目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..&#x2F;..</span><br><span class="line">pwd</span><br><span class="line">&#x2F;home&#x2F;imoyao&#x2F;chineseocr_lite</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>如果国内下载依赖太慢可以配置镜像，参考此处：</p><ul><li><a href="/blog/2018-09-21/get-some-trouble-with-pip/#解决方案">换阿里源</a></li><li><a href="/blog/2020-01-12/pip-install-error-Failed-to-establish-a-new-connection-Network-is-unreachable/#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">换清华源</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install torch</span><br><span class="line">pip install torchvision</span><br></pre></td></tr></table></figure><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(chineseocr_lite) bash-4.2# python app.py </span><br><span class="line">make: Entering directory &#96;&#x2F;home&#x2F;imoyao&#x2F;chineseocr_lite&#x2F;psenet&#x2F;pse&#39;</span><br><span class="line">make: &#96;pse.so&#39; is up to date.</span><br><span class="line">make: Leaving directory &#96;&#x2F;home&#x2F;imoyao&#x2F;chineseocr_lite&#x2F;psenet&#x2F;pse&#39;</span><br><span class="line">device: cpu</span><br><span class="line">load model</span><br><span class="line">device: cpu</span><br><span class="line">load model</span><br><span class="line">device: cpu</span><br><span class="line">load model</span><br><span class="line">device: cpu</span><br><span class="line">load model</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;root&#x2F;.local&#x2F;share&#x2F;virtualenvs&#x2F;chineseocr_lite-GxZWTh-N&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;web&#x2F;utils.py&quot;, line 526, in take</span><br><span class="line">    yield next(seq)</span><br><span class="line">StopIteration</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;app.py&quot;, line 125, in &lt;module&gt;</span><br><span class="line">    app &#x3D; web.application(urls, globals())</span><br><span class="line">  File &quot;&#x2F;root&#x2F;.local&#x2F;share&#x2F;virtualenvs&#x2F;chineseocr_lite-GxZWTh-N&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;web&#x2F;application.py&quot;, line 62, in __init__</span><br><span class="line">    self.init_mapping(mapping)</span><br><span class="line">  File &quot;&#x2F;root&#x2F;.local&#x2F;share&#x2F;virtualenvs&#x2F;chineseocr_lite-GxZWTh-N&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;web&#x2F;application.py&quot;, line 130, in init_mapping</span><br><span class="line">    self.mapping &#x3D; list(utils.group(mapping, 2))</span><br><span class="line">  File &quot;&#x2F;root&#x2F;.local&#x2F;share&#x2F;virtualenvs&#x2F;chineseocr_lite-GxZWTh-N&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;web&#x2F;utils.py&quot;, line 531, in group</span><br><span class="line">    x &#x3D; list(take(seq, size))</span><br><span class="line">RuntimeError: generator raised StopIteration</span><br><span class="line">(chineseocr_lite) bash-4.2# cp &#x2F;root&#x2F;.local&#x2F;share&#x2F;virtualenvs&#x2F;chineseocr_lite-GxZWTh-N&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;web&#x2F;utils.py &#x2F;root&#x2F;.local&#x2F;share&#x2F;virtualenvs&#x2F;chineseocr_lite-GxZWTh-N&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;web&#x2F;utils.py.bak</span><br></pre></td></tr></table></figure>修改如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def take(seq, n):</span><br><span class="line">   for i in range(n):</span><br><span class="line">       try:</span><br><span class="line">           yield next(seq)</span><br><span class="line">       except StopIteration:</span><br><span class="line">           return</span><br></pre></td></tr></table></figure>启动服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python app.py</span><br></pre></td></tr></table></figure>访问应用：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;&#123;&#123;YOUR_DEV_IP&#125;&#125;:8080&#x2F;ocr # 注意后面的ocr路由而不是首页！</span><br></pre></td></tr></table></figure><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  File &quot;&#x2F;root&#x2F;.local&#x2F;share&#x2F;virtualenvs&#x2F;chineseocr_lite-GxZWTh-N&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;web&#x2F;httpserver.py&quot;, line 255, in __iter__</span><br><span class="line">    path &#x3D; self.translate_path(self.path)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;http&#x2F;server.py&quot;, line 820, in translate_path</span><br><span class="line">    path &#x3D; self.directory</span><br><span class="line">AttributeError: &#39;StaticApp&#39; object has no attribute &#39;directory&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>添加代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class StaticApp(SimpleHTTPRequestHandler):</span><br><span class="line">    &quot;&quot;&quot;WSGI application for serving static files.&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, environ, start_response):</span><br><span class="line">        self.headers &#x3D; []</span><br><span class="line">        self.environ &#x3D; environ</span><br><span class="line">        self.start_response &#x3D; start_response</span><br><span class="line">        self.directory &#x3D; os.getcwd()    # 此行</span><br><span class="line"></span><br></pre></td></tr></table></figure>参见<a href="https://stackoverflow.com/questions/52439325/webpy-serving-static-files-staticapp-object-has-no-attribute-directory">此处</a>和<a href="https://github.com/webpy/webpy/pull/468/files">此处</a></li></ul><h3 id="安装-leptonica"><a href="#安装-leptonica" class="headerlink" title="安装 leptonica"></a>安装 leptonica</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tesseract_ocr.cpp:633:34: fatal error: leptonica&#x2F;allheaders.h: No such file or directory</span><br><span class="line">     #include &quot;leptonica&#x2F;allheaders.h&quot;</span><br></pre></td></tr></table></figure><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;www.leptonica.org&#x2F;source&#x2F;leptonica-1.79.0.tar.gz</span><br><span class="line">tar -xzvf leptonica-1.79.0.tar.gz</span><br><span class="line">cd leptonica-1.79.0</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;leptonica</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tesseract -v</span><br><span class="line">tesseract 3.04.00</span><br><span class="line"> leptonica-1.72</span><br><span class="line">  libgif 4.1.6(?) : libjpeg 6b (libjpeg-turbo 1.2.90) : libpng 1.5.13 : libtiff 4.0.3 : zlib 1.2.7 : libwebp 0.3.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> GUSCSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OCR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🐍PyTricks | Python 中如何合并一个内字典列表？</title>
      <link href="blog/2020-04-19/python-merge-two-list-of-dicts/"/>
      <url>blog/2020-04-19/python-merge-two-list-of-dicts/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>有如下列表，要将他们按照 id 合并成一个列表。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;av&#x27;</span>: <span class="number">4</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;av&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;av&#x27;</span>: <span class="number">0</span>&#125;]</span><br><span class="line">l2 = [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;nv&#x27;</span>: <span class="number">45</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;nv&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;nv&#x27;</span>: <span class="number">30</span>&#125;]</span><br></pre></td></tr></table></figure></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>初级版<br>将两个列表按照 id 分组，分别放置到新列表中，然后遍历其中一个列表，并按照 key 将数据更新，代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">l3 = &#123;x[<span class="string">&#x27;id&#x27;</span>]: &#123;<span class="string">&#x27;av&#x27;</span>: x[<span class="string">&#x27;av&#x27;</span>]&#125; <span class="keyword">for</span> x <span class="keyword">in</span> l1&#125;</span><br><span class="line"></span><br><span class="line">l4 = &#123;x[<span class="string">&#x27;id&#x27;</span>]: &#123;<span class="string">&#x27;nv&#x27;</span>: x[<span class="string">&#x27;nv&#x27;</span>]&#125; <span class="keyword">for</span> x <span class="keyword">in</span> l2&#125;</span><br><span class="line"></span><br><span class="line">&#123;key: value.update(l4[key]) <span class="keyword">for</span> key, value <span class="keyword">in</span> l3.items()&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; &#123;<span class="number">9</span>: &#123;<span class="string">&#x27;av&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;nv&#x27;</span>: <span class="number">45</span>&#125;, <span class="number">10</span>: &#123;<span class="string">&#x27;av&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;nv&#x27;</span>: <span class="number">0</span>&#125;, <span class="number">8</span>: &#123;<span class="string">&#x27;av&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;nv&#x27;</span>: <span class="number">30</span>&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们很容易发现里面的 l4 的是多余的，重复 for 循环会降低代码的效率。所以</p></li><li><p>第一版改进</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">l3 = &#123;x[<span class="string">&#x27;id&#x27;</span>]: &#123;<span class="string">&#x27;av&#x27;</span>: x[<span class="string">&#x27;av&#x27;</span>]&#125; <span class="keyword">for</span> x <span class="keyword">in</span> l1&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> l2:</span><br><span class="line"></span><br><span class="line">    l3[item[<span class="string">&#x27;id&#x27;</span>]].update(nv=item[<span class="string">&#x27;nv&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>第二版代码<br>使用字典的<a href="https://docs.python.org/3/library/stdtypes.html#dict.pop">pop</a>方法将 id 取出来，因为我们只关心 id，而不需要关注字典中的其他 key<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l3 = &#123;_.pop(<span class="string">&#x27;id&#x27;</span>): _ <span class="keyword">for</span> _ <span class="keyword">in</span> l1&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> l2:</span><br><span class="line"></span><br><span class="line">  l3[item.pop(<span class="string">&#x27;id&#x27;</span>)].update(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure>但是这种办法有一个缺陷：我们会对所有输入的字典进行更新，为了消除这个影响，我们从一个空字典开始，更新每一个键，当然也包括 id，之后弹出额外的键，可以使用<a href="https://docs.python.org/3/library/collections.html#collections.defaultdict">defaultdict</a>:<br>简单介绍参考：<a href="https://jtauber.com/blog/2008/02/27/evolution_of_default_dictionaries_in_python/">James Tauber : Evolution of Default Dictionaries in Python</a></li><li><p>第三版代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = defaultdict(<span class="built_in">dict</span>)</span><br><span class="line"><span class="keyword">for</span> sequence <span class="keyword">in</span> (l1, l2):</span><br><span class="line">   <span class="keyword">for</span> dictionary <span class="keyword">in</span> sequence:</span><br><span class="line">       result[dictionary[<span class="string">&#x27;id&#x27;</span>]].update(dictionary)</span><br><span class="line"><span class="keyword">for</span> dictionary <span class="keyword">in</span> result.values():</span><br><span class="line">   dictionary.pop(<span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果我们要合并的内字典列表多于两个呢？用这种方法是很容易扩展的，定义一个方法：</p></li><li><p>终极版代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_iterables_of_dict</span>(<span class="params">shared_key, *iterables</span>):</span></span><br><span class="line">   result = defaultdict(<span class="built_in">dict</span>)</span><br><span class="line">   <span class="keyword">for</span> dictionary <span class="keyword">in</span> itertools.chain.from_iterable(iterables):</span><br><span class="line">       result[dictionary[shared_key]].update(dictionary)</span><br><span class="line">   <span class="keyword">for</span> dictionary <span class="keyword">in</span> result.values():</span><br><span class="line">       dictionary.pop(shared_key)</span><br><span class="line">   <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>使用这个函数：<code>merge_iterables_of_dict(&#39;id&#39;,l1,l2)</code>，注意，li 和 l2 的顺序会影响返回结果，更“靠谱”的数据应该放到 iterables 后方（参考字典<code>update</code>方法的更新逻辑）。</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://codereview.stackexchange.com/questions/209202/merge-two-list-of-dicts-with-same-key">python - Merge two list of dicts with same key - Code Review Stack Exchange</a></p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p>如果只是合并两个字典，请参阅：<a href="https://stackoverflow.com/questions/38987/how-do-i-merge-two-dictionaries-in-a-single-expression-in-python/26853961">dictionary - How do I merge two dictionaries in a single expression in Python? - Stack Overflow</a>和<a href="https://stackoverflow.com/questions/2365921/merging-python-dictionaries">list - merging Python dictionaries - Stack Overflow</a></p>]]></content>
      
      
      <categories>
          
          <category> 🐍PyTricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> dict </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国传统色 | 如何判断一个颜色属于什么色系？</title>
      <link href="blog/2020-04-15/tell-me-rgb-values-nearest-color-with-Python/"/>
      <url>blog/2020-04-15/tell-me-rgb-values-nearest-color-with-Python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在做 <a href="https://github.com/imoyao/GUSCSS/">项目</a> 的时候，需要判断一个颜色值所在色系（如：红橙黄绿青蓝紫黑白灰），用眼睛观察太慢，算不上好办法，那么怎么判断呢？通过阅读 <a href="https://www.v2ex.com/amp/t/153186">该讨论</a> 知道了一种方案：将 RGB 色值转化为 HSV，之后通过 Hue 去判断彩色的种类，用明度去判断黑白灰。具体实现如下。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h3><p>RGB 是从颜色发光的原理来设计定的，通俗点说它的颜色混合方式就好像有红、绿、蓝三盏灯，当它们的光相互叠合的时候，色彩相混，而亮度却等于两者亮度之总和，越混合亮度越高，即加法混合。</p><p>红、绿、蓝三个颜色通道每种色各分为 256 阶亮度，在 0 时“灯”最弱——是关掉的，而在 255 时“灯”最亮。当三色灰度数值相同时，产生不同灰度值的灰色调，即三色灰度都为 0 时，是最暗的黑色调；三色灰度都为 255 时，是最亮的白色调。</p><p>在电脑中，RGB 的所谓“多少”就是指亮度，并使用整数来表示。通常情况下，RGB 各有 256 级亮度，用数字表示为从 0、1、2…直到 255。注意虽然数字最高是 255，但 0 也是数值之一，因此共 256 级。<br><img src= "/img/loading.svg" data-lazy-src="/images/RGB.png" alt="RGB"></p><h3 id="HSV"><a href="#HSV" class="headerlink" title="HSV"></a>HSV</h3><p>HSV 是一种比较直观的颜色模型，所以在许多图像编辑工具中应用比较广泛，这个模型中颜色的参数分别是：色调（H, Hue），饱和度（S,Saturation），明度（V, Value）。<br><div class="justified-gallery"><p><img src= "/img/loading.svg" data-lazy-src="/images/HSV1.png" alt="HSV1"><br><img src= "/img/loading.svg" data-lazy-src="/images/HSV2.png" alt="HSV2"></p>          </div></p><h4 id="色调（Hue）"><a href="#色调（Hue）" class="headerlink" title="色调（Hue）"></a>色调（Hue）</h4><p>用角度度量，取值范围为 0°～360°，从红色开始按逆时针方向计算，红色为 0°，绿色为 120°,蓝色为 240°。它们的补色是：黄色为 60°，青色为 180°,品红为 300°；</p><h4 id="饱和度（Saturation）"><a href="#饱和度（Saturation）" class="headerlink" title="饱和度（Saturation）"></a>饱和度（Saturation）</h4><p>饱和度 S 表示颜色接近光谱色的程度。一种颜色，可以看成是某种光谱色与白色混合的结果。其中光谱色所占的比例愈大，颜色接近光谱色的程度就愈高，颜色的饱和度也就愈高。饱和度高，颜色则深而艳。光谱色的白光成分为 0，饱和度达到最高。通常取值范围为 0%～100%，值越大，颜色越饱和。</p><h4 id="明度（Value）"><a href="#明度（Value）" class="headerlink" title="明度（Value）"></a>明度（Value）</h4><p>明度表示颜色明亮的程度，对于光源色，明度值与发光体的光亮度有关；对于物体色，此值和物体的透射比或反射比有关。通常取值范围为 0%（黑）到 100%（白）。</p><h4 id="取值范围说明"><a href="#取值范围说明" class="headerlink" title="取值范围说明"></a>取值范围说明</h4><p>我们需要注意的在不同应用场景中，HSV 取值范围是不尽相同的。</p><p>1.PS 软件时，H 取值范围是 0-360，S 取值范围是（0%-100%），V 取值范围是（0%-100%）。</p><p>2.利用 openCV 中 cvSplit 函数的在选择图像 IPL_DEPTH_32F 类型时，H 取值范围是 0-360，S 取值范围是 0-1（0%-100%），V 取值范围是 0-1（0%-100%）。</p><p>3.利用 openCV 中 cvSplit 函数的在选择图像 IPL_DEPTH_8UC 类型时，H 取值范围是 0-180，S 取值范围是 0-255，V 取值范围是 0-255。</p><p>那么，开始写代码吧！</p><h2 id="RGB-转-HSV"><a href="#RGB-转-HSV" class="headerlink" title="RGB 转 HSV"></a>RGB 转 HSV</h2><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><ul><li>常量<br><img src= "/img/loading.svg" data-lazy-src="/images/constant_HSV.svg" alt="constant"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;l&#125;</span><br><span class="line">R^&#123;\prime&#125;&#x3D;R &#x2F; 255\\</span><br><span class="line"></span><br><span class="line">G^&#123;\prime&#125;&#x3D;G &#x2F; 255\\</span><br><span class="line"></span><br><span class="line">B^&#123;\prime&#125;&#x3D;B &#x2F; 255\\</span><br><span class="line">\operatorname&#123;Cmax&#125;&#x3D;\max \left(R^&#123;\prime&#125;, G^&#123;\prime&#125;, B^&#123;\prime&#125;\right)\\</span><br><span class="line"></span><br><span class="line">C \min &#x3D;\min \left(R^&#123;\prime&#125;, G^&#123;\prime&#125;, B^&#123;\prime&#125;\right)\\</span><br><span class="line">\Delta&#x3D;\mathrm&#123;Cmax&#125;-\mathrm&#123;Cmin&#125;</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></li><li>H 计算<br><img src= "/img/loading.svg" data-lazy-src="/images/HSV_Hue.svg" alt="H"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">H&#x3D;\left\&#123;\begin&#123;array&#125;&#123;cc&#125;0^&#123;\circ&#125; &amp; \Delta&#x3D;0 \\ 60^&#123;\circ&#125; \times\left(\frac&#123;G^&#123;\prime&#125;-B^&#123;\prime&#125;&#125;&#123;A&#125; \bmod 6\right) &amp; , C_&#123;\max &#125;&#x3D;R^&#123;\prime&#125; \\ 60^&#123;\circ&#125; \times\left(\frac&#123;B^&#123;\prime&#125;-R^&#123;\prime&#125;&#125;&#123;\Delta&#125;+2\right) &amp; , C_&#123;\max &#125;&#x3D;G^&#123;\prime&#125; \\ 60^&#123;\circ&#125; \times\left(\frac&#123;R^&#123;\prime&#125;-G^&#123;\prime&#125;&#125;&#123;\Delta&#125;+4\right) &amp; , C_&#123;\max &#125;&#x3D;B^&#123;\prime&#125;\end&#123;array&#125;\right.</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></li><li>S 计算<br><img src= "/img/loading.svg" data-lazy-src="/images/HSV_S.svg" alt="S"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">S&#x3D;\left\&#123;\begin&#123;array&#125;&#123;cl&#125;</span><br><span class="line">0 &amp; C \max &#x3D;0 \\</span><br><span class="line">\frac&#123;\Delta&#125;&#123;C \max &#125; &amp; C \max \neq 0</span><br><span class="line">\end&#123;array&#125;\right.</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></li><li>V 计算<br><img src= "/img/loading.svg" data-lazy-src="/images/HSV_V.svg" alt="V"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$V&#x3D;C \max$</span><br></pre></td></tr></table></figure><h3 id="代码（RGB-转-HSV）"><a href="#代码（RGB-转-HSV）" class="headerlink" title="代码（RGB 转 HSV）"></a>代码（RGB 转 HSV）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hue_calculate_org</span>(<span class="params">round1, round2, delta, add_num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((round1 - round2) / delta + add_num) * <span class="number">60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb_to_hsv_org</span>(<span class="params">rgb_seq</span>):</span></span><br><span class="line">    r, g, b = rgb_seq</span><br><span class="line">    r_round = <span class="built_in">float</span>(r) / <span class="number">255</span></span><br><span class="line">    g_round = <span class="built_in">float</span>(g) / <span class="number">255</span></span><br><span class="line">    b_round = <span class="built_in">float</span>(b) / <span class="number">255</span></span><br><span class="line">    max_c = <span class="built_in">max</span>(r_round, g_round, b_round)</span><br><span class="line">    min_c = <span class="built_in">min</span>(r_round, g_round, b_round)</span><br><span class="line">    delta = max_c - min_c</span><br><span class="line">    h = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> delta == <span class="number">0</span>:</span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> max_c == r_round:</span><br><span class="line">        h = ((g_round - b_round) / delta % <span class="number">6</span>) * <span class="number">60</span></span><br><span class="line">    <span class="keyword">elif</span> max_c == g_round:</span><br><span class="line">        h = hue_calculate_org(b_round, r_round, delta, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> max_c == b_round:</span><br><span class="line">        h = hue_calculate_org(r_round, g_round, delta, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">if</span> max_c == <span class="number">0</span>:</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = delta / max_c</span><br><span class="line">    <span class="keyword">return</span> h, s, max_c</span><br></pre></td></tr></table></figure>另一种计算方式来自此处：👉 <a href="https://www.w3resource.com/python-exercises/math/python-math-exercise-77.php">Python Math: Convert RGB color to HSV color - w3resource</a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hue_calculate</span>(<span class="params">round1, round2, delta, add_num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (((round1 - round2) / delta) * <span class="number">60</span> + add_num) % <span class="number">360</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb_to_hsv</span>(<span class="params">rgb_seq</span>):</span></span><br><span class="line">    r, g, b = rgb_seq</span><br><span class="line">    r_round = <span class="built_in">float</span>(r) / <span class="number">255</span></span><br><span class="line">    g_round = <span class="built_in">float</span>(g) / <span class="number">255</span></span><br><span class="line">    b_round = <span class="built_in">float</span>(b) / <span class="number">255</span></span><br><span class="line">    max_c = <span class="built_in">max</span>(r_round, g_round, b_round)</span><br><span class="line">    min_c = <span class="built_in">min</span>(r_round, g_round, b_round)</span><br><span class="line">    delta = max_c - min_c</span><br><span class="line"></span><br><span class="line">    h = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> delta == <span class="number">0</span>:</span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> max_c == r_round:</span><br><span class="line">        h = hue_calculate(g_round, b_round, delta, <span class="number">360</span>)</span><br><span class="line">    <span class="keyword">elif</span> max_c == g_round:</span><br><span class="line">        h = hue_calculate(b_round, r_round, delta, <span class="number">120</span>)</span><br><span class="line">    <span class="keyword">elif</span> max_c == b_round:</span><br><span class="line">        h = hue_calculate(r_round, g_round, delta, <span class="number">240</span>)</span><br><span class="line">    <span class="keyword">if</span> max_c == <span class="number">0</span>:</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = (delta / max_c) * <span class="number">100</span></span><br><span class="line">    v = max_c * <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> h, s, v</span><br></pre></td></tr></table></figure><h2 id="颜色划分"><a href="#颜色划分" class="headerlink" title="颜色划分"></a>颜色划分</h2></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><table class="dtable"><tbody><tr><th>Color</th><th>Color name</th><th>(H,S,V)</th><th>Hex</th><th>(R,G,B)</th></tr><tr><td style="background-color:#000000">&nbsp;</td><td>Black</td><td>(0°,0%,0%)</td><td>#000000</td><td>(0,0,0)</td></tr>        <tr><td style="background-color:#808080">&nbsp;</td><td>Gray</td><td>(0°,0%,50%)</td><td>#808080</td><td>(128,128,128)</td></tr><tr><td style="background-color:#FFFFFF">&nbsp;</td><td>White</td><td>(0°,0%,100%)</td><td>#FFFFFF</td><td>(255,255,255)</td></tr><tr><td style="background-color:#FF0000">&nbsp;</td><td>Red</td><td>(0°,100%,100%)</td><td>#FF0000</td><td>(255,0,0)</td></tr>        <tr><td style="background-color:#FFFF00">&nbsp;</td><td>Yellow</td><td>(60°,100%,100%)</td><td>#FFFF00</td><td>(255,255,0)</td></tr><tr><td style="background-color:#00FF00">&nbsp;</td><td>Lime</td><td>(120°,100%,100%)</td><td>#00FF00</td><td>(0,255,0)</td></tr><tr><td style="background-color:#00FFFF">&nbsp;</td><td>Cyan</td><td>(180°,100%,100%)</td><td>#00FFFF</td><td>(0,255,255)</td></tr><tr><td style="background-color:#0000FF">&nbsp;</td><td>Blue</td><td>(240°,100%,100%)</td><td>#0000FF</td><td>(0,0,255)</td></tr><tr><td style="background-color:#FF00FF">&nbsp;</td><td>Magenta</td><td>(300°,100%,100%)</td><td>#FF00FF</td><td>(255,0,255)</td></tr></tbody></table><p>数据来源：<a href="https://www.rapidtables.com/convert/color/hsv-to-rgb.html">HSV to RGB conversion | color conversion</a><br>看<del>色图</del>，哦不，色环图。😳<br><img src= "/img/loading.svg" data-lazy-src="/images/color_circle.jpg" alt="色环图"></p><p>先不管黑灰白三种色，找其他颜色与色环的对应关系，我们很容易发现 H 与色环的对应关系。</p><ol><li>变换色相 H，保持 S，V 不变，颜色发生变化；<div class="justified-gallery"><p><img src= "/img/loading.svg" data-lazy-src="/images/change_H_30.png" alt="H30"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_H_60.png" alt="H60"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_H_180.png" alt="H180"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_H_210.png" alt="H210"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_H_270.png" alt="H270"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_H_330.png" alt="H330"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_S_4.png" alt="H360"></p>          </div>修改 H 会引起颜色变化；</li><li>变换亮度 V，保持 H，S 不变，我们发现颜色在黑灰白之间变化；<div class="justified-gallery"><p><img src= "/img/loading.svg" data-lazy-src="/images/change_V_100.png" alt="V100"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_V_50.png" alt="V50"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_V_0.png" alt="V0"></p>          </div></li><li>变换饱和度 S，保持 H，V 不变，颜色不会变化，变的只是颜色的深浅程度；<div class="justified-gallery"><p><img src= "/img/loading.svg" data-lazy-src="/images/change_S_1.png" alt="HSV1"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_S_2.png" alt="HSV1"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_S_3.png" alt="HSV1"><br><img src= "/img/loading.svg" data-lazy-src="/images/change_S_4.png" alt="HSV1"></p>          </div>因为人眼对明亮的颜色更加敏感，所以我们适当调高亮度，之后逐渐修改 S，观察颜色变化。<br>有内味儿了，颜色变得越来越浓郁了！</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="颜色归类（按色系）"><a href="#颜色归类（按色系）" class="headerlink" title="颜色归类（按色系）"></a>颜色归类（按色系）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_color_series</span>(<span class="params">rgb_seq</span>):</span>  <span class="comment"># <span class="doctag">TODO:</span>此处是否有更好实现？</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将rgb转为hsv之后根据h和v寻找色系</span></span><br><span class="line"><span class="string">    :param rgb_seq:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    h, s, v = rgb_to_hsv(rgb_seq)</span><br><span class="line">    cs = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">30</span> &lt; h &lt;= <span class="number">90</span>:</span><br><span class="line">        cs = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">90</span> &lt; h &lt;= <span class="number">150</span>:</span><br><span class="line">        cs = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">150</span> &lt; h &lt;= <span class="number">210</span>:</span><br><span class="line">        cs = <span class="string">&#x27;cyan&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">210</span> &lt; h &lt;= <span class="number">270</span>:</span><br><span class="line">        cs = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">270</span> &lt; h &lt;= <span class="number">330</span>:</span><br><span class="line">        cs = <span class="string">&#x27;purple&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> h &gt; <span class="number">330</span> <span class="keyword">or</span> h &lt;= <span class="number">30</span>:</span><br><span class="line">        cs = <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s &lt; <span class="number">10</span>:  <span class="comment"># 色相太淡时，显示什么颜色主要由亮度来决定</span></span><br><span class="line">        cs = update_by_value(v)</span><br><span class="line">    <span class="keyword">assert</span> cs <span class="keyword">in</span> COLOR_SERIES_MAP</span><br><span class="line">    <span class="keyword">return</span> cs</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_by_value</span>(<span class="params">v</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据 V 值去更新色系数据</span></span><br><span class="line"><span class="string">    :param v: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> v &lt;= <span class="number">100</span> / <span class="number">3</span> * <span class="number">1</span>:</span><br><span class="line">        cs = <span class="string">&#x27;black&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> v &lt;= <span class="number">100</span> / <span class="number">3</span> * <span class="number">2</span>:</span><br><span class="line">        cs = <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cs = <span class="string">&#x27;white&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> cs</span><br></pre></td></tr></table></figure><h4 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    color_list = [[<span class="number">22</span>, <span class="number">24</span>, <span class="number">35</span>], [<span class="number">36</span>, <span class="number">134</span>, <span class="number">185</span>], [<span class="number">234</span>, <span class="number">137</span>, <span class="number">88</span>], [<span class="number">32</span>, <span class="number">161</span>, <span class="number">98</span>], [<span class="number">100</span>, <span class="number">106</span>, <span class="number">88</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> color_list:</span><br><span class="line">        print(find_color_series(item))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回结果：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blue</span><br><span class="line">cyan</span><br><span class="line">red</span><br><span class="line">cyan</span><br><span class="line">yellow</span><br></pre></td></tr></table></figure><br>至此，我们完成了数据颜色粗略的归类。<br>到这里就结束了吗？显然没有。实际上，这种数据返回结果是很粗糙的，我们需要对 Hue 进行反复修正才能得出一个较为满意的结果。正如物理实验一样：理论和实践可能存在较大偏差甚至可能得出完全相反的结论，此处我们不再展开。😂我们进一步分析数据，发现：</p><blockquote><p>甚三<strong>紅</strong>、<strong>黄</strong>朽葉、千歳<strong>緑</strong>、錆<strong>青</strong>磁、江戸<strong>紫</strong>、<strong>白</strong>練……</p></blockquote><p>你细品~是的，部分颜色名称里面已经包含了颜色的色系关键字。我们假定名称的命名是靠谱的。那么，我们可以利用正则把色系关键字提取出来，然后只对没有指明的颜色进行计算。</p><p>可是上面的代码已经写完了，我不想再大动干戈修改此函数，怎么办？此处，我们使用装饰器。</p><h4 id="颜色归类（按名称）"><a href="#颜色归类（按名称）" class="headerlink" title="颜色归类（按名称）"></a>颜色归类（按名称）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps, partial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attach_wrapper</span>(<span class="params">obj, func=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> func <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> partial(attach_wrapper, obj)</span><br><span class="line">    <span class="built_in">setattr</span>(obj, func.__name__, func)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_color_series_by_name</span>(<span class="params">name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    装饰器：通过颜色的中文名称利用正则匹配获取颜色名称</span></span><br><span class="line"><span class="string">    我们假定命名是符合人类主观意识的，即：名称比我们的代码更可靠</span></span><br><span class="line"><span class="string">    因为按照hsv去匹配的时候会有误差，所以我们先通过名称去直接匹配色系，如果名称中没有关键字，我们再使用自己写的规则</span></span><br><span class="line"><span class="string">    :param name:str,</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">        color_name_char = name</span><br><span class="line"></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            color_series = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> color_name_char:</span><br><span class="line">                re_ret = re.match(REG_COLOR_SERES, color_name_char)</span><br><span class="line">                <span class="keyword">if</span> re_ret:</span><br><span class="line">                    color_signal = re_ret.group(<span class="number">1</span>)</span><br><span class="line">                    color_series = COLOR_SERIES_MAP_REVERSE.get(color_signal)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> color_series == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                color_series = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> color_series</span><br><span class="line"></span><br><span class="line"><span class="meta">        @attach_wrapper(<span class="params">wrapper</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">set_color_name</span>(<span class="params">new_name</span>):</span></span><br><span class="line">            <span class="keyword">nonlocal</span> color_name_char</span><br><span class="line">            color_name_char = new_name</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> deco</span><br></pre></td></tr></table></figure><p>关于此处装饰器的写法，参见《Python Cookbook 中文版》V3 P342 第 9.5 章节：<em>定义一个属性可由用户修改的装饰器</em>。</p><p>最后，我们给之前写的函数戴上这顶叫做装饰器的“帽子”。<br><img src= "/img/loading.svg" data-lazy-src="/images/your_hat.jpg" alt="装饰器"></p><h5 id="装饰器使用"><a href="#装饰器使用" class="headerlink" title="装饰器使用"></a>装饰器使用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@find_color_series_by_name(<span class="params">name=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_color_series</span>(<span class="params">rgb_seq</span>):</span></span><br><span class="line">    <span class="keyword">pass</span>    <span class="comment"># 省略重复代码</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    test_color_map = &#123;<span class="string">&#x27;东方红&#x27;</span>: [<span class="number">254</span>, <span class="number">223</span>, <span class="number">225</span>], <span class="string">&#x27;红东方&#x27;</span>: [<span class="number">215</span>, <span class="number">196</span>, <span class="number">187</span>], <span class="string">&#x27;方红东&#x27;</span>: [<span class="number">86</span>, <span class="number">46</span>, <span class="number">55</span>], <span class="string">&#x27;黄丹&#x27;</span>: [<span class="number">240</span>, <span class="number">94</span>, <span class="number">28</span>],</span><br><span class="line">                      <span class="string">&#x27;万红丛中一点绿&#x27;</span>: [<span class="number">63</span>, <span class="number">43</span>, <span class="number">54</span>]&#125;</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> test_color_map.items():</span><br><span class="line">        find_color_series.set_color_name(k)</span><br><span class="line">        find_color = find_color_series(v)</span><br><span class="line">        print(find_color)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">red</span><br><span class="line">red</span><br><span class="line">red</span><br><span class="line">yellow</span><br><span class="line">green</span><br></pre></td></tr></table></figure></p><h2 id="总结展望"><a href="#总结展望" class="headerlink" title="总结展望"></a>总结展望</h2><p>经过上面的步骤我们完成了颜色的分类，但是这种分类是粗粒度的，结果也可能是不够准确的。如果需要更精准的计算，可能需要建模及算法甚至训练模型去实现，这里不再展开（<del>主要是我不会</del>）。</p><p>如果颜色本身命名错误，如上例中的“万红丛中一点绿”，我们直接走装饰器判断逻辑，就会使计算过滤的逻辑失效。所以我们可以数据分别走两套逻辑，对于两者返回一致的，我们认为这个数据是可信的；对于不一致的部分，我们则需要使用人工智能的“人工”部分对数据进行二次编辑，之后将结果更新上去。</p><h2 id="西风吟"><a href="#西风吟" class="headerlink" title="西风吟"></a>西风吟</h2><ol><li>我们知道 Python 是一门自带电池的语言，关于颜色 rgb 转 hsv，其实 <a href="https://docs.python.org/zh-cn/3.7/library/colorsys.html">官方模块</a> <code>colorsys</code> 中已经有自己的实现，我们需要的只是对数据做相应比例的放大。当然我们也可以在后续逻辑中直接用官方返回的数据划分区域。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import colorsys</span><br><span class="line">&gt;&gt;&gt; colorsys.rgb_to_hsv(0.2, 0.4, 0.4)</span><br><span class="line">(0.5, 0.5, 0.4)</span><br><span class="line">&gt;&gt;&gt; colorsys.hsv_to_rgb(0.5, 0.5, 0.4)</span><br><span class="line">(0.2, 0.4, 0.4)</span><br></pre></td></tr></table></figure></li><li>关于颜色的判断，我们知道色的三原色为 RGB（红绿蓝），而实际颜色是按照不同比例混合的，所以颜色是没有办法真的做明显界线区分的。<blockquote><p>谁能在彩虹里画下紫色结束、橙色开始的分界线呢？我们能清晰地看到颜色的不同，但是究竟在什么地方一种颜色逐渐地混入了另一种颜色呢？理智和疯狂的界限，亦是如此。</p></blockquote></li><li>日常黑男性环节：<br><img src= "/img/loading.svg" data-lazy-src="/images/colors-for-male-and-female.jpg" alt="男生眼中的颜色 vs 女生眼中的颜色"></li></ol><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>🍭 <a href="https://github.com/imoyao/my_practices/tree/master/codes/tell_color_by_rgb">my_practices/codes/tell_color_by_rgb at master · imoyao/my_practices</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/hanshanbuleng/article/details/80383813">从 RGB 到 HSV 的转换详细介绍_人工智能_hanshanbuleng 的博客-CSDN 博客</a></li><li><a href="https://www.v2ex.com/amp/t/153186">知道一个颜色的 RGB 如何归类到特定颜色（如赤橙黄绿青蓝紫黑白灰）？ - V2EX</a></li><li><a href="https://graphicdesign.stackexchange.com/questions/92984/how-can-i-tell-basic-color-a-hex-code-is-closest-to">How can I tell basic color a hex code is closest to? - Graphic Design Stack Exchange</a></li><li><a href="https://stackoverflow.com/questions/4057475/rounding-colour-values-to-the-nearest-of-a-small-set-of-colours/4356523#4356523">algorithm - “Rounding” colour values to the nearest of a small set of colours - Stack Overflow</a></li></ul><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul><li><a href="https://www.guokr.com/article/437666/">青色是什么样子的？| 果壳 科技有意思</a></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="http://www.bosimedia.com/wiki/%E9%A2%9C%E8%89%B2%E5%88%97%E8%A1%A8">颜色列表 - 维基中文镜像，自由的百科全书</a></li><li><a href="http://www.jq22.com/yanshi16883">latex 在线公式编辑器汉化版</a></li><li><a href="https://www.rapidtables.com/convert/color/hsv-to-rgb.html">HSV to RGB conversion | color conversion</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> GUSCSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> 色系 </tag>
            
            <tag> 颜色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国传统色 | 朱砂痣还是白月光，哪个才是我们的心头好？</title>
      <link href="blog/2020-04-13/Traditional-Chinese-Colors/"/>
      <url>blog/2020-04-13/Traditional-Chinese-Colors/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>张爱玲在《红玫瑰与白玫瑰》中这样写道：</p><blockquote><p>也许每一个男子全都有过这样的两个女人，至少两个。娶了红玫瑰，久而久之，红的变了墙上的一抹蚊子血，白的还是”床前明月光”；娶了白玫瑰，白的便是衣服上沾的一粒饭黏子，红的却是心口上一颗朱砂痣。</p></blockquote><p>那么白月光和朱砂痣到底有什么不同呢？嘿嘿，其实这是一篇讲自己开源项目的文章，被标题骗进来的非战斗人员可以选择自行离场啦。😳</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>用于展示中国传统色的网站很多，为什么我还要叠床架屋地去自己造轮子呢？为了练手，顺便打发自己闲得挠墙的无聊时光。众所周知，人类的本质是复读机。🤬</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li style="list-style: none"><input type="checkbox" checked></input> 使用 Python 收集、整理、去重数据；</li><li style="list-style: none"><input type="checkbox"></input> 爬虫，使用 request 模块等；</li></ol><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p> 使用 Vue 编写页面，展示数据；</p><h2 id="具体解决方案介绍"><a href="#具体解决方案介绍" class="headerlink" title="具体解决方案介绍"></a>具体解决方案介绍</h2><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><ol><li>对于网站给出源码的（目前已完成）<br> 直接去源码中拿数据，之后对格式拼装、组合；</li><li>没有源码的（后期开发计划）<ol><li>上爬虫，给👴爬！</li><li>利用 OCR 技术识别文字和 PIL 获取颜色对应的 RGB 值数据；<ul><li><a href="https://kite.com/python/answers/how-get-the-rgb-values-of-an-image-using-pil-in-python">Kite - AI Autocomplete for Python</a></li></ul></li></ol></li></ol><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="颜色名称"><a href="#颜色名称" class="headerlink" title="颜色名称"></a>颜色名称</h4><p>使用 pypinyin 获取名称拼音，使用 zhtools 保存颜色简体和繁体两种名称；</p><h4 id="文字显示"><a href="#文字显示" class="headerlink" title="文字显示"></a>文字显示</h4><ul><li><a href="https://blog.csdn.net/sinat_38184748/article/details/93002587">判断颜色为深颜色还是浅颜色来动态调整 app 文字和图标颜色_移动开发_YD-10-NG 的博客-CSDN 博客</a><br>颜色描述使用默认描述，当默认描述为空时，调用<a href="https://www.jinrishici.com/">今日诗词 API</a>，如果调用失败，则显示默认诗句。</li></ul><h4 id="色系判断"><a href="#色系判断" class="headerlink" title="色系判断"></a>色系判断</h4><p>将颜色的 RGB 色值转化为 HSV，之后通过 hue 去判断彩色的色值，用明度去判断黑白灰。<br>参见 <a href="/blog/2020-04-15/tell-me-rgb-values-nearest-color-with-Python/">如何判断一个颜色属于什么色系？</a></p><h2 id="更新字典"><a href="#更新字典" class="headerlink" title="更新字典"></a>更新字典</h2><p><a href="https://codereview.stackexchange.com/questions/209202/merge-two-list-of-dicts-with-same-key">python - Merge two list of dicts with same key - Code Review Stack Exchange</a><br>将数据按照色系分组<br><a href="https://www.geeksforgeeks.org/python-merging-two-list-of-dictionaries/">Python | Merging two list of dictionaries - GeeksforGeeks</a></p><h2 id="添加“亿点点”细节"><a href="#添加“亿点点”细节" class="headerlink" title="添加“亿点点”细节"></a>添加“亿点点”细节</h2><p>使用 Vue 将页面展示出来，此处参考了开源项目 <a href="https://github.com/ssshooter/nippon-color">ssshooter/nippon-color</a>。写后端的你硬让我写前端，我看你是在为难我胖虎。<br><img src= "/img/loading.svg" data-lazy-src="/images/draw_horse.jpeg" alt="如何画马"></p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src= "/img/loading.svg" data-lazy-src="/images/zhusha.png" alt="朱砂|电脑"></p><p><img src= "/img/loading.svg" data-lazy-src="/images/iPad-with-case-on-wood-table.png" alt="青葱|平板"></p><p><img src= "/img/loading.svg" data-lazy-src="/images/yuebai.png" alt="月白|手机"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>Github 支持部署 docs 目录为项目文档，我们直接修改<code>vue.config.js</code>设置<code>outputDir: &#39;docs&#39;</code>，把其导出到 docs 目录，<br>参见<a href="https://github.blog/2016-08-17-simpler-github-pages-publishing/">Simpler GitHub Pages publishing - The GitHub Blog</a></p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>还有很多点可以完善：</p><ol><li>多音字词组的正确发音。如<a href="https://colors.masantu.com/#/?colorId=100115112">卡其绿</a></li><li>更加权威的数据来源。</li></ol><h2 id="Help-Wanted"><a href="#Help-Wanted" class="headerlink" title="Help Wanted"></a>Help Wanted</h2><h3 id="我是开发者"><a href="#我是开发者" class="headerlink" title="我是开发者"></a>我是开发者</h3><p>你可以 fork 此仓库之后修改<a href="https://github.com/imoyao/GUSCSS/blob/dev/_data/amend.json">amend 文件</a> 中的 data 字段，修改是以 id 为参考基准，只需要提交修改新值，不修改值直接不写（我们会使用 Python 字典的 update 方法 patch 更新数据），之后提交 pr 即可。当然，也欢迎提交代码逻辑及实现中不合理的地方及 bug 修复。更多参考 <a href="https://github.com/imoyao/GUSCSS/projects/1">此处</a><br>参考数据样式：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;1847572&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;朱砂&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;tra_name&quot;</span>: <span class="string">&quot;硃砂&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;color_series&quot;</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;pinyin&quot;</span>: <span class="string">&quot;zhū shā&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;font_color&quot;</span>: <span class="string">&quot;dark&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;is_bright&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;rgb&quot;</span>: [</span><br><span class="line">    <span class="number">184</span>,</span><br><span class="line">    <span class="number">75</span>,</span><br><span class="line">    <span class="number">72</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;hex&quot;</span>: <span class="string">&quot;#FF461F&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cmyk&quot;</span>: [</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">59</span>,</span><br><span class="line">    <span class="number">61</span>,</span><br><span class="line">    <span class="number">28</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;figure&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="我是普通用户"><a href="#我是普通用户" class="headerlink" title="我是普通用户"></a>我是普通用户</h3><p>如果你不会写代码，但是发现页面中有严重错误。如果你有 Github 账号，可以去 <a href="https://github.com/imoyao/GUSCSS/issues">issue 页面</a> 提交反馈；如果你没有账号或者不会使用 Github，可以通过留言方式或者直接发邮件 <a href="mailto:immoyao@gmail.com">给我</a> 进行反馈，邮箱地址：<a href="mailto:immoyao@gmail.com">immoyao@gmail.com</a>。</p><h3 id="我除了钱啥都没"><a href="#我除了钱啥都没" class="headerlink" title="我除了钱啥都没"></a>我除了钱啥都没</h3><p>请使用微信（WeChat）扫描下方二维码与我一起做<strong>公益</strong>吧！<br><img src= "/img/loading.svg" data-lazy-src="https://www.masantu.com/img/PublicWelfare-for-Children.jpg" alt="腾讯公益"><br>当然，还可以去我的博客找赞赏码给我打钱。（慢慢找去吧）😊</p><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><ul><li><a href="http://boxingp.github.io/traditional-chinese-colors/">Traditional Chinese Colors | 中国传统颜色</a><br>  源码：<a href="https://github.com/BoxingP/traditional-chinese-colors">BoxingP/traditional-chinese-colors</a></li><li><a href="https://colors.flinhong.com/">colors-source.yml</a>| <a href="https://htmlcss.jp/color/china.html">中国の伝統色 320 色</a><br>  源码：<a href="https://github.com/flinhong/colors/">flinhong/colors: 青山绿水，白草红叶黄花。颜色都该有它好听的名字！</a></li><li><a href="https://ssshooter.github.io/nippon-color/#/">nipponcolor</a><br>  源码 <a href="https://github.com/ssshooter/nippon-color">ssshooter/nippon-color: nippon-color PWA build with vue-cli 3</a></li><li><a href="https://colors.ichuantong.cn/">中国传统颜色手册 | Chinese Color Cheatsheet</a><br>  源码：<a href="https://github.com/zerosoul/chinese-colors">zerosoul/chinese-colors: 🇨🇳🎨Chinese traditional color cheatsheet online</a></li><li><a href="https://www.douban.com/doulist/34917690/">乾隆色谱——从历史档案复原清代色彩</a></li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="https://colors.masantu.com/#/">GUSCSS | 给你点颜色瞧瞧</a></li><li><a href="https://github.com/imoyao/GUSCSS">源码 · imoyao/GUSCSS</a></li></ul><blockquote><p>娇蕊放下茶杯，立起身，从碗橱里取出一罐子花生酱来，笑道：“我是个粗人，喜欢吃粗东西。”振保笑道：“哎呀！这东西最富于滋养料，最使人发胖的！”娇蕊开了盖子道：“我顶喜欢犯法。你不赞成犯法么？”振保把手按住玻璃罐，道：“不。”娇蕊踌躇半日，笑道：“这样罢，你给我面包上塌一点。你不会给我太多的。”振保见她做出那楚楚可怜的样子，不禁笑了起来，果真为她的面包上敷了花生酱。娇蕊从茶杯口上凝视着他，抿着嘴一笑道：“你知道我为什么支使你？要是我自己，也许一下子意志坚强起来，塌得极薄极薄。可是你，我知道你不好意思给我塌得太少的！”两人同声大笑。</p><footer><strong>张爱玲</strong><cite>《红玫瑰与白玫瑰》</cite></footer></blockquote>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> GUSCSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次 base64 编码错误问题</title>
      <link href="blog/2020-03-24/python-ignore-incorrect-padding-error-when-base64-decoding/"/>
      <url>blog/2020-03-24/python-ignore-incorrect-padding-error-when-base64-decoding/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>出现这个问题，首先看一下是不是把 encode 后的字符错误地传给了 decode 方法，如果是的话，请调用正确的方法，如果不是，可以尝试使用下面的代码。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bytes2JsonEncoder</span>(<span class="params">json.JSONEncoder</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解决：TypeError: Object of type bytes is not JSON serializable</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">bytes</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(obj, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> json.JSONEncoder.default(self, obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B64Crypty</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    密码混淆与反混淆</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64encode</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(plain_text.encode())</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pw_decode</span>(<span class="params">cipher_text</span>):</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64decode(cipher_text).decode()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64decode_wrap</span>(<span class="params">cipher_text</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        # 解决问题：python-ignore-incorrect-padding-error-when-base64-decoding</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Wrapper for base64.b64decode</span></span><br><span class="line"><span class="string">        - Expects Base64 encoded ASCII data as input argument cipher_text</span></span><br><span class="line"><span class="string">        - Returns decoded data as bytes object</span></span><br><span class="line"><span class="string">        - Expects cipher_text uses standard Base64 place-values:  A-Z; a-z; 0-9; +; /.</span></span><br><span class="line"><span class="string">        - Robust to missing Base64 encoded characters</span></span><br><span class="line"><span class="string">          - Will not return original data in this case</span></span><br><span class="line"><span class="string">        - Not necessarily robust to corrupted characters in cipher_text</span></span><br><span class="line"><span class="string">        - Throws MISSING_B64_NOT_ASCII exception if cipher_text contains non-ASCII</span></span><br><span class="line"><span class="string">          characters; implemented via bytes.decode and/or str.encode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Ensure argument is either bytes ASCII or str ASCII</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(cipher_text, <span class="built_in">bytes</span>):</span><br><span class="line">                arg_string = cipher_text.decode(<span class="string">&#x27;ASCII&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(cipher_text, <span class="built_in">str</span>):</span><br><span class="line">                arg_string = cipher_text.encode().decode(<span class="string">&#x27;ASCII&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.MISSING_B64_NOT_ASCII(</span><br><span class="line">                <span class="string">&#x27;Method missing_b64.b64decode Base64 encoded argument is neither ASCII bytes nor ASCII str&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Remove any = chars, and try padding with two =s</span></span><br><span class="line">            <span class="comment"># - This will work with (len(cipher_text&#x27;) % 4) of 0, 2 or 3</span></span><br><span class="line">            <span class="comment">#  - cipher_text&#x27; is cipher_text with all non-Base64-standard-place-values removed</span></span><br><span class="line">            decode_ret = base64.b64decode(arg_string.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;==&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> base64.binascii.Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># If that failed, padd with A==</span></span><br><span class="line">            <span class="comment"># - This will work with (len(cipher_text&#x27;) % 4) of 1</span></span><br><span class="line">            decode_ret = base64.b64decode(arg_string.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;A==&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="comment"># Execution should never get here</span></span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(decode_ret, <span class="built_in">bytes</span>):  <span class="comment"># for py3</span></span><br><span class="line">            <span class="keyword">return</span> decode_ret.encode()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> decode_ret</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://stackoverflow.com/questions/2941995/python-ignore-incorrect-padding-error-when-base64-decoding">Python: Ignore ‘Incorrect padding’ error when base64 decoding - Stack Overflow</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装 Octopus 版 CEPH（使用 cephadm）</title>
      <link href="blog/2020-03-22/cephadm-install-Ceph-Octopus-on-CentOS7/"/>
      <url>blog/2020-03-22/cephadm-install-Ceph-Octopus-on-CentOS7/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>系统信息  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cepho ~]# uname -r</span><br><span class="line">3.10.0-957.el7.x86_64</span><br><span class="line">[root@cepho ~]# cat &#x2F;etc&#x2F;system-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br></pre></td></tr></table></figure></li><li>Python3 版本  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cepho ~]# python3 -V</span><br><span class="line">Python 3.8.2</span><br></pre></td></tr></table></figure>  生产环境中我们没有必要追求最新，安装 3.6 版本即可。当然如果你追求最新，那么就用最新的也好。</li><li>Docker 信息  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cepho ~]# docker --version</span><br><span class="line">Docker version 19.03.8, build afacb8b</span><br></pre></td></tr></table></figure></li><li>CEPH 版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph --version</span><br><span class="line">ceph version 15.1.1 (4536217610b4c55c08a293e67f5ae1f1129190be) octopus (rc)</span><br></pre></td></tr></table></figure>因为系统安装的是普通版本而不是最小安装，所以 ntp、lvm 管理工具等默认已经安装。</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Cephadm 通过 SSH 从管理守护程序连接到主机来部署和管理 Ceph 群集，以添加、删除或更新 Ceph 守护程序的容器。它不依赖于外部配置或编排工具，如 Ansible、Rook 或 Salt。</p><p>Cephadm 管理 Ceph 群集的整个生命周期。它首先在单个节点（一个<code>monitor</code>和一个<code>mgr</code>）上引导一个最简的 Ceph 群集，然后使用业务流程接口（后续命令（“day 2” commands））扩展群集以包括所有主机并预配所有 Ceph 守护进程和服务。这可以通过 Ceph 命令行接口 （CLI） 或 dashboard  （GUI） 执行完成。</p><h2 id="发展动向"><a href="#发展动向" class="headerlink" title="发展动向"></a>发展动向</h2><p>目前 cephadm 仍然在进一步开发，功能正在有条不紊地进行着，使用 cephadm 是一个差强人意的选择。<br>以下组件的 Cephadm 管理目前得到良好支持：</p><ul><li>Monitors</li><li>Managers</li><li>OSDs</li><li>CephFS 文件系统</li><li>rbd-mirror</li></ul><p>以下组件正在使用 cephadm，但文档并不像我们希望的那么完整，而且在不久的将来使用可能会有一些变化：</p><ul><li>RGW</li><li>dmcrypt Osds</li></ul><p>Cephadm 对以下功能的支持仍在开发中：</p><ul><li>NFS</li><li>iSCSI</li></ul><p>如果遇到问题，您始终可以使用：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph orch pause</span><br></pre></td></tr></table></figure><br>或使用如下指令完全关闭 cephadm：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph orch <span class="built_in">set</span> backend <span class="string">&#x27;&#x27;</span></span><br><span class="line">ceph mgr module <span class="built_in">disable</span> cephadm</span><br></pre></td></tr></table></figure></p><h2 id="安装-cephadm"><a href="#安装-cephadm" class="headerlink" title="安装 cephadm"></a>安装 cephadm</h2><ul><li>下载 cephadm 并赋权<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl --silent --remote-name --location https:&#x2F;&#x2F;github.com&#x2F;ceph&#x2F;ceph&#x2F;raw&#x2F;octopus&#x2F;src&#x2F;cephadm&#x2F;cephadm</span><br><span class="line">chmod +x cephadm</span><br></pre></td></tr></table></figure></li><li><p>添加源信息，指定为 Octopus 版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./cephadm add-repo --release octopus</span><br><span class="line">./cephadm install</span><br></pre></td></tr></table></figure><p>此时会更新 repo 信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;cephadm add-repo --release octopus</span><br><span class="line">INFO:root:Writing repo to &#x2F;etc&#x2F;yum.repos.d&#x2F;ceph.repo...</span><br><span class="line">INFO:cephadm:Enabling EPEL...</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cepho yum.repos.d]# ll -t</span><br><span class="line">total 48</span><br></pre></td></tr></table></figure><p>更新前：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># before</span><br><span class="line">total 36</span><br><span class="line">-rw-r--r--. 1 root root  413 Mar 15 12:36 ceph.repo</span><br><span class="line">-rw-r--r--. 1 root root 1664 Nov 23  2018 CentOS-Base.repo</span><br><span class="line">-rw-r--r--. 1 root root 1309 Nov 23  2018 CentOS-CR.repo</span><br><span class="line">-rw-r--r--. 1 root root  649 Nov 23  2018 CentOS-Debuginfo.repo</span><br><span class="line">-rw-r--r--. 1 root root  314 Nov 23  2018 CentOS-fasttrack.repo</span><br><span class="line">-rw-r--r--. 1 root root  630 Nov 23  2018 CentOS-Media.repo</span><br><span class="line">-rw-r--r--. 1 root root 1331 Nov 23  2018 CentOS-Sources.repo</span><br><span class="line">-rw-r--r--. 1 root root 5701 Nov 23  2018 CentOS-Vault.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># after</span><br><span class="line">-rw-r--r--. 1 root root  477 Mar 22 17:33 ceph.repo</span><br><span class="line">-rw-r--r--. 1 root root 2424 Oct 19 05:57 docker-ce.repo</span><br><span class="line">-rw-r--r--. 1 root root 1050 Sep 18  2019 epel.repo</span><br><span class="line">-rw-r--r--. 1 root root 1149 Sep 18  2019 epel-testing.repo</span><br><span class="line">-rw-r--r--. 1 root root 1664 Nov 23  2018 CentOS-Base.repo</span><br><span class="line">-rw-r--r--. 1 root root 1309 Nov 23  2018 CentOS-CR.repo</span><br><span class="line">-rw-r--r--. 1 root root  649 Nov 23  2018 CentOS-Debuginfo.repo</span><br><span class="line">-rw-r--r--. 1 root root  314 Nov 23  2018 CentOS-fasttrack.repo</span><br><span class="line">-rw-r--r--. 1 root root  630 Nov 23  2018 CentOS-Media.repo</span><br><span class="line">-rw-r--r--. 1 root root 1331 Nov 23  2018 CentOS-Sources.repo</span><br><span class="line">-rw-r--r--. 1 root root 5701 Nov 23  2018 CentOS-Vault.repo</span><br></pre></td></tr></table></figure><p>其中前三行即是更新之后的源信息。</p><div class="note info no-icon modern"><h3 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h3><ol><li>没有装 Python3<br> 执行第一条指令<em>可能</em>报错 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;cephadm add-repo --release octopus</span><br><span class="line">-bash: .&#x2F;cephadm: &#x2F;usr&#x2F;bin&#x2F;python3: bad interpreter: No such file or directory</span><br></pre></td></tr></table></figure> 这是因为系统中缺少 Python3 支持，所以要安装 Python3，关于 Python3 的安装可以参考此处👇<ol><li><a href="https://www.runoob.com/python3/python3-install.html">Python3 环境搭建 | 菜鸟教程</a> </li><li><a href="https://www.cnblogs.com/Jimc/p/10218062.html">安装 Python 所需依赖环境 - 寒爵 - 博客园</a><br>安装之后验证：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -V</span><br></pre></td></tr></table></figure>返回版本信息：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python 3.8.2</span><br></pre></td></tr></table></figure></li></ol></li><li>没有装 podman/docker <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unable to locate any of [&#39;podman&#39;, &#39;docker&#39;]</span><br></pre></td></tr></table></figure> 安装 Docker 参考<a href="https://www.runoob.com/docker/centos-docker-install.html">CentOS Docker 安装 | 菜鸟教程</a><br> 验证 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker --version</span><br><span class="line">Docker version 19.03.8, build afacb8b</span><br></pre></td></tr></table></figure></li></ol></div></li><li><p>安装 cephadm</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;cephadm install</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO:cephadm:Installing packages [&#39;cephadm&#39;]...</span><br></pre></td></tr></table></figure></li><li>验证 cephadm 安装完成  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which cephadm</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;sbin&#x2F;cephadm</span><br></pre></td></tr></table></figure><h2 id="引导新集群"><a href="#引导新集群" class="headerlink" title="引导新集群"></a>引导新集群</h2>你需要知道用于群集的第一个监视器守护程序的 IP 地址。 通常，这是第一台主机的 IP。 如果存在多个网络和接口，请确保选择任何可供访问 Ceph 群集的主机访问的网络和接口。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;ceph</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cephadm bootstrap --mon-ip *&lt;mon-ip&gt;*   # 此处指定moniter地址</span><br></pre></td></tr></table></figure><div class="note warning modern"><p><strong>TODO</strong><br>注意，此处指定为 ssh 登录的 ip 时一直提示端口占用，且 mon 进程一直启不来，后来改成另一个节点之后可以正常部署，需要查阅更多资料确认！</p></div></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cephadm bootstrap --mon-ip 172.18.1.128</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO:cephadm:Using recent ceph image ceph&#x2F;daemon-base:latest</span><br><span class="line">INFO:cephadm:Verifying podman|docker is present...  # 验证podman|docker</span><br><span class="line">INFO:cephadm:Verifying lvm2 is present...           # 验证lvm2</span><br><span class="line">INFO:cephadm:Verifying time synchronization is in place... # 验证时间同步</span><br><span class="line">INFO:cephadm:Unit chronyd.service is enabled and running        # chronyd</span><br><span class="line">INFO:cephadm:Repeating the final host check...</span><br><span class="line">INFO:cephadm:podman|docker (&#x2F;usr&#x2F;bin&#x2F;docker) is present</span><br><span class="line">INFO:cephadm:systemctl is present</span><br><span class="line">INFO:cephadm:lvcreate is present</span><br><span class="line">INFO:cephadm:Unit chronyd.service is enabled and running</span><br><span class="line">INFO:cephadm:Host looks OK</span><br><span class="line">INFO:root:Cluster fsid: d0d73402-6c28-11ea-8165-00505625d3e6    # 生成集群fsid</span><br><span class="line">INFO:cephadm:Verifying IP 172.18.1.128 port 3300 ...</span><br><span class="line">INFO:cephadm:Verifying IP 172.18.1.128 port 6789 ...            # 验证端口</span><br><span class="line">INFO:cephadm:Pulling latest ceph&#x2F;daemon-base:latest container...</span><br><span class="line">INFO:cephadm:Extracting ceph user uid&#x2F;gid from container image...   # pull容器</span><br><span class="line">INFO:cephadm:Creating initial keys...</span><br><span class="line">INFO:cephadm:Creating initial monmap...                     # 初始化keys、monmap</span><br><span class="line">INFO:cephadm:Creating mon...</span><br><span class="line">INFO:cephadm:Waiting for mon to start...</span><br><span class="line">INFO:cephadm:Waiting for mon...                                # 创建并启动mon</span><br><span class="line">INFO:cephadm:Assimilating anything we can from ceph.conf...</span><br><span class="line">INFO:cephadm:Generating new minimal ceph.conf...                # 生成配置</span><br><span class="line">INFO:cephadm:Restarting the monitor...                      </span><br><span class="line">INFO:cephadm:Creating mgr...                                    # 创建mgr</span><br><span class="line">INFO:cephadm:Non-zero exit code 1 from &#x2F;usr&#x2F;bin&#x2F;firewall-cmd --permanent --query-service ceph</span><br><span class="line">INFO:cephadm:&#x2F;usr&#x2F;bin&#x2F;firewall-cmd:stdout no</span><br><span class="line">INFO:cephadm:Enabling firewalld service ceph in current zone...</span><br><span class="line">INFO:cephadm:Non-zero exit code 1 from &#x2F;usr&#x2F;bin&#x2F;firewall-cmd --permanent --query-port 8080&#x2F;tcp</span><br><span class="line">INFO:cephadm:&#x2F;usr&#x2F;bin&#x2F;firewall-cmd:stdout no</span><br><span class="line">INFO:cephadm:Enabling firewalld port 8080&#x2F;tcp in current zone...</span><br><span class="line">INFO:cephadm:Non-zero exit code 1 from &#x2F;usr&#x2F;bin&#x2F;firewall-cmd --permanent --query-port 8443&#x2F;tcp</span><br><span class="line">INFO:cephadm:&#x2F;usr&#x2F;bin&#x2F;firewall-cmd:stdout no</span><br><span class="line">INFO:cephadm:Enabling firewalld port 8443&#x2F;tcp in current zone...</span><br><span class="line">INFO:cephadm:Non-zero exit code 1 from &#x2F;usr&#x2F;bin&#x2F;firewall-cmd --permanent --query-port 9283&#x2F;tcp</span><br><span class="line">INFO:cephadm:&#x2F;usr&#x2F;bin&#x2F;firewall-cmd:stdout no</span><br><span class="line">INFO:cephadm:Enabling firewalld port 9283&#x2F;tcp in current zone...        # 打开防火墙端口</span><br><span class="line">INFO:cephadm:Wrote keyring to ceph.client.admin.keyring</span><br><span class="line">INFO:cephadm:Wrote config to ceph.conf</span><br><span class="line">INFO:cephadm:Waiting for mgr to start...</span><br><span class="line">INFO:cephadm:Waiting for mgr...</span><br><span class="line">INFO:cephadm:mgr not available, waiting (1&#x2F;10)...</span><br><span class="line">……</span><br><span class="line">INFO:cephadm:mgr not available, waiting (5&#x2F;10)...</span><br><span class="line">INFO:cephadm:Enabling cephadm module...</span><br><span class="line">INFO:cephadm:Waiting for the mgr to restart...                          # 重启mgr</span><br><span class="line">INFO:cephadm:Waiting for Mgr epoch 5...</span><br><span class="line">INFO:cephadm:Setting orchestrator backend to cephadm...</span><br><span class="line">INFO:cephadm:Generating ssh key...</span><br><span class="line">INFO:cephadm:Wrote public SSH key to to ceph.pub</span><br><span class="line">INFO:cephadm:Adding key to root@localhost&#39;s authorized_keys...</span><br><span class="line">INFO:cephadm:Adding host cepho...</span><br><span class="line">INFO:cephadm:Deploying mon service with default placement...</span><br><span class="line">INFO:cephadm:Deploying mgr service with default placement...</span><br><span class="line">INFO:cephadm:Deploying crash service with default placement...</span><br><span class="line">INFO:cephadm:Enabling the dashboard module...</span><br><span class="line">INFO:cephadm:Waiting for the mgr to restart...</span><br><span class="line">INFO:cephadm:Waiting for Mgr epoch 9...</span><br><span class="line">INFO:cephadm:Generating a dashboard self-signed certificate...      # 初始化dashboard</span><br><span class="line">INFO:cephadm:Creating initial admin user...</span><br><span class="line">INFO:cephadm:Fetching dashboard port number...</span><br><span class="line">INFO:cephadm:Ceph Dashboard is now available at:</span><br><span class="line"></span><br><span class="line">     URL: https:&#x2F;&#x2F;cepho:8443&#x2F;</span><br><span class="line">    User: admin</span><br><span class="line">Password: tkl507cgh3                                            # 初始密码，默认登录之后需要修改</span><br><span class="line"></span><br><span class="line">INFO:cephadm:You can access the Ceph CLI with:</span><br><span class="line"></span><br><span class="line">sudo &#x2F;usr&#x2F;sbin&#x2F;cephadm shell --fsid d0d73402-6c28-11ea-8165-00505625d3e6 -c ceph.conf -k ceph.client.admin.keyring</span><br><span class="line"></span><br><span class="line">INFO:cephadm:Please consider enabling telemetry to help improve Ceph:</span><br><span class="line"></span><br><span class="line">ceph telemetry on</span><br><span class="line"></span><br><span class="line">For more information see:</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;docs.ceph.com&#x2F;docs&#x2F;master&#x2F;mgr&#x2F;telemetry&#x2F;</span><br><span class="line"></span><br><span class="line">INFO:cephadm:Bootstrap complete.</span><br></pre></td></tr></table></figure><p>该命令会做以下操作：</p><ul><li><p>在本地主机上为集群创建<code>mon</code>和<code>mgr</code>守护程序。</p></li><li><p>为 Ceph 集群生成一个新的 SSH 密钥，并将其添加到<code>root</code>用户的<code>/root/.ssh/authorized_keys</code>文件中。</p></li><li><p>将与新集群通信所需的最小配置文件写入<code>/etc/ceph/ceph.conf</code>。</p></li><li><p>将<code>client.admin</code>管理（特权！）秘密密钥的副本写入<code>/etc/ceph/ceph.client.admin.keyring</code>。</p></li><li><p>将公共密钥的副本写入<code>/etc/ceph/ceph.pub</code>。</p></li></ul><div class="note info modern"><p><strong>注意</strong>： 执行上述命令会去 docker 上面拉取最新的<code>ceph/daemon-base</code>，国内需要换源。具体操作如下：</p><ol><li>编辑或新建配置文件：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>写入：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot; : [</span><br><span class="line">    &quot;http:&#x2F;&#x2F;ovfftd6p.mirror.aliyuncs.com&quot;,</span><br><span class="line">    &quot;http:&#x2F;&#x2F;registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;http:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;</span><br><span class="line">],</span><br><span class="line">&quot;insecure-registries&quot; : [</span><br><span class="line">    &quot;registry.docker-cn.com&quot;,</span><br><span class="line">    &quot;docker.mirrors.ustc.edu.cn&quot;</span><br><span class="line">],</span><br><span class="line">&quot;debug&quot; : true,</span><br><span class="line">&quot;experimental&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重启 docker 服务 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li>手动拉取镜像<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ceph/daemon-base</span><br></pre></td></tr></table></figure>由于本人第一次使用 docker，所以一些表述可能存在问题。</li></ol></div><h3 id="访问-dashboard"><a href="#访问-dashboard" class="headerlink" title="访问 dashboard"></a>访问 dashboard</h3><p><img src= "/img/loading.svg" data-lazy-src="/images/Ceph-dashboard-overview.png" alt="overview"><br><img src= "/img/loading.svg" data-lazy-src="/images/Ceph-dashboard-host.png" alt="Ceph-dashboard"></p><p>默认的引导行为适用于绝大多数用户。 请参阅以下有关选项对某些用户可能有用的一些，或运行 <code>cephadm bootstrap -h</code> 以查看所有可用选项：</p><ul><li><p>方便起见，Bootstrap 会将访问新集群所需的文件写到<code>/etc/ceph</code>中，以便主机本身安装的任何 Ceph 软件包（例如，访问命令行界面）都可以轻松找到它们。</p><p>但是，使用<code>cephadm</code>部署的守护程序容器根本不需要<code>/etc/ceph</code>。 使用<code>--output-dir *directory&gt;*</code>选项将它们放在不同的目录（如.&lt;当前目录&gt;）中，避免与同一主机上的现有 Ceph 配置（<code>cephadm</code>或其他）之间的潜在冲突。</p></li><li><p>我们可以将任何初始 Ceph 配置选项传递到新集群，方法是将它们放置在标准<code>ini</code>样式的配置文件中，并使用<code>--config * &lt;config-file&gt; *</code>选项。</p></li></ul><h3 id="使能-CEPH-CLI"><a href="#使能-CEPH-CLI" class="headerlink" title="使能 CEPH CLI"></a>使能 CEPH CLI</h3><p>ceph 官方建议启用对 ceph 命令的轻松访问，我们有以下途径可以实现：</p><ul><li>调用 cephadm shell 命令启动容器中的 bash  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;usr&#x2F;sbin&#x2F;cephadm shell --fsid d0d73402-6c28-11ea-8165-00505625d3e6 -c ceph.conf -k ceph.client.admin.keyring</span><br></pre></td></tr></table></figure>  其中的<code>fsid</code>可以在上一条返回信息中找到，或者在<code>ceph.conf</code>中进行查看。  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO:cephadm:Using recent ceph image ceph&#x2F;daemon-base:latest</span><br></pre></td></tr></table></figure></li><li>安装 ceph-common 包，包含了<code>ceph</code>, <code>rbd</code>, <code>mount.ceph</code> (用于挂载 CephFS 文件系统)等；  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cephadm add-repo --release octopus          # 此处会更新源，如果需要使用国内源请不要执行</span><br><span class="line">yum install ceph-common # 此处官网暂为cephadm install xxx，但是我执行之后报错，所以修改。</span><br></pre></td></tr></table></figure></li><li>调用<code>ceph</code>命令查看集群状态  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceph -s</span><br><span class="line">cluster:</span><br><span class="line">    id:     d0d73402-6c28-11ea-8165-00505625d3e6</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            Reduced data availability: 1 pg inactive</span><br><span class="line">            OSD count 0 &lt; osd_pool_default_size 3</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">    mon: 1 daemons, quorum cepho (age 20m)</span><br><span class="line">    mgr: cepho.lgqcve(active, since 18m)</span><br><span class="line">    osd: 0 osds: 0 up, 0 in</span><br><span class="line"></span><br><span class="line">data:</span><br><span class="line">    pools:   1 pools, 1 pgs</span><br><span class="line">    objects: 0 objects, 0 B</span><br><span class="line">    usage:   0 B used, 0 B &#x2F; 0 B avail</span><br><span class="line">    pgs:     100.000% pgs unknown</span><br><span class="line">            1 unknown</span><br></pre></td></tr></table></figure></li><li>在<code>cephadm shell</code>中查看集群健康信息  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ceph: root@cepho &#x2F;]# ceph health</span><br><span class="line">HEALTH_WARN Reduced data availability: 1 pg inactive; OSD count 0 &lt; osd_pool_default_size 3</span><br></pre></td></tr></table></figure></li></ul><hr><p>TODO:以下待验证</p><h3 id="集群添加新节点"><a href="#集群添加新节点" class="headerlink" title="集群添加新节点"></a>集群添加新节点</h3><ol><li>在新的节点拷贝认证<code>ssh key</code>认证密钥<br>在 bash 中执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -f -i ceph.pub root@*&lt;new-host&gt;*    # 新节点的hostname</span><br></pre></td></tr></table></figure></li><li>告诉新节点是集群的一部分<br>在 cephadm shell 中执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceph orch host add *newhost*</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2></li></ol><ul><li><a href="https://docs.ceph.com/en/latest/cephadm/">Deploying a new Ceph cluster — Ceph Documentation</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CEPH </tag>
            
            <tag> CentOS7 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 ceph-deploy 部署一个指定版本号的 ceph 集群</title>
      <link href="blog/2020-03-16/ceph-deploy-install-a-specific-minor-version-ceph/"/>
      <url>blog/2020-03-16/ceph-deploy-install-a-specific-minor-version-ceph/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <a href="/blog/2020-03-15/ceph-deploy-install-ceph-nautilus-on-CentOS7/">上文</a> 中我们使用 ceph-deploy 搭建 ceph 集群。而当前版本 ceph-deploy 不支持用户指定小版本号，使用<code>--release</code>只支持安装最新稳定版。当然我们可以手动搭建，但是操作下来耗时且容易出错，毕竟<del>人生苦短（我太懒了）</del>。</p><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ol><li>系统版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin-node my-cluster]# cat &#x2F;etc&#x2F;system-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br><span class="line">[root@admin-node my-cluster]# uname -a</span><br><span class="line">Linux admin-node 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure></li><li>ceph 版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@admin-node my-cluster]# ceph -v</span><br><span class="line">ceph version 14.2.5 (ad5bd132e1492173c85fda2cc863152730b16a92) nautilus (stable)</span><br></pre></td></tr></table></figure><h2 id="在本地配置离线存储库"><a href="#在本地配置离线存储库" class="headerlink" title="在本地配置离线存储库"></a>在本地配置离线存储库</h2></li></ol><h3 id="安装网络服务"><a href="#安装网络服务" class="headerlink" title="安装网络服务"></a>安装网络服务</h3><ol><li>安装 nginx<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure></li><li>启动 nginx 并设置开机自启<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl enable nginx</span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure></li><li><p>添加防火墙规则</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --permanent --add-service=http</span><br><span class="line">firewall-cmd --zone=public --permanent --add-service=https</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="创建本地镜像源"><a href="#创建本地镜像源" class="headerlink" title="创建本地镜像源"></a>创建本地镜像源</h3></li><li><p>安装必需工具</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install createrepo yum-utils wget -y</span><br></pre></td></tr></table></figure></li><li>创建镜像源文件夹<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;var&#x2F;www&#x2F;html&#x2F;repos&#x2F;&#123;SRPMS,x86_64,noarch&#125;</span><br></pre></td></tr></table></figure></li><li>下载相应软件包<br>可以手动在以下 3 个链接中下载各自架构下的相应软件包<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;download.ceph.com&#x2F;rpm-nautilus&#x2F;el7&#x2F;SRPMS&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;download.ceph.com&#x2F;rpm-nautilus&#x2F;el7&#x2F;noarch&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;download.ceph.com&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;</span><br></pre></td></tr></table></figure>另外，我们也可以从阿里云的镜像源链接<code>http://mirrors.aliyun.com/ceph/</code>下载（国内用户你懂的）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-base-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-common-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-debuginfo-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-fuse-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-mds-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-mgr-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-mon-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-osd-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-radosgw-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-resource-agents-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-selinux-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;ceph-test-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;cephfs-java-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;libcephfs-devel-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;libcephfs2-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;libcephfs_jni-devel-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;libcephfs_jni1-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;librados-devel-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;librados2-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;libradosstriper-devel-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;libradosstriper1-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;librbd-devel-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;librbd1-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;librgw-devel-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;librgw2-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python-ceph-compat-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python-cephfs-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python-rados-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python-rbd-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python-rgw-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python34-ceph-argparse-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python34-cephfs-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python34-rados-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python34-rbd-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python34-rgw-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;rados-objclass-devel-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;rbd-fuse-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;rbd-mirror-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;rbd-nbd-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;x86_64&#x2F;python-ceph-argparse-14.2.5-0.el7.x86_64.rpm</span><br><span class="line">wget https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;noarch&#x2F;ceph-deploy-2.0.0-0.noarch.rpm</span><br></pre></td></tr></table></figure></li><li>执行镜像源创建<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">createrepo -v &#x2F;var&#x2F;www&#x2F;html&#x2F;repos&#x2F;SRPMS&#x2F;</span><br><span class="line">createrepo -v &#x2F;var&#x2F;www&#x2F;html&#x2F;repos&#x2F;x86_64&#x2F;</span><br><span class="line">createrepo -v &#x2F;var&#x2F;www&#x2F;html&#x2F;repos&#x2F;noarch&#x2F;</span><br></pre></td></tr></table></figure></li><li>修改 Nginx 配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;repos.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen   80;</span><br><span class="line">        server_name  172.18.1.101;# 修改此处为本机地址</span><br><span class="line">        root   &#x2F;var&#x2F;www&#x2F;html&#x2F;repos;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                index  index.php index.html index.htm;</span><br><span class="line">                autoindex on;#enable listing of directory index</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>重新启动 nginx，然后再次访问本地源测试<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><img src= "/img/loading.svg" data-lazy-src="/images/pasted-0.png" alt="upload successful"></li></ol><h2 id="安装-Ceph"><a href="#安装-Ceph" class="headerlink" title="安装 Ceph"></a>安装 Ceph</h2><ol><li>声明本地仓库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi&#x2F;etc&#x2F;yum.repos.d&#x2F;ceph.repo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ceph]</span><br><span class="line">name&#x3D;Ceph packages for $basearch</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;172.18.1.101&#x2F;x86_64&#x2F;# 注意此处ip为镜像源的ip</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">priority&#x3D;2</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;download.ceph.com&#x2F;keys&#x2F;release.asc</span><br><span class="line"></span><br><span class="line">[ceph-noarch]</span><br><span class="line">name&#x3D;Ceph noarch packages</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;172.18.1.101&#x2F;noarch</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">priority&#x3D;2</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;download.ceph.com&#x2F;keys&#x2F;release.asc</span><br><span class="line"></span><br><span class="line">[ceph-source]</span><br><span class="line">name&#x3D;Ceph source packages</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;172.18.1.101&#x2F;SRPMS</span><br><span class="line">enabled&#x3D;0</span><br><span class="line">priority&#x3D;2</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;download.ceph.com&#x2F;keys&#x2F;release.asc</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li>然后像<a href="/blog/2020-03-15/ceph-deploy-install-ceph-nautilus-on-CentOS7/">往常一样</a>进行 ceph 部署<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install ceph-deploy</span><br></pre></td></tr></table></figure></li><li>转到使用 <code>ceph-deploy</code> 安装的步骤，我们将使用 <strong>–repo-url</strong> 替换命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceph-deploy install --repo-url http:&#x2F;&#x2F;172.18.1.101&#x2F; ceph1 ceph2 ceph3</span><br></pre></td></tr></table></figure></li><li>安装完成后，再次检查<code>ceph version</code>版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[node2][DEBUG ] </span><br><span class="line">[node2][DEBUG ] Complete!</span><br><span class="line">[node2][INFO  ] Running command: sudo ceph --version</span><br><span class="line">[node2][DEBUG ] ceph version 14.2.5 (ad5bd132e1492173c85fda2cc863152730b16a92) nautilus (stable)</span><br><span class="line">[root@admin-node x86_64]# ceph -v</span><br><span class="line">ceph version 14.2.5 (ad5bd132e1492173c85fda2cc863152730b16a92) nautilus (stable)</span><br></pre></td></tr></table></figure><h2 id="本地镜像安装"><a href="#本地镜像安装" class="headerlink" title="本地镜像安装"></a>本地镜像安装</h2></li><li>下载源文件到本地<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ceph-mirror</span><br><span class="line">cd ceph-mirror</span><br><span class="line"></span><br><span class="line">yum install --downloadonly --downloaddir&#x3D;. ceph</span><br><span class="line">yum install --downloadonly --downloaddir&#x3D;. yum-plugin-priorities</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对文件进行删选<br>仅保留我们需要的版本的 rpm 文件，其余的删除（否则同步会很耗时）</p></li><li><p>使用<code>--local-mirror</code>指定使用本地镜像安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceph-deploy install --local-mirror &#123;&#x2F;opt&#x2F;ceph-mirror&#x2F;rpm-nautilus&#x2F;el7&#x2F;&#125; node1 nodex</span><br></pre></td></tr></table></figure><p>后面一次跟的指令为本地 mirror 所在路径、节点 hostname（多个或一个）</p></li></ol><h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><p>同步时同步文件报内存不足<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[cdnode1][INFO  ] syncing file: aarch64&#x2F;ceph-debuginfo-14.2.2-0.el7.aarch64.rpm</span><br><span class="line">[ceph_deploy][ERROR ] Traceback (most recent call last):</span><br><span class="line">[ceph_deploy][ERROR ]   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ceph_deploy&#x2F;util&#x2F;decorators.py&quot;, line 69, in newfunc</span><br><span class="line"></span><br><span class="line"># 太长省略</span><br><span class="line">[ceph_deploy][ERROR ]     return _Serializer().save(obj)</span><br><span class="line">[ceph_deploy][ERROR ]   File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ceph_deploy&#x2F;lib&#x2F;vendor&#x2F;remoto&#x2F;lib&#x2F;vendor&#x2F;execnet&#x2F;gateway_base.py&quot;, line 1312, in save</span><br><span class="line">[ceph_deploy][ERROR ]     return type(streamlist[0])().join(streamlist)</span><br><span class="line">[ceph_deploy][ERROR ] MemoryError</span><br><span class="line">[ceph_deploy][ERROR ] </span><br><span class="line">Error in sys.exitfunc:</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>分析了一下，这个文件大概 2G 大小，如果直接 rsync 的话会导致内存爆炸，所以我的处理办法是删除<code>ceph-debuginfo</code>这个文件，后续有问题再装。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> <code>ceph-deploy</code> 可以通过三种指定方式部署 ceph,分别为<code>ceph-deploy install --release</code>（用于指定大版本号如<code>nautilus</code>）、<code>ceph-deploy install --testing</code>(用于最新开发版本)和<code>ceph-deploy install --dev</code>（用于指定分支或者 tag）,起初我以为<code>--dev</code>可以满足我指定版本号的需求，后来一顿操作发现报错:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ceph_deploy.hosts.centos.install][DEBUG ] fetching repo information from: https:&#x2F;&#x2F;shaman.ceph.com&#x2F;api&#x2F;repos&#x2F;ceph&#x2F;14.5.2&#x2F;latest&#x2F;centos&#x2F;7&#x2F;repo&#x2F;?arch&#x3D;x86_64</span><br><span class="line">[ceph_deploy.util.net][ERROR ] repository might not be available yet</span><br><span class="line">[ceph_deploy][ERROR ] RuntimeError: HTTP Error 504: Gateway Timeout, failed to fetch https:&#x2F;&#x2F;shaman.ceph.com&#x2F;api&#x2F;repos&#x2F;ceph&#x2F;14.5.2&#x2F;latest&#x2F;centos&#x2F;7&#x2F;repo&#x2F;?arch&#x3D;x86_64</span><br></pre></td></tr></table></figure><br>访问<code>https://shaman.ceph.com/api/repos/ceph</code>发现可用库里根本没有对应版本。通过阅读<a href="https://docs.ceph.com/en/latest/man/8/ceph-deploy/#install">install — ceph-deploy 2.0.2 documentation</a>我们知道可以指定 <code>--repo-url</code>搭配<code>--gpg-url</code>使用指定源链接的方式指定本地源安装。此外，使用<code>--local-mirrors</code>指定本地源的方式也可以参考。参见<a href="https://docs.ceph.com/ceph-deploy/docs/install.html#local-mirrors">install — ceph-deploy 2.0.2 documentation</a>。</p><p>本文通过搭建本地镜像源然后指定的方式间接完成了 ceph 集群的安装。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.ceph.com/projects/ceph-deploy/en/latest/#installation">install — ceph-deploy 2.0.2 documentation</a></li><li><a href="https://github.com/thaonguyenvan/notes-storage/blob/51e6eeb02c34767ad84d350c2462bdccc179c35c/ceph/setup/ceph-deploy-specific-version.md">ceph-deploy-specific-version.md at thaonguyenvan/notes-storage</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CEPH </tag>
            
            <tag> ceph-deploy </tag>
            
            <tag> CentOS7 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 部署 nautilus 版 CEPH（使用 ceph-deploy）</title>
      <link href="blog/2020-03-15/ceph-deploy-install-ceph-nautilus-on-CentOS7/"/>
      <url>blog/2020-03-15/ceph-deploy-install-ceph-nautilus-on-CentOS7/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>项目开发中准备基于 ceph-mgr 中的 dashboard 做二次开发，本文主要记录搭建 ceph 环境的过程。</p><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>节点配置中参考官网搭建示例，基于实体机内存状况限制，使用三节点最小节点配置，具体如下：<br><img src= "/img/loading.svg" data-lazy-src="/images/ceph-1.png" alt="ceph 节点组成说明"></p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li>配置网络为静态 ip<br>此步请自行完成；<br> 此步配置之后需要保证：<ol><li>开机网络自启；</li><li>各节点之间的网络连通性（<code>ping &#123;hostname&#125;</code>）</li></ol></li><li>添加 CEPH 的 yum 源<br>国内使用阿里源加快下载<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/ceph.repo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Ceph]</span><br><span class="line">name&#x3D;Ceph packages for $basearch</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;$basearch</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">type&#x3D;rpm-md</span><br><span class="line"></span><br><span class="line">[Ceph-noarch]</span><br><span class="line">name&#x3D;Ceph noarch packages</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;noarch</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">type&#x3D;rpm-md</span><br><span class="line"></span><br><span class="line">[ceph-source]</span><br><span class="line">name&#x3D;Ceph source packages</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-nautilus&#x2F;el7&#x2F;SRPMS</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">type&#x3D;rpm-md</span><br></pre></td></tr></table></figure></li><li>更新 epel.repo<br>添加 EPEL 的阿里镜像源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>或者手动编辑</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/epel-7.repo</span><br></pre></td></tr></table></figure><p>直接写入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[epel]</span><br><span class="line">name&#x3D;Extra Packages for Enterprise Linux 7 - $basearch</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;7&#x2F;$basearch</span><br><span class="line">failovermethod&#x3D;priority</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-EPEL-7</span><br><span class="line"></span><br><span class="line">[epel-debuginfo]</span><br><span class="line">name&#x3D;Extra Packages for Enterprise Linux 7 - $basearch - Debug</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;7&#x2F;$basearch&#x2F;debug</span><br><span class="line">failovermethod&#x3D;priority</span><br><span class="line">enabled&#x3D;0</span><br><span class="line">gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line"></span><br><span class="line">[epel-source]</span><br><span class="line">name&#x3D;Extra Packages for Enterprise Linux 7 - $basearch - Source</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;7&#x2F;SRPMS</span><br><span class="line">failovermethod&#x3D;priority</span><br><span class="line">enabled&#x3D;0</span><br><span class="line">gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-EPEL-7</span><br><span class="line">gpgcheck&#x3D;0</span><br></pre></td></tr></table></figure></p><ol start="4"><li>更新源并安装 ceph-deploy<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install ceph-deploy -y</span><br></pre></td></tr></table></figure></li><li>安装 NTP<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install ntp ntpdate ntp-doc -y</span><br></pre></td></tr></table></figure>配置 ntp 服务（此步省略）</li><li>安装 SSH 服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install openssh-server -y</span><br></pre></td></tr></table></figure></li><li>修改 host<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">172.18.1.101 admin-node</span><br><span class="line">172.18.1.102 node1</span><br><span class="line">172.18.1.103 node2</span><br></pre></td></tr></table></figure><h3 id="创建-CEPH-DEPLOY-用户（以-cephadm-为例）"><a href="#创建-CEPH-DEPLOY-用户（以-cephadm-为例）" class="headerlink" title="创建 CEPH DEPLOY 用户（以 cephadm 为例）"></a>创建 CEPH DEPLOY 用户（以 cephadm 为例）</h3></li></ol><div class="note warning modern"><p><strong>注意</strong></p><ul><li>各节点都要创建该用户；</li><li>不要使用 ceph 作为部署用户的用户名；</li><li>用户必须赋权 root 用户；</li></ul></div><ol><li>创建用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 本例中使用 cephadm</span><br><span class="line">sudo useradd -d &#x2F;home&#x2F;cephadm -m cephadm </span><br><span class="line">sudo passwd cephadm</span><br></pre></td></tr></table></figure></li><li>sudo 赋权<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;cephadm ALL &#x3D; (root) NOPASSWD:ALL&quot;  &gt; &#x2F;etc&#x2F;sudoers.d&#x2F;cephadm</span><br><span class="line">sudo chmod 0440 &#x2F;etc&#x2F;sudoers.d&#x2F;cephadm</span><br></pre></td></tr></table></figure>更多信息参阅官方文档 <a href="https://ceph.readthedocs.io/en/latest/install/ceph-deploy/quick-start-preflight/#create-a-ceph-deploy-user">Preflight Checklist — Ceph Documentation</a></li></ol><hr><h3 id="配置节点"><a href="#配置节点" class="headerlink" title="配置节点"></a>配置节点</h3><p> 修改两个子节点的网络<br><div class="note warning modern"><p>如果使用克隆虚拟机，请注意一定要修改 MAC 地址绑定<br><a href="https://blog.csdn.net/lp102811/article/details/80204321">虚拟机克隆以及 IP，MAC 地址的修改_运维_进击的菜鸟-CSDN 博客</a></p></div><br>注意：以下操作只在 admin-node 节点执行即可；</p><ol><li>切换到 cephadm 用户<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su cephadm</span><br></pre></td></tr></table></figure></li><li>建立 admin-node 节点到两个子节点的 ssh 互信<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成密钥（一路回车）</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝</span></span><br><span class="line">ssh-copy-id cephadm@node1</span><br><span class="line">ssh-copy-id cephadm@node2</span><br></pre></td></tr></table></figure></li><li>验证免密登录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh node1 </span><br><span class="line">ssh node2</span><br></pre></td></tr></table></figure>注意：免密登录比较重要，如果是测试环境，可以直接使用 root 用户的话，上面指令改为<code>ssh-copy-id root@node1</code>去建立互信关系。</li><li>此步为建议步骤<br>编辑<code>~/.ssh/config</code>，防止每次使用 cephadm 用户执行操作时手动输入，如果你有安全方面的顾虑，也可以执行时再输入。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host node1</span><br><span class="line">   Hostname node1</span><br><span class="line">   User cephadm</span><br><span class="line">Host node2</span><br><span class="line">   Hostname node2</span><br><span class="line">   User cephadm</span><br><span class="line">Host node3</span><br><span class="line">   Hostname node3</span><br><span class="line">   User cephadm</span><br></pre></td></tr></table></figure>其中 Host 后面跟你的部署的节点的 hostname，User 后面跟刚才新建的用户名（本例中即 cephadm）</li></ol><h3 id="防火墙端口"><a href="#防火墙端口" class="headerlink" title="防火墙端口"></a>防火墙端口</h3><p>你可以选择直接关闭防火墙，也可以选择开放防火墙端口。以下以开放防火墙端口为例：</p><ol><li>在 monitor 节点<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=ceph-mon --permanent</span><br></pre></td></tr></table></figure></li><li>在 OSDs 和 MDSs 节点<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone&#x3D;public --add-service&#x3D;ceph --permanent</span><br></pre></td></tr></table></figure></li><li>配置立即生效<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="TTY"><a href="#TTY" class="headerlink" title="TTY"></a>TTY</h3>使用<code>sudo visudo</code>打开<code>sudoers</code>文件（注意不要用编辑器打开而是使用专用命令），定位到<code>Defaults requiretty</code>设置，修改为 <code>Defaults:ceph !requiretty</code></li></ol><h3 id="设置-SELINUX-为-Permissive"><a href="#设置-SELINUX-为-Permissive" class="headerlink" title="设置 SELINUX 为 Permissive"></a>设置 SELINUX 为 Permissive</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo setenforce 0</span><br></pre></td></tr></table></figure><h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><p>在管理节点上创建一个目录，以维护 ceph-deploy 为集群生成的配置文件和密钥。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir my-cluster</span><br><span class="line">cd my-cluster</span><br></pre></td></tr></table></figure><br><div class="note warning modern"><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>以后执行 ceph-deploy 的指令都应该在该目录下进行；</li><li>请不要使用 sudo 调用 ceph-deploy；如果你以其他用户身份进行部署操作，不要以 root 身份运行它，因为它不会发出远程主机上所需的 sudo 命令。</li></ol></div></p><h3 id="清除环境"><a href="#清除环境" class="headerlink" title="清除环境"></a>清除环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceph-deploy purge node1 node2</span><br><span class="line">ceph-deploy purgedata node1 node2</span><br><span class="line">ceph-deploy forgetkeys</span><br><span class="line">rm ceph.* -rf</span><br></pre></td></tr></table></figure><div class="note warning modern"><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Bad owner or permissions on &#x2F;home&#x2F;cephadm&#x2F;.ssh&#x2F;config</span><br><span class="line">[ceph_deploy][ERROR ] RuntimeError: connecting to host: cnode1 resulted in errors: HostNotFound cnode1</span><br></pre></td></tr></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>确认节点开机？确认是以 cephadm 用户登录？之后执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 600 /home/cephadm/.ssh/config</span><br></pre></td></tr></table></figure><br>然后重复执行上一步。</p></div><p>此步骤会清除节点之间的 ceph 环境，相当于初始化一个全新的安装环境。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol><li>在<code>my-cluster</code>管理节点执行创建部署节点<br>指定的节点名称为 hostname, fqdn 或者 hostname:fqdn，如果不了解 FQDN 的含义可以参考：<br><a href="https://www.cnblogs.com/videring/articles/7025867.html">关于 hostname 和 fqdn 的区别和获取及设置 - 邹天得 - 博客园</a><br>本例中管理节点<code>hostname</code>为 admin-node，此处应该为你执行 ceph-deploy 操作的节点 hostname。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceph-deploy new admin-node</span><br></pre></td></tr></table></figure>输出如下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root  200 Mar 15 16:33 ceph.conf</span><br><span class="line">-rw-r--r--. 1 root root 3014 Mar 15 16:33 ceph-deploy-ceph.log</span><br><span class="line">-rw-------. 1 root root   73 Mar 15 16:33 ceph.mon.keyring</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>遇到报错<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;bin&#x2F;ceph-deploy&quot;, line 18, in &lt;module&gt;</span><br><span class="line">    from ceph_deploy.cli import main</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ceph_deploy&#x2F;cli.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    import pkg_resources</span><br><span class="line">ImportError: No module named pkg_resources</span><br></pre></td></tr></table></figure><br>安装<code>distribute</code>。如果国内源太慢，可以参考此文<a href="https://www.masantu.com/wiki/%E6%8D%A2%E6%BA%90/pip/">Python 换源操作 | 别院牧志</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果没有安装pip，先安装pip</span></span><br><span class="line">yum install python-pip </span><br><span class="line">pip install distribute</span><br></pre></td></tr></table></figure><br>或者参考此处：<a href="https://stackoverflow.com/questions/7446187/no-module-named-pkg-resources">python - No module named pkg_resources - Stack Overflow</a></p></div></li><li>修改集群配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ceph.conf</span><br></pre></td></tr></table></figure>如果有多个网络接口，需要在 Ceph 配置文件的<code>[global]</code>一节下添加<code>public network</code>设置，这也是官网建议我们的配置。具体参见<a href="https://docs.ceph.com/docs/nautilus/rados/configuration/network-config-ref/">Network Configuration Reference — Ceph Documentation</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">fsid &#x3D; 52420c57-bf82-4ca9-9184-a38e2fab427e</span><br><span class="line">mon_initial_members &#x3D; admin-node</span><br><span class="line">mon_host &#x3D; 172.18.1.101</span><br><span class="line">auth_cluster_required &#x3D; cephx</span><br><span class="line">auth_service_required &#x3D; cephx</span><br><span class="line">auth_client_required &#x3D; cephx</span><br><span class="line">osd pool default size &#x3D; 2  #增加默认副本数为 2</span><br><span class="line">public network &#x3D; 172.18.1.0&#x2F;24 # 添加整个子网段</span><br></pre></td></tr></table></figure>如果使用 ipv6 网络，则追加如下内容<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ms <span class="built_in">bind</span> ipv6 = <span class="literal">true</span> &gt;&gt; ceph.conf</span><br></pre></td></tr></table></figure><h3 id="安装-ceph"><a href="#安装-ceph" class="headerlink" title="安装 ceph"></a>安装 ceph</h3>admin-node 节点执行，ceph-deploy 自动去各节点安装 ceph 环境<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceph-deploy install admin-node node1 node2</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h4><div class="note danger modern"><ol><li>网络不通<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 太长省略</span><br><span class="line">[admin-node][WARNIN]             yum-config-manager --save --setopt&#x3D;&lt;repoid&gt;.skip_if_unavailable&#x3D;true</span><br><span class="line">[admin-node][WARNIN] </span><br><span class="line">[admin-node][WARNIN] Cannot find a valid baseurl for repo: base&#x2F;7&#x2F;x86_64</span><br><span class="line">[admin-node][ERROR ] RuntimeError: command returned non-zero exit status: 1</span><br><span class="line">[ceph_deploy][ERROR ] RuntimeError: Failed to execute command: yum -y install epel-release</span><br></pre></td></tr></table></figure>遇到此错误，先排查网络是否联通（<code>ping www.baidu.com</code>），如果不通，则修改网络，否则，添加 DNS 解析配置；<br>参见：</li></ol><ul><li><a href="https://www.jianshu.com/p/50f0fb206cf7">用 yum 安装软件提示 cannot find a valid baseurl for repo:base/7/x86_64 的解决方法 - 简书</a></li><li><a href="https://www.cnblogs.com/linnuo/p/6257204.html">小白解决 CENTOS7 错误:Cannot find a valid baseurl for repo: base/7/x86_6 - 林诺欧巴 - 博客园</a><br>上面的方法提供了两种方案：a):直接修改网卡配置；b):修改 <code>cat /etc/resolv.conf</code><br>我使用 a 方案时候重启网络<code>systemctl restart network</code>发现域名解析配置文件已经被修改了。鄙人不擅长网络。<br>此外，如果使用非 root 用户部署，一定要保证部署用户（本例中的 cephadm）可以正常 sudo！</li></ul><ol start="2"><li>重新配置 epel.repo<br>进入<code>/etc/yum.repos.d</code>中删除<code>epel.repo</code>和<code>epel-testing.repo</code>重新安装</li></ol></div><hr><div class="note info modern"><p>本人在实践时发现默认安装最新稳定版本 ceph，而假如需要安装指定小版本的 ceph，可以参考<a href="/blog/2020-03-16/ceph-deploy-install-a-specific-minor-version-ceph/">此文</a>。</p></div><p>执行到上面的时候可能会遇到报错，一定要耐心排查保证没有<code>ERROR</code>之后再进行下一步！</p><h3 id="初始化-monitor-节点并收集所有密钥"><a href="#初始化-monitor-节点并收集所有密钥" class="headerlink" title="初始化 monitor 节点并收集所有密钥"></a>初始化 monitor 节点并收集所有密钥</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph-deploy mon create-initial</span><br></pre></td></tr></table></figure><p>此时目录下文件为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">total 44</span><br><span class="line">-rw-------. 1 root root   113 Mar 15 19:36 ceph.bootstrap-mds.keyring</span><br><span class="line">-rw-------. 1 root root   113 Mar 15 19:36 ceph.bootstrap-mgr.keyring</span><br><span class="line">-rw-------. 1 root root   113 Mar 15 19:36 ceph.bootstrap-osd.keyring</span><br><span class="line">-rw-------. 1 root root   113 Mar 15 19:36 ceph.bootstrap-rgw.keyring</span><br><span class="line">-rw-------. 1 root root   151 Mar 15 19:36 ceph.client.admin.keyring</span><br><span class="line">-rw-r--r--. 1 root root   226 Mar 15 18:27 ceph.conf</span><br><span class="line">-rw-r--r--. 1 root root 16137 Mar 15 19:36 ceph-deploy-ceph.log</span><br><span class="line">-rw-------. 1 root root    73 Mar 15 18:26 ceph.mon.keyring</span><br></pre></td></tr></table></figure></p><h3 id="部署-manager-守护线程"><a href="#部署-manager-守护线程" class="headerlink" title="部署 manager 守护线程"></a>部署 manager 守护线程</h3><p>这是 nautilus 版新加进程，此处创建 mgr 主要是为了后续 ceph-dashboard 使用。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph-deploy mgr create admin-node</span><br></pre></td></tr></table></figure><hr><div class="note danger modern"><p>在创建 mgr 节点的时候遇到显示<code>HostNotFound</code>错误，使用<code>vi /etc/sysconfig/network</code>修改 hostname 之后保证与上文中<code>/etc/hosts</code>配置相同，重新运行即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph_deploy.mgr][DEBUG ] Deploying mgr, cluster ceph hosts node1:node1</span><br><span class="line">ssh: connect to host node1 port 22: Connection timed out</span><br><span class="line">[ceph_deploy.mgr][ERROR ] connecting to host: node1 resulted in errors: HostNotFound node1</span><br><span class="line">[ceph_deploy][ERROR ] GenericError: Failed to create 1 MGRs</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="查看-ceph-工作状态"><a href="#查看-ceph-工作状态" class="headerlink" title="查看 ceph 工作状态"></a>查看 ceph 工作状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph -s</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster:</span><br><span class="line">  id:     91c3049f-7500-4840-beaf-e57ab240d1d5</span><br><span class="line">  health: HEALTH_OK</span><br><span class="line"> </span><br><span class="line">services:</span><br><span class="line">  mon: 1 daemons, quorum admin-node (age 98m)</span><br><span class="line">  mgr: admin-node(active, since 5s)</span><br><span class="line">  osd: 0 osds: 0 up, 0 in</span><br><span class="line"> </span><br><span class="line">data:</span><br><span class="line">  pools:   0 pools, 0 pgs</span><br><span class="line">  objects: 0 objects, 0 B</span><br><span class="line">  usage:   0 B used, 0 B &#x2F; 0 B avail</span><br><span class="line">  pgs:     </span><br></pre></td></tr></table></figure><p>此时，集群已经部署成功，但是还没有存储节点，<code>革命尚未成功，同志仍需努力</code>。<br><div class="note warning modern"><p>今天重新部署遇到报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ceph -s</span><br><span class="line">[errno 2] error connecting to the cluster</span><br></pre></td></tr></table></figure><br>现象描述：不加 sudo 执行下面的指令显示受限，加 sudo 之后可以获取到 ceph 的状态，很奇怪，暂时没有找到解决办法。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ceph --connect-timeout=25 --cluster=ceph --admin-daemon=/var/run/ceph/ceph-mon.cnode0.asok mon_status</span><br></pre></td></tr></table></figure></p></div></p><h3 id="添加-OSD-节点"><a href="#添加-OSD-节点" class="headerlink" title="添加 OSD 节点"></a>添加 OSD 节点</h3><ol><li>获取集群节点可用磁盘列表<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph-deploy disk list node1 node2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf</span><br><span class="line">[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy disk list node1 node2</span><br><span class="line">[ceph_deploy.cli][INFO  ] ceph-deploy options:</span><br><span class="line">[ceph_deploy.cli][INFO  ]  username                      : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  verbose                       : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  debug                         : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  overwrite_conf                : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  subcommand                    : list</span><br><span class="line">[ceph_deploy.cli][INFO  ]  quiet                         : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f8d2e53be60&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cluster                       : ceph</span><br><span class="line">[ceph_deploy.cli][INFO  ]  host                          : [&#39;node1&#39;, &#39;node2&#39;]</span><br><span class="line">[ceph_deploy.cli][INFO  ]  func                          : &lt;function disk at 0x7f8d2e99e320&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  ceph_conf                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  default_release               : False</span><br><span class="line">[node1][DEBUG ] connection detected need for sudo</span><br><span class="line">[node1][DEBUG ] connected to host: node1 </span><br><span class="line">[node1][DEBUG ] detect platform information from remote host</span><br><span class="line">[node1][DEBUG ] detect machine type</span><br><span class="line">[node1][DEBUG ] find the location of an executable</span><br><span class="line">[node1][INFO  ] Running command: sudo fdisk -l</span><br><span class="line">[node1][INFO  ] Disk &#x2F;dev&#x2F;sda: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">[node1][INFO  ] Disk &#x2F;dev&#x2F;mapper&#x2F;centos-root: 18.2 GB, 18249416704 bytes, 35643392 sectors</span><br><span class="line">[node1][INFO  ] Disk &#x2F;dev&#x2F;mapper&#x2F;centos-swap: 2147 MB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">[node2][DEBUG ] connection detected need for sudo</span><br><span class="line">[node2][DEBUG ] connected to host: node2 </span><br><span class="line">[node2][DEBUG ] detect platform information from remote host</span><br><span class="line">[node2][DEBUG ] detect machine type</span><br><span class="line">[node2][DEBUG ] find the location of an executable</span><br><span class="line">[node2][INFO  ] Running command: sudo fdisk -l</span><br><span class="line">[node2][INFO  ] Disk &#x2F;dev&#x2F;sda: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">[node2][INFO  ] Disk &#x2F;dev&#x2F;mapper&#x2F;centos-root: 18.2 GB, 18249416704 bytes, 35643392 sectors</span><br><span class="line">[node2][INFO  ] Disk &#x2F;dev&#x2F;mapper&#x2F;centos-swap: 2147 MB, 2147483648 bytes, 4194304 sectors</span><br></pre></td></tr></table></figure></li><li>添加磁盘（可选）<br>除了系统盘没有可用磁盘！因为我们使用的是虚拟机，可以在 osd 节点直接手动创建一个磁盘，之后查看磁盘如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph-deploy disk list node1 node2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf</span><br><span class="line">[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy disk list node1 node2</span><br><span class="line">[ceph_deploy.cli][INFO  ] ceph-deploy options:</span><br><span class="line">[ceph_deploy.cli][INFO  ]  username                      : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  verbose                       : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  debug                         : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  overwrite_conf                : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  subcommand                    : list</span><br><span class="line">[ceph_deploy.cli][INFO  ]  quiet                         : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fd5f2a89ef0&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cluster                       : ceph</span><br><span class="line">[ceph_deploy.cli][INFO  ]  host                          : [&#39;node1&#39;, &#39;node2&#39;]</span><br><span class="line">[ceph_deploy.cli][INFO  ]  func                          : &lt;function disk at 0x7fd5f2eeb320&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  ceph_conf                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  default_release               : False</span><br><span class="line">[node1][DEBUG ] connection detected need for sudo</span><br><span class="line">[node1][DEBUG ] connected to host: node1 </span><br><span class="line">[node1][DEBUG ] detect platform information from remote host</span><br><span class="line">[node1][DEBUG ] detect machine type</span><br><span class="line">[node1][DEBUG ] find the location of an executable</span><br><span class="line">[node1][INFO  ] Running command: sudo fdisk -l</span><br><span class="line">[node1][INFO  ] Disk &#x2F;dev&#x2F;sda: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">[node1][INFO  ] Disk &#x2F;dev&#x2F;sdb: 5368 MB, 5368709120 bytes, 10485760 sectors</span><br><span class="line">[node1][INFO  ] Disk &#x2F;dev&#x2F;mapper&#x2F;centos-root: 18.2 GB, 18249416704 bytes, 35643392 sectors</span><br><span class="line">[node1][INFO  ] Disk &#x2F;dev&#x2F;mapper&#x2F;centos-swap: 2147 MB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">[node2][DEBUG ] connection detected need for sudo</span><br><span class="line">[node2][DEBUG ] connected to host: node2 </span><br><span class="line">[node2][DEBUG ] detect platform information from remote host</span><br><span class="line">[node2][DEBUG ] detect machine type</span><br><span class="line">[node2][DEBUG ] find the location of an executable</span><br><span class="line">[node2][INFO  ] Running command: sudo fdisk -l</span><br><span class="line">[node2][INFO  ] Disk &#x2F;dev&#x2F;sda: 21.5 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">[node2][INFO  ] Disk &#x2F;dev&#x2F;sdb: 8589 MB, 8589934592 bytes, 16777216 sectors</span><br><span class="line">[node2][INFO  ] Disk &#x2F;dev&#x2F;mapper&#x2F;centos-root: 18.2 GB, 18249416704 bytes, 35643392 sectors</span><br><span class="line">[node2][INFO  ] Disk &#x2F;dev&#x2F;mapper&#x2F;centos-swap: 2147 MB, 2147483648 bytes, 4194304 sectors</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>进行下面操作时请确保你的磁盘没有被使用且不包含任何个人重要数据。</p></div></li><li>擦除磁盘的分区表和内容<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph-deploy disk zap node1 /dev/sdb</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf</span><br><span class="line">[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy disk zap node1 &#x2F;dev&#x2F;sdb</span><br><span class="line">[ceph_deploy.cli][INFO  ] ceph-deploy options:</span><br><span class="line">[ceph_deploy.cli][INFO  ]  username                      : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  verbose                       : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  debug                         : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  overwrite_conf                : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  subcommand                    : zap</span><br><span class="line">[ceph_deploy.cli][INFO  ]  quiet                         : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f509bdcbef0&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cluster                       : ceph</span><br><span class="line">[ceph_deploy.cli][INFO  ]  host                          : node1</span><br><span class="line">[ceph_deploy.cli][INFO  ]  func                          : &lt;function disk at 0x7f509c22d320&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  ceph_conf                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  default_release               : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  disk                          : [&#39;&#x2F;dev&#x2F;sdb&#39;]</span><br><span class="line">[ceph_deploy.osd][DEBUG ] zapping &#x2F;dev&#x2F;sdb on node1</span><br><span class="line">[node1][DEBUG ] connection detected need for sudo</span><br><span class="line">[node1][DEBUG ] connected to host: node1 </span><br><span class="line">[node1][DEBUG ] detect platform information from remote host</span><br><span class="line">[node1][DEBUG ] detect machine type</span><br><span class="line">[node1][DEBUG ] find the location of an executable</span><br><span class="line">[ceph_deploy.osd][INFO  ] Distro info: CentOS Linux 7.6.1810 Core</span><br><span class="line">[node1][DEBUG ] zeroing last few blocks of device</span><br><span class="line">[node1][DEBUG ] find the location of an executable</span><br><span class="line">[node1][INFO  ] Running command: sudo &#x2F;usr&#x2F;sbin&#x2F;ceph-volume lvm zap &#x2F;dev&#x2F;sdb</span><br><span class="line">[node1][WARNIN] --&gt; Zapping: &#x2F;dev&#x2F;sdb</span><br><span class="line">[node1][WARNIN] --&gt; --destroy was not specified, but zapping a whole device will remove the partition table</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;dev&#x2F;sdb bs&#x3D;1M count&#x3D;10</span><br><span class="line">[node1][WARNIN] --&gt; Zapping successful for: &lt;Raw Device: &#x2F;dev&#x2F;sdb&gt;</span><br></pre></td></tr></table></figure></li><li>将磁盘作为 OSD 使用<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph-deploy --overwrite-conf osd create --data /dev/sdb node1</span><br></pre></td></tr></table></figure><div class="note info modern"><p>上面的<code>--overwrite-conf</code>是因为遇到报错：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ceph_deploy.osd][ERROR ] RuntimeError: config file /etc/ceph/ceph.conf exists with different content; use --overwrite-conf to overwrite</span><br><span class="line">[ceph_deploy][ERROR ] GenericError: Failed to create 1 OSDs</span><br></pre></td></tr></table></figure><br>所以需要覆写配置，正常操作的时候不需要添加该选项。<br>注意<code>--overwrite-conf</code>指令必须紧跟在后面，而不能写在配置文件后面！</p></div></li></ol><blockquote><p>其中<code>create</code>是<code>prepare</code>和<code>active</code>的合并操作，下面是该命令的解释：<br><code>ceph-deploy osd prepare HOST:DISK[:JOURNAL] [HOST:DISK[:JOURNAL]……]</code><br>为 osd 准备一个目录/磁盘。它会检查是否超过 MAX PIDs,读取 bootstrap-osd 的 key 或者写一个（如果没有找到的话），然后它会使用 ceph-disk 的 prepare 命令来准备磁盘、日志，并且把 OSD 部署到指定的主机上。<br><code>ceph-deploy osd active HOST:DISK[:JOURNAL] [HOST:DISK[:JOURNAL]……]</code><br>激活上一步的 OSD。实际上它会调用 ceph-disk 的 active 命令，这个时候 OSD 会 up and in。<br><code>ceph-deploy osd create HOST:DISK[:JOURNAL] [HOST:DISK[:JOURNAL]……]</code><br>上面两个命令的综合。</p></blockquote><p>返回结果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf</span><br><span class="line">[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy --overwrite-conf osd create --data &#x2F;dev&#x2F;sdb node1</span><br><span class="line">[ceph_deploy.cli][INFO  ] ceph-deploy options:</span><br><span class="line">[ceph_deploy.cli][INFO  ]  verbose                       : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  bluestore                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fa5b902af80&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cluster                       : ceph</span><br><span class="line">[ceph_deploy.cli][INFO  ]  fs_type                       : xfs</span><br><span class="line">[ceph_deploy.cli][INFO  ]  block_wal                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  default_release               : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  username                      : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  journal                       : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  subcommand                    : create</span><br><span class="line">[ceph_deploy.cli][INFO  ]  host                          : node1</span><br><span class="line">[ceph_deploy.cli][INFO  ]  filestore                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  func                          : &lt;function osd at 0x7fa5b94882a8&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  ceph_conf                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  zap_disk                      : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  data                          : &#x2F;dev&#x2F;sdb</span><br><span class="line">[ceph_deploy.cli][INFO  ]  block_db                      : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  dmcrypt                       : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  overwrite_conf                : True</span><br><span class="line">[ceph_deploy.cli][INFO  ]  dmcrypt_key_dir               : &#x2F;etc&#x2F;ceph&#x2F;dmcrypt-keys</span><br><span class="line">[ceph_deploy.cli][INFO  ]  quiet                         : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  debug                         : False</span><br><span class="line">[ceph_deploy.osd][DEBUG ] Creating OSD on cluster ceph with data device &#x2F;dev&#x2F;sdb</span><br><span class="line">[node1][DEBUG ] connection detected need for sudo</span><br><span class="line">[node1][DEBUG ] connected to host: node1</span><br><span class="line">[node1][DEBUG ] detect platform information from remote host</span><br><span class="line">[node1][DEBUG ] detect machine type</span><br><span class="line">[node1][DEBUG ] find the location of an executable</span><br><span class="line">[ceph_deploy.osd][INFO  ] Distro info: CentOS Linux 7.6.1810 Core</span><br><span class="line">[ceph_deploy.osd][DEBUG ] Deploying osd to node1</span><br><span class="line">[node1][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf</span><br><span class="line">[node1][DEBUG ] find the location of an executable</span><br><span class="line">[node1][INFO  ] Running command: sudo &#x2F;usr&#x2F;sbin&#x2F;ceph-volume --cluster ceph lvm create --bluestore --data &#x2F;dev&#x2F;sdb</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;ceph-authtool --gen-print-key</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;ceph --cluster ceph --name client.bootstrap-osd --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-osd&#x2F;ceph.keyring -i - osd new 0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;usr&#x2F;sbin&#x2F;vgcreate -s 1G --force --yes ceph-54716551-34cf-47e3-8f6f-81cce6973a81 &#x2F;dev&#x2F;sdb</span><br><span class="line">[node1][WARNIN]  stdout: Physical volume &quot;&#x2F;dev&#x2F;sdb&quot; successfully created.</span><br><span class="line">[node1][WARNIN]  stdout: Volume group &quot;ceph-54716551-34cf-47e3-8f6f-81cce6973a81&quot; successfully created</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;usr&#x2F;sbin&#x2F;lvcreate --yes -l 100%FREE -n osd-block-0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5 ceph-54716551-34cf-47e3-8f6f-81cce6973a81</span><br><span class="line">[node1][WARNIN]  stdout: Logical volume &quot;osd-block-0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5&quot; created.</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;ceph-authtool --gen-print-key</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;mount -t tmpfs tmpfs &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;usr&#x2F;sbin&#x2F;restorecon &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;chown -h ceph:ceph &#x2F;dev&#x2F;ceph-54716551-34cf-47e3-8f6f-81cce6973a81&#x2F;osd-block-0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;dev&#x2F;dm-2</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;ln -s &#x2F;dev&#x2F;ceph-54716551-34cf-47e3-8f6f-81cce6973a81&#x2F;osd-block-0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5 &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F;block</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;ceph --cluster ceph --name client.bootstrap-osd --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-osd&#x2F;ceph.keyring mon getmap -o &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F;activate.monmap</span><br><span class="line">[node1][WARNIN]  stderr: 2020-03-18 21:22:24.155 7f50487fa700 -1 auth: unable to find a keyring on &#x2F;etc&#x2F;ceph&#x2F;ceph.client.bootstrap-osd.keyring,&#x2F;etc&#x2F;ceph&#x2F;ceph.keyring,&#x2F;etc&#x2F;ceph&#x2F;keyring,&#x2F;etc&#x2F;ceph&#x2F;keyring.bin,: (2) No such file or directory</span><br><span class="line">[node1][WARNIN] 2020-03-18 21:22:24.155 7f50487fa700 -1 AuthRegistry(0x7f5040064e08) no keyring found at &#x2F;etc&#x2F;ceph&#x2F;ceph.client.bootstrap-osd.keyring,&#x2F;etc&#x2F;ceph&#x2F;ceph.keyring,&#x2F;etc&#x2F;ceph&#x2F;keyring,&#x2F;etc&#x2F;ceph&#x2F;keyring.bin,, disabling cephx</span><br><span class="line">[node1][WARNIN]  stderr: got monmap epoch 1</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;ceph-authtool &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F;keyring --create-keyring --name osd.0 --add-key AQCMIHJeddtiNhAAqZHUd554bkav2bT85my+3A&#x3D;&#x3D;</span><br><span class="line">[node1][WARNIN]  stdout: creating &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F;keyring</span><br><span class="line">[node1][WARNIN] added entity osd.0 auth(key&#x3D;AQCMIHJeddtiNhAAqZHUd554bkav2bT85my+3A&#x3D;&#x3D;)</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F;keyring</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F;</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;ceph-osd --cluster ceph --osd-objectstore bluestore --mkfs -i 0 --monmap &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F;activate.monmap --keyfile - --osd-data &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F; --osd-uuid 0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5 --setuser ceph --setgroup ceph</span><br><span class="line">[node1][WARNIN] --&gt; ceph-volume lvm prepare successful for: &#x2F;dev&#x2F;sdb</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;ceph-bluestore-tool --cluster&#x3D;ceph prime-osd-dir --dev &#x2F;dev&#x2F;ceph-54716551-34cf-47e3-8f6f-81cce6973a81&#x2F;osd-block-0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5 --path &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0 --no-mon-config</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;ln -snf &#x2F;dev&#x2F;ceph-54716551-34cf-47e3-8f6f-81cce6973a81&#x2F;osd-block-0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5 &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F;block</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;chown -h ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0&#x2F;block</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;dev&#x2F;dm-2</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-0</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;systemctl enable ceph-volume@lvm-0-0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5</span><br><span class="line">[node1][WARNIN]  stderr: Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;ceph-volume@lvm-0-0e40ac48-72bf-42b7-b1d0-8c7d4ed3a1d5.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-volume@.service.</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;systemctl enable --runtime ceph-osd@0</span><br><span class="line">[node1][WARNIN]  stderr: Created symlink from &#x2F;run&#x2F;systemd&#x2F;system&#x2F;ceph-osd.target.wants&#x2F;ceph-osd@0.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-osd@.service.</span><br><span class="line">[node1][WARNIN] Running command: &#x2F;bin&#x2F;systemctl start ceph-osd@0</span><br><span class="line">[node1][WARNIN] --&gt; ceph-volume lvm activate successful for osd ID: 0</span><br><span class="line">[node1][WARNIN] --&gt; ceph-volume lvm create successful for: &#x2F;dev&#x2F;sdb</span><br><span class="line">[node1][INFO  ] checking OSD status...</span><br><span class="line">[node1][DEBUG ] find the location of an executable</span><br><span class="line">[node1][INFO  ] Running command: sudo &#x2F;bin&#x2F;ceph --cluster&#x3D;ceph osd stat --format&#x3D;json</span><br><span class="line">[ceph_deploy.osd][DEBUG ] Host node1 is now ready for osd use.</span><br></pre></td></tr></table></figure><br>阅读最后一行信息，我们知道 node1 作为 osd 节点被添加进去了。<br><div class="note info modern"><p><strong>注意：</strong><br>如果 zap 磁盘失败，确认磁盘是否之前已经做过 LUN，如果是，需要删除 LV，VG，PV，之后再进行添加 osd 的操作。</p></div></p><ol start="5"><li>查看集群状态<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph -s</span><br></pre></td></tr></table></figure>返回结果如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster:</span><br><span class="line">id:     e32088fc-a761-4aab-b221-fb56d42371dc</span><br><span class="line">health: HEALTH_WARN         # 提示 osd 节点少于预设</span><br><span class="line">        2 daemons have recently crashed</span><br><span class="line">        OSD count 1 &lt; osd_pool_default_size 2</span><br><span class="line">services:</span><br><span class="line">mon: 1 daemons, quorum admin-node (age 3h)</span><br><span class="line">mgr: admin-node(active, since 26m)</span><br><span class="line">osd: 1 osds: 1 up (since 7m), 1 in (since 7m)</span><br><span class="line">data:</span><br><span class="line">pools:   0 pools, 0 pgs</span><br><span class="line">objects: 0 objects, 0 B</span><br><span class="line">usage:   1.0 GiB used, 3.0 GiB &#x2F; 4 GiB avail</span><br><span class="line">pgs:</span><br></pre></td></tr></table></figure>至此，单个的 OSD 节点添加成功。</li></ol><p>但是因为我们在<a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">3.2 节</a>的配置中添加了<code>osd pool default size = 2</code>配置，所以会显示 warning 信息。我们可以重复上面步骤添加 node2 为另一个 OSD 节点之后再次查看集群健康状态：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph health</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HEALTH_OK</span><br></pre></td></tr></table></figure><br>至此，ceph 环境搭建完毕！ </p><hr><h2 id="启用-dashboard"><a href="#启用-dashboard" class="headerlink" title="启用 dashboard"></a>启用 dashboard</h2><ol><li>在所有的 mgr 节点安装 dashbaord<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ceph-mgr-dashboard -y</span><br></pre></td></tr></table></figure></li><li>重启 mgr 功能<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph mgr module <span class="built_in">disable</span> dashboard</span><br><span class="line">ceph mgr module <span class="built_in">enable</span> dashboard</span><br></pre></td></tr></table></figure></li><li>生成并安装自签名的证书<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph dashboard create-self-signed-cert</span><br></pre></td></tr></table></figure></li><li>创建一个 dashboard 登录用户名密码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph dashboard ac-user-create admin admin administrator </span><br></pre></td></tr></table></figure></li><li>查看服务访问方式<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph mgr services</span><br></pre></td></tr></table></figure>返回结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;dashboard&quot;: &quot;https:&#x2F;&#x2F;cnode0:8443&#x2F;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打开防火墙指定端口（8443）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;8443&#x2F;tcp --permanent &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line">firewall-cmd --reload &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></li><li>访问浏览器<br><img src= "/img/loading.svg" data-lazy-src="/images/ceph-dashboard.png" alt="dashboard"></li></ol><h2 id="开启-Object-Gateway-管理功能"><a href="#开启-Object-Gateway-管理功能" class="headerlink" title="开启 Object Gateway 管理功能"></a>开启 Object Gateway 管理功能</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、创建rgw用户</span><br><span class="line"># radosgw-admin user info --uid&#x3D;user01</span><br><span class="line">2、提供Dashboard证书</span><br><span class="line"># ceph dashboard set-rgw-api-access-key $access_key</span><br><span class="line"># ceph dashboard set-rgw-api-secret-key $secret_key</span><br><span class="line">3、配置rgw主机名和端口</span><br><span class="line"># ceph dashboard set-rgw-api-host 192.168.25.224</span><br><span class="line">4、刷新web页面</span><br></pre></td></tr></table></figure><p>以下内容是从别人博客复制的，没有验证。</p><hr><h2 id="安装-grafana"><a href="#安装-grafana" class="headerlink" title="安装 grafana"></a>安装 grafana</h2><ol><li>配置 yum 源文件<br>建议使用清华源：<a href="https://mirror.tuna.tsinghua.edu.cn/help/grafana/">grafana | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/grafana.repo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[grafana]</span><br><span class="line">name&#x3D;grafana</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;grafana&#x2F;yum&#x2F;rpm</span><br><span class="line">repo_gpgcheck&#x3D;0</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br></pre></td></tr></table></figure></li><li>通过 yum 命令安装 grafana<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install grafana</span><br></pre></td></tr></table></figure>3.启动 grafana 并设为开机自启<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start grafana-server.service </span><br><span class="line">systemctl <span class="built_in">enable</span> grafana-server.service</span><br></pre></td></tr></table></figure><h2 id="安装-promethus"><a href="#安装-promethus" class="headerlink" title="安装 promethus"></a>安装 promethus</h2></li><li>下载安装包，<br>下载地址：<code>https://prometheus.io/download/</code></li><li>解压压缩包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar fvxz prometheus-2.14.0.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li>将解压后的目录改名<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv prometheus-2.14.0.linux-amd64 /opt/prometheus</span><br></pre></td></tr></table></figure></li><li>查看 promethus 版本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./prometheus --version</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prometheus, version 2.14.0 (branch: HEAD, revision: edeb7a44cbf745f1d8be4ea6f215e79e651bfe19)</span><br><span class="line">  build user:       root@df2327081015</span><br><span class="line">  build date:       20191111-14:27:12</span><br><span class="line">  go version:       go1.13.4</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>配置系统服务启动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/prometheus.service</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Prometheus Monitoring System</span><br><span class="line">Documentation&#x3D;Prometheus Monitoring System</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;opt&#x2F;prometheus&#x2F;prometheus \</span><br><span class="line">  --config.file &#x2F;opt&#x2F;prometheus&#x2F;prometheus.yml \</span><br><span class="line">  --web.listen-address&#x3D;:9090</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>6、加载系统服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>7、启动服务和添加开机自启动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start prometheus</span><br><span class="line">systemctl <span class="built_in">enable</span> prometheus</span><br></pre></td></tr></table></figure><h2 id="ceph-mgr-prometheus-插件配置"><a href="#ceph-mgr-prometheus-插件配置" class="headerlink" title="ceph mgr prometheus 插件配置"></a>ceph mgr prometheus 插件配置</h2></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph mgr module <span class="built_in">enable</span> prometheus</span><br><span class="line">netstat -nltp | grep mgr 检查端口</span><br><span class="line">curl 127.0.0.1:9283/metrics  测试返回值</span><br></pre></td></tr></table></figure><h2 id="配置-promethus"><a href="#配置-promethus" class="headerlink" title="配置 promethus"></a>配置 promethus</h2><p>1、在 scrape_configs: 配置项下添加</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim prometheus.yml</span><br><span class="line">- job_name: &#39;ceph_cluster&#39;</span><br><span class="line">    honor_labels: true</span><br><span class="line">    scrape_interval: 5s</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#39;192.168.25.224:9283&#39;]</span><br><span class="line">        labels:</span><br><span class="line">          instance: ceph</span><br><span class="line">          </span><br></pre></td></tr></table></figure><p>2、重启 promethus 服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart prometheus</span><br></pre></td></tr></table></figure><p>3、检查 prometheus 服务器中是否添加成功</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 浏览器-》 http:&#x2F;&#x2F;x.x.x.x:9090 -》status -》Targets</span><br></pre></td></tr></table></figure><h2 id="配置-grafana"><a href="#配置-grafana" class="headerlink" title="配置 grafana"></a>配置 grafana</h2><ol><li>浏览器登录 grafana 管理界面  </li><li>添加 data sources，点击 configuration–》data sources  </li><li>添加 dashboard，点击 HOME–》find dashboard on grafana.com  </li><li>搜索 ceph 的 dashboard  </li><li>点击 HOME–》Import dashboard, 选择合适的 dashboard，记录编号</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.ceph.com/en/nautilus/start/quick-start-preflight/">Preflight Checklist — Ceph Documentation</a></li><li><a href="https://docs.ceph.com/en/nautilus/start/quick-ceph-deploy/">Storage Cluster Quick Start — Ceph Documentation</a></li><li><a href="https://www.linuxtechi.com/install-configure-ceph-cluster-centos-7/">Quick Guide to Install and Configure Ceph Cluster on CentOS 7</a></li><li><a href="https://zhuanlan.zhihu.com/p/67832892">单机版 Ceph 环境部署，Linux 平台 - 知乎</a></li><li><a href="https://blog.csdn.net/aixiaoyang168/article/details/78788703">初试 Centos7 上 Ceph 存储集群搭建_运维_哎_小羊的博客-CSDN 博客</a></li><li><a href="https://docs.ceph.com/en/latest/man/8/ceph-deploy/">ceph-deploy – Ceph deployment tool — Ceph Documentation</a></li><li><a href="https://blog.csdn.net/ns2250225/article/details/69978355">ceph-deploy 命令详解_运维_ns2250225-CSDN 博客</a></li><li><a href="https://www.cnblogs.com/passzhang/p/12151835.html">全网最详细的 Ceph14.2.5 集群部署及配置文件详解，快来看看吧-博客园</a></li><li><a href="https://www.cnblogs.com/passzhang/p/12179816.html">Ceph 文件系统-全网最炫酷的 Ceph Dashboard 页面和 Ceph 监控-博客园</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CEPH </tag>
            
            <tag> CentOS7 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何禁用 Angular 中模板驱动表单中的某个字段？</title>
      <link href="blog/2020-03-09/Angular-disable-input-fields-in-template-driven-form/"/>
      <url>blog/2020-03-09/Angular-disable-input-fields-in-template-driven-form/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>书接上回，我们在<a href="/blog/2020-03-06/Angular-orderBy-Object-or-Array/">上文</a>中将表单展示出来了，但是怎么按照逻辑对表单进行限制呢？比如说基本的禁用表单中的某个字段？</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>直接使用<code>disable=true</code>并不能随着 checkbox 的变化使值变化，所以我们需要这么写：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--html--&gt;</span><br><span class="line">&lt;!-- Field control --&gt;</span><br><span class="line">&lt;!-- bool --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;form-group&quot;</span><br><span class="line">  *ngIf&#x3D;&quot;moduleOption.value.type &#x3D;&#x3D;&#x3D; &#39;bool&#39;&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;checkbox checkbox-primary&quot;&gt;</span><br><span class="line">    &lt;input id&#x3D;&quot;&#123;&#123; moduleOption.value.name &#125;&#125;&quot;</span><br><span class="line">           type&#x3D;&quot;checkbox&quot;</span><br><span class="line">           (change)&#x3D;&quot;onUserCheckMode()&quot;</span><br><span class="line">           formControlName&#x3D;&quot;&#123;&#123; moduleOption.value.name &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;label i18n for&#x3D;&quot;&#123;&#123; moduleOption.value.name &#125;&#125;&quot;&gt; Check set mode auto&#x2F;manual.&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; xx.ts</span><br><span class="line">&#x2F;&#x2F;在选择time时，如果自动，则disable部分input</span><br><span class="line">  onUserCheckMode() &#123;</span><br><span class="line">    this.isAuto &#x3D; this.sysSettingForm.value.auto &#x3D;&#x3D; true;</span><br><span class="line">    if (this.isTime) &#123;</span><br><span class="line">      if (this.isAuto &#x3D;&#x3D; true) &#123;</span><br><span class="line">        this.sysSettingForm.get(&#39;ntp_addr&#39;).enable();</span><br><span class="line">        this.sysSettingForm.get(&#39;date&#39;).disable();</span><br><span class="line">        this.sysSettingForm.get(&#39;time&#39;).disable();</span><br><span class="line">        this.sysSettingForm.get(&#39;time_zone&#39;).disable();</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.sysSettingForm.get(&#39;ntp_addr&#39;).disable();</span><br><span class="line">        this.sysSettingForm.get(&#39;date&#39;).enable();</span><br><span class="line">        this.sysSettingForm.get(&#39;time&#39;).enable();</span><br><span class="line">        this.sysSettingForm.get(&#39;time_zone&#39;).enable();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 初始化表格时，对表格也需要disable</span><br><span class="line">  createForm() &#123;</span><br><span class="line">    const controlsConfig &#x3D; &#123;&#125;;</span><br><span class="line">    _.forEach(this.moduleOptions, (moduleOption) &#x3D;&gt; &#123;</span><br><span class="line">      switch (moduleOption.type) &#123;</span><br><span class="line">        case &#39;bool&#39;:</span><br><span class="line">          controlsConfig[moduleOption.name] &#x3D; [this.isAuto, this.getValidators(moduleOption)];</span><br><span class="line">          break;</span><br><span class="line">        default:</span><br><span class="line">          controlsConfig[moduleOption.name] &#x3D; [moduleOption.default_value, this.getValidators(moduleOption)];</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    this.sysSettingForm &#x3D; this.formBuilder.group(controlsConfig);</span><br><span class="line">    if (this.isTime) &#123;</span><br><span class="line">      if (this.isAuto &#x3D;&#x3D; true) &#123;</span><br><span class="line">        this.sysSettingForm.get(&#39;ntp_addr&#39;).enable();</span><br><span class="line">        this.sysSettingForm.get(&#39;date&#39;).disable();</span><br><span class="line">        this.sysSettingForm.get(&#39;time&#39;).disable();</span><br><span class="line">        this.sysSettingForm.get(&#39;time_zone&#39;).disable();</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.sysSettingForm.get(&#39;ntp_addr&#39;).disable();</span><br><span class="line">        this.sysSettingForm.get(&#39;date&#39;).enable();</span><br><span class="line">        this.sysSettingForm.get(&#39;time&#39;).enable();</span><br><span class="line">        this.sysSettingForm.get(&#39;time_zone&#39;).enable();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src= "/img/loading.svg" data-lazy-src="/images/Angular-form-disable.gif" alt="根据选择框disable/enable"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/42840136/disable-input-fields-in-reactive-form">angular - Disable Input fields in reactive form - Stack Overflow</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> form </tag>
            
            <tag> Angular </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 中如何将 Object 或者 Array 按序排列？</title>
      <link href="blog/2020-03-06/Angular-orderBy-Object-or-Array/"/>
      <url>blog/2020-03-06/Angular-orderBy-Object-or-Array/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div class="note warning no-icon modern"><p><strong>注意：</strong><br>Angular 不再提倡使用管道，因为<br>(a) 它们性能堪忧<br>(b) 它们会阻止比较激进的代码最小化(minification)。</p><p>无论是 filter 还是 orderBy 都需要它的参数引用对象型属性。这样的管道必然是非纯管道，并且 Angular 会在几乎每一次变更检测周期中调用非纯管道。</p><p>过滤、 特别是排序是昂贵的操作。 当 Angular 每秒调用很多次这类管道函数时，即使是中等规模的列表都可能<strong>严重降低用户体验</strong>。<br><strong>建议：</strong><br>把你的过滤和排序逻辑挪进组件本身。 组件可以对外暴露一个 filteredHeroes 或 sortedHeroes 属性，这样它就获得控制权，以决定要用什么频度去执行其它辅助逻辑。 你原本准备实现为管道，并在整个应用中共享的那些功能，都能被改写为一个过滤/排序的服务，并注入到组件中。</p></div><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写前端的时候难免遇到数据展示问题，比如 form 表单，在 <a href="https://angular.cn/guide/reactive-forms#generating-form-controls-with-formbuilder">使用 FormBuilder 来生成表单控件</a> 时，当 input 输入框较多的时候，我们可能希望能够自主控制表单字段顺序，此时，则需要对表单字段进行排序。那么，如何实现呢？</p><h2 id="使用内置-orderBy"><a href="#使用内置-orderBy" class="headerlink" title="使用内置 orderBy"></a>使用内置 orderBy</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li ng-repeat&#x3D;&quot;item in items | orderBy:&#39;color&#39;&quot;&gt;&#123;&#123; item.color &#125;&#125;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure><p> 参见<a href="https://www.cnblogs.com/dajianshi/p/4484237.html">AngularJS orderBy 使用要点 - 佣工 7001 - 博客园</a></p><h2 id="没有-orderBy-怎么办"><a href="#没有-orderBy-怎么办" class="headerlink" title="没有 orderBy 怎么办"></a>没有 orderBy 怎么办</h2><p> 从 Angular 开始 orderBy 不再支持，此时无法直接使用。<br> update<a href="https://angular.cn/guide/pipes#appendix-no-filterpipe-or-orderbypipe">附录：没有 FilterPipe 或者 OrderByPipe</a></p><h3 id="使用开源包-ngx-order-pipe"><a href="#使用开源包-ngx-order-pipe" class="headerlink" title="使用开源包 ngx-order-pipe"></a>使用开源包 ngx-order-pipe</h3><p>如果不考虑性能问题，可以使用这样的方式：<br> 参见 <a href="https://github.com/VadimDez/ngx-order-pipe">Angular 5+ Order Pipe</a><br>这个包可以实现列表式数据的排序，具体用法参见文档。<br>注意：可能遇到<code>The pipe &#39;orderBy&#39; could not be found</code>错误，这个可以翻阅 issue 解决，我自己的实践是放在使用的组件的上一层级目录下面。如图：<br><img src= "/img/loading.svg" data-lazy-src="\images\Snipaste_2020-03-06_21-21-52.png" alt=""></p><h3 id="自定义-pipe-造轮子"><a href="#自定义-pipe-造轮子" class="headerlink" title="自定义 pipe 造轮子"></a>自定义 pipe 造轮子</h3><p>参见 <a href="https://blog.csdn.net/u010564430/article/details/54097236">angular2 自定义 pipe ，orderby 实现排序<em>JavaScript</em>兰色的 fire-CSDN 博客</a></p><h3 id="如果返回的值是-Object-怎么办"><a href="#如果返回的值是-Object-怎么办" class="headerlink" title="如果返回的值是 Object 怎么办"></a>如果返回的值是 Object 怎么办</h3><ol><li>使用 KeyValuePipe 组件。参考<a href="https://grokonez.com/frontend/angular/angular-6/angular-6-keyvalue-pipe-ngfor-loop-through-object-map-example">Angular 6 - KeyValue Pipe - *ngFor Loop through Object, Map example » grokonez</a></li><li>将 Object 遍历，然后排序放到列表中，代码参见：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.filter(&#39;orderObjectBy&#39;, function() &#123;</span><br><span class="line">  return function(items, field, reverse) &#123;</span><br><span class="line">    var filtered &#x3D; [];</span><br><span class="line">    angular.forEach(items, function(item) &#123;</span><br><span class="line">      filtered.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line">    filtered.sort(function (a, b) &#123;</span><br><span class="line">      return (a[field] &gt; b[field] ? 1 : -1);</span><br><span class="line">    &#125;);</span><br><span class="line">    if(reverse) filtered.reverse();</span><br><span class="line">      return filtered;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>文章写出来了才翻到官方文档中的建议，所以这篇文章意义也不大了。不过还是做一个记录吧，这也说明<em>使用框架前先阅读官方文档</em>的必要性。</li></ol><p>顺便参考一下怎么实现数组的排序<a href="https://segmentfault.com/a/1190000015961859">sort()方法实现对象数组的排序</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://stackoverflow.com/questions/19387552/angular-cant-make-ng-repeat-orderby-work">javascript - Angular - Can’t make ng-repeat orderBy work - Stack Overflow</a></li><li><a href="https://justinklemm.com/angularjs-filter-ordering-objects-ngrepeat/">AngularJS Filter for Ordering Objects (Hashes) with ngRepeat</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Python 压缩图片(借助 TinyPng 的接口)</title>
      <link href="blog/2020-01-12/Python-Tinify-images/"/>
      <url>blog/2020-01-12/Python-Tinify-images/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div class="note info modern"><p>@Depreciate<br>目前暂时没有这方面的需求。而且在<a href="https://tinypng.com/third-party">Third-Party Solutions</a>中，已经有了相应的 Python 实现，后面有需求的话再继续改写吧。有人有需求的话可以访问下面的链接：</p><ul><li><a href="https://github.com/mbarkhau/tinypng/">mbarkhau/tinypng: Python module and command line tool for tinypng.com</a></li><li><a href="https://github.com/GcsSloop/TinyPng">GcsSloop/TinyPng: 图片批量压缩脚本(Python)</a></li></ul></div><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>看到别人实现了一套，但是只是基于 Python2 的支持，所以打算写一个支持 Python3 的版本。</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>首先去官网申请到 key 👉<a href="https://tinypng.com/developers">tinypng</a>。然后运行脚本。<code>-h</code>查看帮助。</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>看 pipenv 配置</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>在执行前直接配置：程序自动获取（环境变量、文件、代码中）；如果获取失败则提示配置，设置 key 成功，保存到文件中，下一次执行时，直接在文件中直接读取；</p><h3 id="压缩处理"><a href="#压缩处理" class="headerlink" title="压缩处理"></a>压缩处理</h3><ol><li>如果没有给出参数，则递归压缩当前目录下的文件，并保存到<code>tiny</code>目录；</li><li>如果给出参数并且是文件，则压缩单个文件<ol><li>如果没有额外参数，则压缩该文件并保存到 tiny 目录；</li><li>如果给出的额外参数是 -d xxx，则保存到用户指定的目录（目录可以是相对，也可以是绝对路径）；</li><li>如果给出的参数是 -f  xxx，如果为空，则压缩成同名+’_tinified’；如果不为空且有后缀，则验证后缀相同再压缩，否则 raise；如果没有后缀，则判断是否同名，不同名则压缩之后命名新名称文件，否则覆盖提示；</li></ol></li><li>如果给出参数[源目录 目的目录]，则将文件保存到指定目录；</li></ol><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>不带参数<br>  递归压缩当前目录下的所有图片，并保存到 tiny 目录；  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python shrink_img.py</span><br></pre></td></tr></table></figure></li><li><p><code>--key/-k</code><br>从官网申请的 <code>key</code>，提供三种方式导入使用：</p><ol><li>代码中直接填充；</li><li>执行前，命令行导入环境变量；<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> TINY_KEY=<span class="string">&#x27;&#123;&#123;YOU GET FROM tinypng.com &#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li>写进配置文件<code>tiny.key</code>；<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&#123;YOU GET FROM tinypng.com &#125;&#125;&#x27;</span> &gt; tiny.key</span><br></pre></td></tr></table></figure></li><li>执行时，搭配<code>--key</code>指定；如果没有给出，则要求用户输入；</li></ol></li><li><p><code>--file/-f</code><br>  指定图片名称，必须包含文件全名（即包含后缀名）。如果不带额外参数，则表示保存到当前目录下；否则，为用户指定目录下文件。<br>  搭配以下指令使用：</p><ul><li><p><code>--fcover/-c</code><br>  以覆盖形式压缩，即直接将压缩后文件保存为被压缩文件的位置（且同名）；</p></li><li><p><code>--save/-s</code><br>  可选参数，缺省时为<strong>当前执行目录</strong>下的<code>tiny</code>目录；给定参数时，为指定保存的目录；</p></li></ul></li><li><p><code>--dir/-d</code><br>  指定压缩的目录。缺省时为<strong>当前执行目录</strong>下的<code>tiny</code>目录，可选指定目录名称；</p><p>  可选搭配以下参数使用:</p><ul><li><code>--recurse|--not-recurse/-r|-nr</code><br>  递归式压缩指定目录。如果使用<code>--recurse/-r</code>则递归压缩指定目录下所有层级下的图片文件；如果使用<code>--not-recurse/-nr</code>表示只压缩该层级目录；</li><li><code>--save/-s</code><br>  可选参数，可以选择搭配<code>--recurse</code>使用。缺省时为<strong>当前执行目录</strong>下的<code>tiny</code>目录（即和默认不指定目录名称效果相同）；给定参数时，为指定保存的目录；</li></ul></li><li><p>resize<br>只支持单文件 resize,根据官网 API，目前支持<code>--scale/--fit/--cover/--thumb</code>参数，指定该参数中的其一时，表示 resize 的文件名称，后面跟<em>file name 和 width 和/或 height</em>；</p></li></ul><ol><li>其中指定为<code>--scale</code>时，<strong>必须</strong>–width 或者–height；<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--scale FILENAME --width INT</span><br><span class="line">--scale FILENAME --height INT</span><br></pre></td></tr></table></figure></li><li>其余参数时，第一个参数为文件名，剩余两个参数<strong>依次</strong>为<em>width 和 height</em>，不需要显式指定<code>--width</code>和<code>--height</code>；<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--[fit,cover,thumb] FILENAME INT INT</span><br></pre></td></tr></table></figure><h2 id="报错记录"><a href="#报错记录" class="headerlink" title="报错记录"></a>报错记录</h2></li></ol><ul><li><p>TypeError: It would appear that nargs is set to conflict with the composite type arity.</p><p>  参考 <a href="https://stackoverflow.com/questions/40794429/typeerror-it-would-appear-that-nargs-is-set-to-conflict-with-the-composite-type">here</a>和 <a href="https://github.com/pallets/click/issues/472">github issue</a>  </p><blockquote><p>Click does not have a way currently to define default values for nargs &gt; 1 when different types are used. A workaround is to set default=(None, None) for instance.</p></blockquote><p>  也就是说你必须给 tuple 一个默认值为 None 的等长元祖；</p>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> click</span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;--baz&#x27;</span>, <span class="string">&#x27;-b&#x27;</span>,</span></span></span><br><span class="line"><span class="meta"><span class="params">              default=[<span class="literal">None</span>] * <span class="number">6</span>,</span></span></span><br><span class="line"><span class="meta"><span class="params">              <span class="built_in">type</span>=click.Tuple(<span class="params">[<span class="built_in">str</span>, <span class="built_in">str</span>, <span class="built_in">str</span>, <span class="built_in">str</span>, <span class="built_in">str</span>, <span class="built_in">str</span>]</span>),<span class="built_in">help</span>=<span class="string">&#x27;bar&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">baz</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2></li><li style="list-style: none"><input type="checkbox"></input> 组装信息并返回给用户展示出来；<br>  应包含操作类型（file/dir），源与目的文件，key 使用次数等；</li><li style="list-style: none"><input type="checkbox"></input> 递归压缩目录下文件好像有问题；</li><li style="list-style: none"><input type="checkbox"></input> 不要写文件，而是使用 ini/conf 配置；</li><li style="list-style: none"><input type="checkbox"></input> resize 没有测试；</li><li style="list-style: none"><input type="checkbox"></input> 只输入 key 时应该是只设置 key 操作，完成直接 click.Abort()，只有搭配-k，-f 使用，才是更新 key 操作；</li></ul><p>源码中的 click 使用 Google 开源库 <a href="https://github.com/google/python-fire">Python Fire</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://click-docs-zh-cn.readthedocs.io/zh/latest/">欢迎查阅 Click 中文文档 — click</a></li></ul><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ul><li><a href="https://www.zhihu.com/question/19779256">图片无损压缩工具都有哪些？ - 知乎</a></li></ul><hr><blockquote><p>明白事理的人使自己适应世界；不明事理的人想使世界适应自己。所以，所有进步都要靠不明事理的人。</p><footer><strong>萧伯纳</strong></footer></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 压缩图片 </tag>
            
            <tag> TODO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 pip 装包时提示&#39;[Errno 101] Network is unreachable&#39;</title>
      <link href="blog/2020-01-12/pip-install-error-Failed-to-establish-a-new-connection-Network-is-unreachable/"/>
      <url>blog/2020-01-12/pip-install-error-Failed-to-establish-a-new-connection-Network-is-unreachable/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>今天写代码安装依赖的时候，执行<code>pipenv install &#123;SOMETHING&#125;</code>时报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(PyTinyPng) [root@172 PyTinyPng]# pipenv install tinify</span><br><span class="line">Installing tinify…</span><br><span class="line">✔ Installation Succeeded </span><br><span class="line">Pipfile.lock not found, creating…</span><br><span class="line">Locking [dev-packages] dependencies…</span><br><span class="line">Locking [packages] dependencies…</span><br><span class="line">✘ Locking Failed! </span><br><span class="line">#……</span><br><span class="line">[pipenv.exceptions.ResolutionFailure]:       No versions found</span><br><span class="line">[pipenv.exceptions.ResolutionFailure]: Warning: Your dependencies could not be resolved. You likely have a mismatch in your sub-dependencies.</span><br><span class="line">  First try clearing your dependency cache with $ pipenv lock --clear, then try the original command again.</span><br><span class="line"> Alternatively, you can use $ pipenv install --skip-lock to bypass this mechanism, then run $ pipenv graph to inspect the situation.</span><br><span class="line">  Hint: try $ pipenv lock --pre if it is a pre-release dependency.</span><br><span class="line">ERROR: ERROR: Could not find a version that matches tinify</span><br><span class="line">No versions found</span><br><span class="line">Was https:&#x2F;&#x2F;pypi.org&#x2F;simple reachable?</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>给 pip 换清华源<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .pip/pip.conf</span><br><span class="line">vi .pip/pip.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">写入新地址</span></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><br>外部执行测试安装，可以正常安装，进入 pipenv 之后还是报错，修改 Pipfile<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(PyTinyPng) [root@172 PyTinyPng]# find &#x2F; -name Pipfile</span><br><span class="line">&#x2F;root&#x2F;iyblog&#x2F;Pipfile</span><br><span class="line">&#x2F;root&#x2F;Flog&#x2F;Pipfile</span><br><span class="line">&#x2F;root&#x2F;PyTinyPng&#x2F;Pipfile</span><br></pre></td></tr></table></figure><br>修改对应项目的 Pipfile，换成清华源或者阿里源，之后执行<code>pipenv install &#123;SOMETHING&#125;</code>即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网络原因导致 pypi 源不可达，修改 pip.conf 可以使 pip 正常使用，但是 pipenv 有自己的配置文件，不会跟着修改，即使把虚拟环境删了（<code>pipenv --rm</code>），Pipenv 也不会删除（我测试的时候是这样）。所以需要重新生成该文件或者直接修改文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pip </tag>
            
            <tag> pipenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🐍PyTricks | Python 中如何实现列表的行列互转？</title>
      <link href="blog/2020-01-10/how-to-transpose-row-and-column-in-Python/"/>
      <url>blog/2020-01-10/how-to-transpose-row-and-column-in-Python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="笨方法"><a href="#笨方法" class="headerlink" title="笨方法"></a>笨方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_row_to_column</span>(<span class="params">a</span>):</span></span><br><span class="line">    b = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a[<span class="number">0</span>])):</span><br><span class="line">        r = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">            r.append(a[j][item])</span><br><span class="line">        b.append(r)</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h2 id="🐍PyTricks"><a href="#🐍PyTricks" class="headerlink" title="🐍PyTricks"></a>🐍PyTricks</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">row_2_column</span>(<span class="params">row_list</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>(<span class="built_in">list</span>,<span class="built_in">zip</span>(*row_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    nest_list = [[_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] </span><br><span class="line">    print(row_2_column(nest_list)) </span><br><span class="line">    <span class="comment"># [[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]</span></span><br></pre></td></tr></table></figure><p>注意在<code>Python3</code>中返回的是一个<code>&lt;map object at 0x000002674CC62688&gt;</code>，需要再用<code>list()</code> 方法转一下。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.zhihu.com/question/39660985">如何用 python 实现行列互换？ - 知乎</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 🐍PyTricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 🐍PyTricks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git merge/rebase/squash 的区别</title>
      <link href="blog/2020-01-08/diff-about-merge-rebase-sqush-of-Git/"/>
      <url>blog/2020-01-08/diff-about-merge-rebase-sqush-of-Git/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>如果 A 同学选择用 git merge 的方式进行合并 dev 到 master 分支，那么 git 会这么做：</p><ol><li>找出 dev 分支和 master 分支的最近共同祖先 commit 点；</li><li>将 dev 最新一次 commit 和 master 最新一次 commit 合并后生成一个新的 commit，有冲突的话需要解决冲突；</li><li>将以上两个分支 dev 和 master 上的所有提交点按照提交时间的先后顺序进行依次放到 master 分支上；</li></ol><h3 id="git-rebase-后再-git-merge"><a href="#git-rebase-后再-git-merge" class="headerlink" title="git rebase 后再 git merge"></a>git rebase 后再 git merge</h3><ol><li>rebase 之前需要经 master 分支拉到最新；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li><li>切换分支到需要 rebase 的分支，假定是 dev 分支；<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure></li><li><p>变基，执行 <code>git rebase -i master</code>，有冲突就解决冲突，解决后直接 <code>git add</code> ，再 逐步<code>git rebase --continue</code> ；<br>注意，这里的变基其实就是找到两个分支共同的祖先，然后在当前分支上合并从共同祖先到现在的所有 commit，所以我们在第二步的时候会选择怎么处理这些 commit，然后我们就得到了一个从公共 commit 到现在的单个 commit，将 commit 合并到 master 也只会在 master 上留下一个 commit 记录，而在 dev 分支上的开发者的操作已经被合并改写了；</p></li><li><p>切换到 master 分支，执行 <code>git merge dev</code>；</p></li></ol><h3 id="squash-merge"><a href="#squash-merge" class="headerlink" title="squash merge"></a>squash merge</h3><p>在使用 git 的过程中，可能你遇到过想要合并多个 commit 为一个，然后很多人会告诉你用 <code>git commit --amend</code>，然后你发现里面有你的多个 commit 历史，你可以通过 pick 选择，squash 合并等等。同样的，merge 的时候也可以这么干，你只需要这么简单的两步：</p><ol><li>切换到目标分支：<code>git checkout master</code></li><li>以 squash 的形式 merge：<code>git merge --squash devel</code><br>你会发现，在 master 分支上居然有未提交的修改，然后你就需要在 master 上主动提交了修改，注意，这里是 master 上的你 commit 的，也就是改变了 commit 的 author。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>git merge 操作合并分支会让两个分支的每一次提交都按照提交时间（并不是 push 时间）排序，并且会将两个分支的最新一次 commit 点进行合并成一个新的 commit，最终的分支树呈现非整条线性直线的形式；</p><p>git rebase 操作实际上是将当前执行 rebase 分支的所有基于原分支提交点之后的 commit 打散成一个一个的 patch，并重新生成一个新的 commit hash 值，再次基于原分支目前最新的 commit 点上进行提交，并不根据两个分支上实际的每次提交的时间点排序，rebase 完成后，切到基分支进行合并另一个分支时也不会生成一个新的 commit 点，可以保持整个分支树的完美线性；</p><p>squash 也可以保持 master 分支干净，但是 master 中 author 都是管理者（maintainer），而不是原 owner，也就是有点“窃取劳动果实”的味道。</p><p>值得一提的是：当我们开发一个功能时，可能会在本地有无数次 commit，而你实际上在你的 master 分支上只想显示每一个功能测试完成后的一次完整提交记录就好了，其他的提交记录并不想将来全部保留在你的 master 分支上，那么 rebase 将会是一个好的选择，他可以在 rebase 时将本地多次的 commit 合并成一个 commit，还可以修改 commit 的描述等。</p><p>主分支上不能 rebase。否则，主分支的历史将被篡改，不能看到原始的历史记录。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><ul><li><a href="https://www.jianshu.com/p/6960811ac89c">你真的懂 git rebase 吗？ - 简书</a></li><li><a href="https://liqiang.io/post/difference-between-merge-squash-and-rebase/">merge squash 和 merge rebase 区别</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 主题 Butterfly 自定义之路</title>
      <link href="blog/2020-01-06/customize-hexo-theme-Butterfly/"/>
      <url>blog/2020-01-06/customize-hexo-theme-Butterfly/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>本文主要针对 hexo-theme-butterfly 主题进行了个性化自定义，并对修改内容做了简单介绍。<br><a id="more"></a><br><div class="note no-icon modern"><p>原作者文档👉 <a href="https://butterfly.js.org/">hexo-theme-butterfly 安装文档</a></p></div></p><h2 id="加速访问"><a href="#加速访问" class="headerlink" title="加速访问"></a>加速访问</h2><p>偶然间知道一个加速网站的方法：使用 <a href="https://vercel.com/">Vercel</a> 加速访问，不看广告看疗效👇<br><div class="justified-gallery"><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/VS-github.png" alt="和 Github 对比"><br><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics/images/VS-gitee.png" alt="和 Gitee 对比"></p>          </div><br>想上车的看这里：</p><ol><li><a href="https://www.qtmuniao.com/2020/03/15/hexo-to-zeit-co/">使用 zeit.co 托管 Hexo 静态博客 | Muniao’s blog</a></li><li><a href="https://vincentqin.tech/posts/speedup-gitpage/">🔨工具：使用 vercel 加速 Hexo 静态博客访问 | RealCat</a></li><li><a href="https://editio.me/2020/vercel/">使用 Vercel 自动部署博客网站 | Editio’s Dream</a></li></ol><h2 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h2><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><h4 id="svg-背景"><a href="#svg-背景" class="headerlink" title="svg 背景"></a>svg 背景</h4><p>使用 <a href="https://c.runoob.com/more/svgeditor/">SVG 编辑器</a> 修改</p><ul><li>footer 背景<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- var footer_img &#x3D;  theme.footer_bg.footer_img</span><br><span class="line">      - var footer_bg &#x3D; theme.footer_bg.enable &#x3D;&#x3D; false ? &#39;&#39; : &#96;background-image: url($&#123;footer_img&#125;)&#96;</span><br><span class="line">      - var is_bg &#x3D; theme.footer_bg.enable &#x3D;&#x3D; false ? &#39;color&#39; : &#39;photo&#39;</span><br></pre></td></tr></table></figure></li><li>友链头像 404 默认图</li><li>评论区背景图</li></ul><h4 id="page-背景图"><a href="#page-背景图" class="headerlink" title="page 背景图"></a>page 背景图</h4><p> 在原作者的基础上添加了修改 books 页面 bg 的 strict，不得不说作者真的很细心。<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if theme.douban_background.enable</span><br><span class="line">    if is_current(&#39;&#x2F;movies&#x2F;&#39;, [strict])</span><br><span class="line">      - var source &#x3D; theme.movie_background</span><br><span class="line">    if is_current(&#39;&#x2F;books&#x2F;&#39;, [strict])</span><br><span class="line">      - var source &#x3D; theme.book_background</span><br><span class="line">    if source</span><br><span class="line">      - var bg_img &#x3D; &#96;background-image: url($&#123;source&#125;)&#96;</span><br><span class="line">      #web_bg(data-type&#x3D;&#39;photo&#39; style&#x3D;bg_img)</span><br></pre></td></tr></table></figure></p><h4 id="网站-logo"><a href="#网站-logo" class="headerlink" title="网站 logo"></a>网站 logo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F;更换文字为logo图片</span><br><span class="line">&#x2F;&#x2F;a#site-name.blog_title(href&#x3D;url_for(&#39;&#x2F;&#39;)) #[&#x3D;config.title]</span><br><span class="line">a#site-name.blog_title(href&#x3D;url_for(&#39;&#x2F;&#39;))</span><br><span class="line">  - var site_logo &#x3D; theme.site_logo</span><br><span class="line">  - var site_patch &#x3D; &#96;background: url($&#123;site_logo&#125;)&#96;</span><br><span class="line">  span.site-logo(style&#x3D;site_patch)</span><br></pre></td></tr></table></figure><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//网站换为图片之后加样式</span></span><br><span class="line">    .site-logo</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">40px</span></span><br><span class="line">      <span class="attribute">background-size</span>: cover!important;</span><br></pre></td></tr></table></figure><h4 id="表格美化"><a href="#表格美化" class="headerlink" title="表格美化"></a>表格美化</h4><table><thead><tr><th style="text-align:center">姓名</th><th style="text-align:left">年龄</th><th style="text-align:right">性别</th><th style="text-align:center">民族</th></tr></thead><tbody><tr><td style="text-align:center">张三丰</td><td style="text-align:left">100</td><td style="text-align:right">男</td><td style="text-align:center">汉族</td></tr><tr><td style="text-align:center">张翠山</td><td style="text-align:left">35</td><td style="text-align:right">男</td><td style="text-align:center">汉族</td></tr><tr><td style="text-align:center">殷素素</td><td style="text-align:left">33</td><td style="text-align:right">女</td><td style="text-align:center">汉族</td></tr><tr><td style="text-align:center">张无忌</td><td style="text-align:left">12</td><td style="text-align:right">男</td><td style="text-align:center">汉族</td></tr><tr><td style="text-align:center">赵敏</td><td style="text-align:left">12</td><td style="text-align:right">女</td><td style="text-align:center">蒙古族</td></tr><tr><td style="text-align:center">小昭</td><td style="text-align:left">12</td><td style="text-align:right">女</td><td style="text-align:center">波斯人</td></tr></tbody></table><p>参考 <a href="https://hexo.imydl.tech/archives/6742.html">Hexo 下表格的美化和优化</a></p><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><h4 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h4><ul><li style="list-style: none"><input type="checkbox" checked></input> <del>参考<code>Next</code><a href="https://hexo-theme-next.netlify.com/docs/tag-plugins/">主题外挂</a></del><br>参见 <a href="https://vuejs.org/v2/cookbook/serverless-blog.html">此处</a> note 挂件；<br>建议阅读 <a href="https://demo.jerryc.me/posts/2df239ce/">标签外挂(Tag Plugins) | Butterfly</a><br><code>gallery</code>已经实现需求，所以没有必要实现了。</li></ul><div class="justified-gallery"><p><img src= "/img/loading.svg" data-lazy-src="https://images.unsplash.com/photo-1578028076641-ef1d08387c14?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80" alt=""> </p><p><img src= "/img/loading.svg" data-lazy-src="https://images.unsplash.com/photo-1557244056-ac3033d17d9a?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=634&amp;q=80" alt=""> </p><p><img src= "/img/loading.svg" data-lazy-src="https://i0.hippopx.com/photos/121/457/241/girls-the-scenery-wallpaper-7f97112750013868bc5bcc249f13e27d.jpg" alt=""> </p><p><img src= "/img/loading.svg" data-lazy-src="https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg" alt=""><br><img src= "/img/loading.svg" data-lazy-src="https://images.unsplash.com/photo-1529245814698-dd66c442bfef?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1350&amp;q=80" alt=""> </p>          </div><h4 id="用户状态"><a href="#用户状态" class="headerlink" title="用户状态"></a>用户状态</h4><ul><li style="list-style: none"><input type="checkbox" checked></input> 用户卡片页显示个人工作状态（支持 fa 和 emoji 😀）<br>头像 hover 事件修改<br>参考此处实现<a href="https://vwin.github.io/2018/08/02/Hexo-Next%E4%B8%BB%E9%A2%98%E5%A4%B4%E5%83%8F%E6%97%8B%E8%BD%AC/">头像不翻转，鼠标 hover 放大</a><figure class="highlight styl"><table><tr><td class="code"><pre><span class="line">.card-info</span><br><span class="line">    img</span><br><span class="line">      <span class="attribute">display</span>: inline-block</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">110px</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">110px</span></span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">70px</span></span><br><span class="line">      <span class="attribute">vertical-align</span>: top</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto</span><br><span class="line">      webkit-<span class="attribute">transition</span>: <span class="number">1.4s</span> all</span><br><span class="line">      moz-<span class="attribute">transition</span>: <span class="number">1.4s</span> all</span><br><span class="line">      ms-<span class="attribute">transition</span>: <span class="number">1.4s</span> all</span><br><span class="line">      <span class="attribute">transition</span>: <span class="number">1.4s</span> all</span><br><span class="line"></span><br><span class="line">      &amp;:hover</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="variable">$avatar</span>-bg</span><br><span class="line">        webkit-<span class="attribute">transform</span>: rotate(<span class="number">360deg</span>) scale(<span class="number">1.1</span>)</span><br><span class="line">        moz-<span class="attribute">transform</span>: rotate(<span class="number">360deg</span>) scale(<span class="number">1.1</span>)</span><br><span class="line">        ms-<span class="attribute">transform</span>: rotate(<span class="number">360deg</span>) scale(<span class="number">1.1</span>)</span><br><span class="line">        <span class="attribute">transform</span>: rotate(<span class="number">360deg</span>) scale(<span class="number">1.1</span>)</span><br></pre></td></tr></table></figure><h4 id="footer-页面"><a href="#footer-页面" class="headerlink" title="footer 页面"></a>footer 页面</h4></li><li style="list-style: none"><input type="checkbox" checked></input> 添加 badge<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#x2F;Butterfly&#x2F;layout&#x2F;includes&#x2F;footer.pug</span><br></pre></td></tr></table></figure><h4 id="iframe-实现-豆瓣书影音-页面"><a href="#iframe-实现-豆瓣书影音-页面" class="headerlink" title="iframe 实现 豆瓣书影音 页面"></a>iframe 实现 <a href="/douban/">豆瓣书影音</a> 页面</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户名替换为自己的豆瓣id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://m.douban.com/people/imoyao/subject_profile&quot;</span> <span class="attr">sandbox</span>=<span class="string">&quot;allow-forms allow-scripts allow-same-origin allow-popups&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实现-Netlify-CMS-管理"><a href="#实现-Netlify-CMS-管理" class="headerlink" title="实现 Netlify CMS 管理"></a>实现 Netlify CMS 管理</h4>使用<a href="https://github.com/jiangtj/hexo-netlify-cms">Hexo Netlify CMS</a>实现<br>参考<a href="https://io-oi.me/tech/deploy-static-site-to-netlify/">将 Hexo 静态博客部署到 Netlify | reuixiy</a></li></ul><h4 id="吐个槽"><a href="#吐个槽" class="headerlink" title="吐个槽"></a>吐个槽</h4><ul><li style="list-style: none"><input type="checkbox" checked></input> 侧边栏添加吐个槽，用户可以进行反馈</li></ul><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><h4 id="文章页-sidebar-图标"><a href="#文章页-sidebar-图标" class="headerlink" title="文章页 sidebar 图标"></a>文章页 sidebar 图标</h4><ul><li style="list-style: none"><input type="checkbox" checked></input> 更换另外一种图标，同时 hover 变成显眼按钮</li></ul><h4 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h4><ul><li style="list-style: none"><input type="checkbox" checked></input> 图标显示风格左右旋转而不是上下颠倒</li></ul><h4 id="赞赏"><a href="#赞赏" class="headerlink" title="赞赏"></a>赞赏</h4><p>鉴于国人现实经济状况，只有在<code>font-matter</code>中添加<code>reward: true</code>才会打开赞赏功能；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; themes&#x2F;Butterfly&#x2F;layout&#x2F;post.pug</span><br><span class="line">if theme.reward.enable &amp;&amp; page.reward</span><br></pre></td></tr></table></figure></p><h4 id="page-页侧边栏"><a href="#page-页侧边栏" class="headerlink" title="page 页侧边栏"></a>page 页侧边栏</h4><ul><li style="list-style: none"><input type="checkbox" checked></input> 不要展示只看一次就可以的信息（如网站概览，公告等）</li><li style="list-style: none"><input type="checkbox" checked></input> 只在首页显示公告和网站概览；跳到对应页时，侧边栏不显示对应 card（避免信息重复）；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">layout&#x2F;includes&#x2F;widget&#x2F;index.pug</span><br></pre></td></tr></table></figure><h4 id="文章页结束语"><a href="#文章页结束语" class="headerlink" title="文章页结束语"></a>文章页结束语</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;结束语分割线</span><br><span class="line">  .divider.divider-horizontal.divider-with-text-center(role&#x3D;&#39;separator&#39;)</span><br><span class="line">    span.divider-inner-text&#x3D;theme.divider_text</span><br></pre></td></tr></table></figure><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2></li></ul><h3 id="原作者废弃"><a href="#原作者废弃" class="headerlink" title="原作者废弃"></a>原作者废弃</h3><ul><li style="list-style: none"><input type="checkbox" checked></input> 文章 front matter: hide 支持</li></ul><h3 id="新增-1"><a href="#新增-1" class="headerlink" title="新增"></a>新增</h3><h4 id="首页添加描述卡"><a href="#首页添加描述卡" class="headerlink" title="首页添加描述卡"></a>首页添加描述卡</h4><ul><li style="list-style: none"><input type="checkbox" checked></input> 自述页面</li><li><del>music</del></li><li><del>video</del></li></ul><h4 id="添加-logos-页面存放网站-logo-等个人信息"><a href="#添加-logos-页面存放网站-logo-等个人信息" class="headerlink" title="添加 logos 页面存放网站 logo 等个人信息"></a>添加 logos 页面存放网站 logo 等个人信息</h4><p>参考</p><ul><li><a href="https://ceph.io/logos/">Ceph Logos - Ceph</a></li><li><a href="https://www.python.org/community/logos/">The Python Logo | Python Software Foundation</a></li></ul><h4 id="page-页"><a href="#page-页" class="headerlink" title="page 页"></a>page 页</h4><ul><li style="list-style: none"><input type="checkbox" checked></input> 增加正文结束分割线，可以自定义分割线文字内容；</li><li style="list-style: none"><input type="checkbox" checked></input> 修改 books、movies 页面的背景，更加沉浸式；<br>  TODO:暂时页面 id 重复未解决</li></ul><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><ul><li style="list-style: none"><input type="checkbox" checked></input> 给友链页面中的朋友栏增加首页友链卡；</li><li style="list-style: none"><input type="checkbox" checked></input> 侧边栏只显示 20 条 tag，剩余的访问 tag 页面才能看到；</li><li style="list-style: none"><input type="checkbox" checked></input> <a href="/douban/">豆瓣历史</a>页面不显示侧边栏；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;douban 页面特殊处理</span><br><span class="line">else if page.type &#x3D;&#x3D;&#x3D; &#39;douban&#39;</span><br><span class="line">  article#page.no-aside-page</span><br><span class="line">    .article-container!&#x3D; page.content</span><br></pre></td></tr></table></figure><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3></li><li style="list-style: none"><input type="checkbox" checked></input> 目前的摘要功能应该是我没有配置好，感觉没有生效；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- var specific_desc &#x3D; article.description || article.subtitle || article.excerpt</span><br><span class="line">     if specific_desc</span><br><span class="line">       .content!&#x3D; specific_desc</span><br><span class="line">     else if theme.auto_excerpt &amp;&amp; theme.auto_excerpt.enable</span><br><span class="line">       - const content &#x3D; strip_html(article.content)</span><br><span class="line">       - let expert &#x3D; content.substring(0, theme.auto_excerpt.length) </span><br><span class="line">       - content.length &gt; theme.auto_excerpt.length ? expert +&#x3D; &#39; ...&#39; : &#39;&#39;</span><br><span class="line">       .content!&#x3D; expert</span><br></pre></td></tr></table></figure><blockquote><p>因为主题 UI 的关系，主页文章节选只支持自动节选和文章页 description。优先选择自动节选。<br>在 butterfly.yml 里可以开启 auto_excerpt 的选项，你的文章将会在自动截取部分显示在主页。（默认显示 150 个字）。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_excerpt: </span><br><span class="line">enable: true </span><br><span class="line">length: 150</span><br></pre></td></tr></table></figure></blockquote><h3 id="编辑直达"><a href="#编辑直达" class="headerlink" title="编辑直达"></a>编辑直达</h3></li><li style="list-style: none"><input type="checkbox"></input> 首页增加 <a href="https://imoyao.netlify.com/admin/#/">后台管理</a> navbar；</li><li style="list-style: none"><input type="checkbox"></input> 文章页添加编辑按钮（？）；<br>  参考主题 <a href="https://github.com/wzpan/hexo-theme-freemind">wzpan/hexo-theme-freemind: Most powerful bootstrap theme for hexo.</a> 实现</li></ul><h3 id="暗色模式"><a href="#暗色模式" class="headerlink" title="暗色模式"></a>暗色模式</h3><ul><li style="list-style: none"><input type="checkbox" checked></input> 一些自定义样式修改；</li></ul><h3 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h3><p>在站点配置文件中修改远程部署仓库信息如下：<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/imoyao/imoyao.github.io.git</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://gitee.com/imoyao/imoyao.git</span></span><br></pre></td></tr></table></figure><br>其中地址修改为你的仓库的地址。具体说明见<a href="https://blog.csdn.net/tsvico/article/details/80629452">此处</a>；同时还可以将代码推送到两个仓库中，参考<a href="https://www.jianshu.com/p/747e2bb71775">此处</a>：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url --add origin &#123;你的 gitee 项目地址&#125;</span><br></pre></td></tr></table></figure><br>（当然我们也可以手动点击 gitee 网页上的同步按钮强制从 github 上更新）</p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><ul><li><a href="https://www.deadlinkchecker.com/website-dead-link-checker.asp">死链检测</a></li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://www.antmoe.com/posts/a811d614/index.html">Hexo 博客之 butterfly 主题优雅魔改系列（持续更新） | 小康博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客个性化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🐍PyTricks | Python 中如何把一个列表切分成指定大小的子列表</title>
      <link href="blog/2019-12-27/python-split-list-into-lists-by-particular-value/"/>
      <url>blog/2019-12-27/python-split-list-into-lists-by-particular-value/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="使用迭代器"><a href="#使用迭代器" class="headerlink" title="使用迭代器"></a>使用迭代器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunks</span>(<span class="params">lst, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield successive n-sized chunks from lst.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(lst), n):</span><br><span class="line">        <span class="keyword">yield</span> lst[i:i + n]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>示例<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use xrange() instead of range() in python2</span></span><br><span class="line">ret = chunks(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">68</span>)),<span class="number">21</span>)</span><br><span class="line">print(<span class="built_in">list</span>(ret))</span><br><span class="line"><span class="comment"># 返回</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>],</span><br><span class="line"> [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>],</span><br><span class="line"> [<span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>], [<span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>]]</span><br></pre></td></tr></table></figure><h2 id="自己写的"><a href="#自己写的" class="headerlink" title="自己写的"></a>自己写的</h2></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_list</span>(<span class="params">alist, split_len</span>):</span>   <span class="comment"># <span class="doctag">TODO:</span> 是否有改进之处</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    按照每4个一组进行划分</span></span><br><span class="line"><span class="string">    :param alist:</span></span><br><span class="line"><span class="string">    :param split_len:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    b = []</span><br><span class="line">    start_split_index = <span class="number">0</span></span><br><span class="line">    length = <span class="built_in">int</span>(math.ceil(<span class="built_in">len</span>(alist) / <span class="built_in">float</span>(split_len)))</span><br><span class="line">    <span class="keyword">while</span> length &gt; <span class="number">0</span>:</span><br><span class="line">        a = []</span><br><span class="line">        end_index = start_split_index + split_len</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> alist[start_split_index:end_index]:</span><br><span class="line">            a.append(i)</span><br><span class="line"></span><br><span class="line">        start_split_index += split_len</span><br><span class="line"></span><br><span class="line">        length -= <span class="number">1</span></span><br><span class="line">        b.append(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h2 id="网上看到的"><a href="#网上看到的" class="headerlink" title="网上看到的"></a>网上看到的</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_of_groups</span>(<span class="params">init_list, children_list_len</span>):</span></span><br><span class="line">    list_of_group = <span class="built_in">zip</span>(*(<span class="built_in">iter</span>(init_list),) * children_list_len)</span><br><span class="line">    end_list = [<span class="built_in">list</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> list_of_group]</span><br><span class="line">    count = <span class="built_in">len</span>(init_list) % children_list_len</span><br><span class="line">    end_list.append(init_list[-count:]) <span class="keyword">if</span> count != <span class="number">0</span> <span class="keyword">else</span> end_list</span><br><span class="line">    <span class="keyword">return</span> end_list</span><br></pre></td></tr></table></figure><h2 id="CookBook"><a href="#CookBook" class="headerlink" title="CookBook"></a>CookBook</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slice_list</span>(<span class="params">seq, size</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [seq[i:i + size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(seq), size)]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_iter</span>(<span class="params">seq, size</span>):</span> <span class="comment"># <span class="doctag">TODO:</span>没看懂，这个方法当 seq 太小时，会返回空；e.g.zip_iter(list(range(2)),4)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">zip</span>(*[<span class="built_in">iter</span>(seq)] * size))</span><br></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">24</span>))</span><br><span class="line">    num = <span class="number">4</span></span><br><span class="line">    t1 = split_list(a, num)</span><br><span class="line">    t2 = list_of_groups(a, num)</span><br><span class="line">    t3 = slice_list(a, num)</span><br><span class="line">    t4 = zip_iter(a, num)</span><br><span class="line">    print(t1)</span><br><span class="line">    print(t2)</span><br><span class="line">    print(t3)</span><br><span class="line">    print(t4)</span><br><span class="line"><span class="comment"># [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]]</span></span><br><span class="line"><span class="comment"># [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]]</span></span><br><span class="line"><span class="comment"># [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]]</span></span><br><span class="line"><span class="comment"># [(0, 1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11), (12, 13, 14, 15), (16, 17, 18, 19), (20, 21, 22, 23)]</span></span><br></pre></td></tr></table></figure><h2 id="更多阅读"><a href="#更多阅读" class="headerlink" title="更多阅读"></a>更多阅读</h2><ul><li><a href="https://www.garyrobinson.net/2008/04/splitting-a-pyt.html"><strong>Splitting A Python List Into Sublists</strong></a></li><li><a href="http://code.activestate.com/recipes/425397/"><strong>split a list into roughly equal-sized pieces (python recipe)</strong></a></li><li><a href="https://www.geeksforgeeks.org/python-split-list-into-lists-by-particular-value/">Python | Split list into lists by particular value</a></li><li><a href="https://www.geeksforgeeks.org/break-list-chunks-size-n-python/">Break a list into chunks of size N in Python - GeeksforGeeks</a></li><li><a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">python - How do you split a list into evenly sized chunks? - Stack Overflow</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 🐍PyTricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TODO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyCharm 最新专业版（2020.2.2）激活</title>
      <link href="blog/2019-12-25/active-PyCharm/"/>
      <url>blog/2019-12-25/active-PyCharm/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本记录来源网络，仅用于个人记录，若收到官方律师函后果自负。希望不差钱的同学爱护同行，支持正版，去 <a href="https://www.jetbrains.com/zh-cn/pycharm/buy/#personal?billing=yearly">官网购买 PyCharm Professional</a>，组织用户可以在 <a href="https://www.jetbrains.com/zh-cn/pycharm/buy/#discounts?billing=yearly">这里</a> 关注优惠政策。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ol><li>跳转到该开源项目：<a href="https://gitee.com/pengzhile/ide-eval-resetter">ide-eval-resetter: Reset your IDE eval information.</a>；</li><li>下载插件<a href="https://gitee.com/pengzhile/ide-eval-resetter/releases">releases</a>，安装扩展（类似于 Chrome 安装非官方扩展的方法）；<br><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/masantu/statics@master/images/PyCharm-2020-2.png" alt="PyCharm-2020.2"></li><li>点击 <code>Help</code> 或 <code>Get Help</code> -&gt; <code>Reset IDE&#39;s Eval</code> 菜单；</li><li>重启 IDE；</li><li>重新评估，以后每个月重新操作一次。</li><li>祝大家早日实现“编辑器自由”！<div class="note warning modern"><p>如果不小心错过试用期怎么重置（会强制退出）？</p><ol><li><code>Win+R</code>输入<code>regedit</code>打开注册表；</li><li>删除<code>计算机\HKEY_CURRENT_USER\Software\JavaSoft\Prefs</code>下的<code>.idexxx</code>和<code>ide-eval-resetter</code>目录。</li></ol></div></li></ol><hr><p>以下为个人记录备用，用于迷路之后的操作，普通使用者可以忽略。</p><ol><li>关注公众号，发<code>?</code>求助；</li><li>收到回复之后破解谜面；</li><li>安装 pycryptodome    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple pycryptodome</span><br></pre></td></tr></table></figure></li><li>获取地址，得到谜底。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> MD2</span><br><span class="line"><span class="comment"># 原文</span></span><br><span class="line">txt = <span class="string">&quot;73.25&quot;</span></span><br><span class="line"><span class="comment"># md2加密1亿次</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">    txt = MD2.new(txt.encode(<span class="string">&quot;utf8&quot;</span>)).hexdigest()</span><br><span class="line">print(txt)</span><br></pre></td></tr></table></figure><h3 id="PyCharm-和操作系统版本信息"><a href="#PyCharm-和操作系统版本信息" class="headerlink" title="PyCharm 和操作系统版本信息"></a>PyCharm 和操作系统版本信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PyCharm 2020.2 (Professional Edition)</span><br><span class="line">Build #PY-202.6397.98, built on July 27, 2020</span><br><span class="line">Licensed to PyCharm Evaluator</span><br><span class="line">Expiration date: September 21, 2020</span><br><span class="line">Runtime version: 11.0.7+10-b944.20 amd64</span><br><span class="line">VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.</span><br><span class="line">Windows 10 10.0</span><br><span class="line">GC: ParNew, ConcurrentMarkSweep</span><br><span class="line">Memory: 976M</span><br><span class="line">Cores: 4</span><br><span class="line">Registry: ide.balloon.shadow.size&#x3D;0</span><br><span class="line">Non-Bundled Plugins: Assets Compressor, BashSupport, com.nvlad.tinypng-optimizer, io.zhile.research.ide-eval-resetter, com.jetbrains.lang.ejs, com.jetbrains.plugins.jade, org.jetbrains.plugins.vue, com.illuminatedcloud2.intellij</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyCharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 CEPH 的 dashboard 的二次开发</title>
      <link href="blog/2019-12-13/custom-base-on-ceph-dashboard/"/>
      <url>blog/2019-12-13/custom-base-on-ceph-dashboard/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div class="note info modern"><p>本文为个人记录之用，不对大多数用户具有参考价值。</p></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>项目以<code>ceph-14.2.5</code>版本代码中的 <a href="https://github.com/ceph/ceph/tree/master/src/pybind/mgr/dashboard">ceph/src/pybind/mgr/dashboard· ceph/ceph</a> 为基础通过二次开发以实现 Ceph 分布式管理系统。</p><p><img src= "/img/loading.svg" data-lazy-src="/images/ceph-dashboard.png" alt="Dashboard"></p><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol><li>安装 npm 工具<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装npm</span></span><br><span class="line">yum install npm</span><br></pre></td></tr></table></figure></li><li>安装 node 环境<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置国内源</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装node版本管理工具<span class="string">&#x27;node&#x27;</span></span></span><br><span class="line">npm install -g n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级到`8.9`版本的`node`</span></span><br><span class="line">n 8.9.0</span><br></pre></td></tr></table></figure>查看<code>npm</code>与<code>nodejs</code>的版本，如果<code>nodejs</code>低于<code>8.9.0</code>版本，则升级之。<br><strong>注意</strong>：以<code>Linux</code>为开发环境安装前端依赖进行演示：<br>切换到<code>/usr/share/ceph/mgr/dashboard/frontend</code> 目录：<br>此处可见官方<a href="https://docs.ceph.com/en/latest/dev/developer_guide/dash-devel/">Ceph Dashboard Developer Documentation — Ceph Documentation</a>文档说明。</li><li>安装依赖<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 此处可见官方../HACKING.rst 文档说明</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> install dependencies</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>可以以<code>node-sass</code>安装成功为参考标志，如果报错，请删除 node_modules 目录之后重试。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">报错清除缓存</span></span><br><span class="line">npm cache verify</span><br></pre></td></tr></table></figure></li><li>安装成功之后，修改代理配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 代理配置</span></span><br><span class="line">mv proxy.conf.json.sample proxy.conf.json</span><br></pre></td></tr></table></figure>一个可参考的配置内容为：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;&#x2F;api&#x2F;&quot;: &#123;</span><br><span class="line">    &quot;target&quot;: &quot;http:&#x2F;&#x2F;localhost:8080&quot;,  # 服务端口和运行地址需要根据情况配置，注意http和https必须分清</span><br><span class="line">    &quot;secure&quot;: false,</span><br><span class="line">    &quot;logLevel&quot;: &quot;debug&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;&#x2F;ui-api&#x2F;&quot;: &#123;</span><br><span class="line">    &quot;target&quot;: &quot;http:&#x2F;&#x2F;localhost:8080&quot;,</span><br><span class="line">    &quot;secure&quot;: false,</span><br><span class="line">    &quot;logLevel&quot;: &quot;debug&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>其中端口号可以使用<code>ceph mgr services</code>获取到，即输出中的<code>dashboard</code>字段中所指：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;dashboard&quot;: &quot;http:&#x2F;&#x2F;node-c1:8080&#x2F;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>运行前端服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>之后，如果使用默认配置，则访问<code>http://localhost:4200/</code>进行开发，外部网络访问，替换为服务所属机器的 ip 即可。</p></li><li><p>版本释出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run-script build</span><br></pre></td></tr></table></figure><p>该命令会在 frontend 目录下释出<code>dist</code>目录。</p></li></ol><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li>安装 pip</li><li>安装 python 依赖<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requirements.txt -r</span><br></pre></td></tr></table></figure></li><li>配置并启动 ODSP 作为一个服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start odspd</span><br></pre></td></tr></table></figure><h2 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h2><div class="justified-gallery"><p><img src= "/img/loading.svg" data-lazy-src="/images/ceph-dash/Estor-host-info.png" alt="节点信息展示"><br><img src= "/img/loading.svg" data-lazy-src="/images/ceph-dash/Snipaste_2020-11-06_14-49-46.png" alt="磁盘（批量）点灯"><br><img src= "/img/loading.svg" data-lazy-src="/images/ceph-dash/Snipaste_2020-11-06_14-50-44.png" alt="节点远程管理（开、关机，用户、网络管理）"><br><img src= "/img/loading.svg" data-lazy-src="/images/ceph-dash/Snipaste_2020-11-06_14-58-33.png" alt="系统工具：时间展示和DNS修改及展示"></p>          </div></li></ol><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tree -L 3 -I &quot;node_modules|*.pyc|*.pyo&quot; </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── awsauth.py</span><br><span class="line">├── controllers     # 后端Python</span><br><span class="line">│   ├── auth.py</span><br><span class="line">│   ├── cephfs.py</span><br><span class="line">│   ├── cluster_configuration.py</span><br><span class="line">│   ├── docs.py</span><br><span class="line">│   ├── erasure_code_profile.py</span><br><span class="line">│   ├── grafana.py</span><br><span class="line">│   ├── health.py</span><br><span class="line">│   ├── home.py</span><br><span class="line">│   ├── host.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── iscsi.py</span><br><span class="line">│   ├── logging.py</span><br><span class="line">│   ├── logs.py</span><br><span class="line">│   ├── mgr_modules.py</span><br><span class="line">│   ├── monitor.py</span><br><span class="line">│   ├── nfsganesha.py</span><br><span class="line">│   ├── osd.py</span><br><span class="line">│   ├── perf_counters.py</span><br><span class="line">│   ├── pool.py</span><br><span class="line">│   ├── prometheus.py</span><br><span class="line">│   ├── rbd_mirroring.py</span><br><span class="line">│   ├── rbd.py</span><br><span class="line">│   ├── rgw.py</span><br><span class="line">│   ├── role.py</span><br><span class="line">│   ├── saml2.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── summary.py</span><br><span class="line">│   ├── task.py</span><br><span class="line">│   └── user.py</span><br><span class="line">├── exceptions.py</span><br><span class="line">├── frontend            # 前端</span><br><span class="line">│   ├── angular.json</span><br><span class="line">│   ├── dist</span><br><span class="line">│   │   └── en-US</span><br><span class="line">│   ├── e2e</span><br><span class="line">│   │   ├── block</span><br><span class="line">│   │   ├── cluster</span><br><span class="line">│   │   ├── filesystems</span><br><span class="line">│   │   ├── helper.po.ts</span><br><span class="line">│   │   ├── nfs</span><br><span class="line">│   │   ├── pools</span><br><span class="line">│   │   └── tsconfig.e2e.json</span><br><span class="line">│   ├── environment.build.js</span><br><span class="line">│   ├── html-linter.config.json</span><br><span class="line">│   ├── i18n.config.json</span><br><span class="line">│   ├── nodejs-8.9.4-1nodesource.x86_64.rpm</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── package-lock.json</span><br><span class="line">│   ├── protractor.conf.js</span><br><span class="line">│   ├── proxy.conf.json.sample</span><br><span class="line">│   ├── src                # 静态src</span><br><span class="line">│   │   ├── app</span><br><span class="line">│   │   ├── assets</span><br><span class="line">│   │   ├── defaults.scss</span><br><span class="line">│   │   ├── environments</span><br><span class="line">│   │   ├── favicon.ico</span><br><span class="line">│   │   ├── index.html</span><br><span class="line">│   │   ├── jestGlobalMocks.ts</span><br><span class="line">│   │   ├── locale</span><br><span class="line">│   │   ├── main.ts</span><br><span class="line">│   │   ├── polyfills.ts</span><br><span class="line">│   │   ├── setupJest.ts</span><br><span class="line">│   │   ├── styles</span><br><span class="line">│   │   ├── styles.scss</span><br><span class="line">│   │   ├── testing</span><br><span class="line">│   │   ├── tsconfig.app.json</span><br><span class="line">│   │   ├── tsconfig.spec.json</span><br><span class="line">│   │   ├── typings.d.ts</span><br><span class="line">│   │   ├── unit-test-configuration.ts.sample</span><br><span class="line">│   │   ├── vendor.overrides.scss</span><br><span class="line">│   │   └── vendor.variables.scss</span><br><span class="line">│   ├── tsconfig.json</span><br><span class="line">│   └── tslint.json</span><br><span class="line">├── grafana.py</span><br><span class="line">├── HACKING.rst</span><br><span class="line">├── __init__.py</span><br><span class="line">├── module.py       # 必需</span><br><span class="line">├── plugins</span><br><span class="line">│   ├── feature_toggles.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── interfaces.py</span><br><span class="line">│   ├── lru_cache.py</span><br><span class="line">│   ├── pluggy.py</span><br><span class="line">│   └── ttl_cache.py</span><br><span class="line">├── README.rst</span><br><span class="line">├── requirements-py27.txt       # python依赖</span><br><span class="line">├── requirements-py3.txt</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── rest_client.py</span><br><span class="line">├── run-backend-api-request.sh</span><br><span class="line">├── run-backend-api-tests.sh</span><br><span class="line">├── run-backend-rook-api-request.sh</span><br><span class="line">├── run-frontend-e2e-tests.sh</span><br><span class="line">├── run-frontend-unittests.sh</span><br><span class="line">├── run-tox.sh</span><br><span class="line">├── security.py</span><br><span class="line">├── services</span><br><span class="line">│   ├── access_control.py</span><br><span class="line">│   ├── auth.py</span><br><span class="line">│   ├── cephfs.py</span><br><span class="line">│   ├── ceph_service.py</span><br><span class="line">│   ├── cephx.py</span><br><span class="line">│   ├── exception.py</span><br><span class="line">│   ├── ganesha.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── iscsi_client.py</span><br><span class="line">│   ├── iscsi_cli.py</span><br><span class="line">│   ├── iscsi_config.py</span><br><span class="line">│   ├── orchestrator.py</span><br><span class="line">│   ├── rbd.py</span><br><span class="line">│   ├── rgw_client.py</span><br><span class="line">│   ├── sso.py</span><br><span class="line">│   └── tcmu_service.py</span><br><span class="line">├── settings.py</span><br><span class="line">├── tests           # 单元测试代码</span><br><span class="line">│   ├── helper.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">|   |—— # 省略</span><br><span class="line">│   └── test_tools.py</span><br><span class="line">├── tools.py</span><br><span class="line">└── tox.ini</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><p>启用<code>mgr restful</code>之后，访问<code>https://node_addr:8003/config/cluster</code>获取集群配置信息，之后可以访问具体名称，获得配置详情；</p><h3 id="如何添加controller"><a href="#如何添加controller" class="headerlink" title="如何添加controller"></a>如何添加<code>controller</code></h3><p>参见<a href="https://docs.ceph.com/en/latest/dev/developer_guide/dash-devel/">HACKING.rst</a></p><p>继承<code>BaseController</code>之后使用 <code>@Controller</code>,<code>@ApiController</code> 或者<code>@UiApiController</code> ，三者的区别是：<br><code>@ApiController</code> 和 <code>@UiApiController</code> 是<code>@Controller</code>的特殊化。</p><p><code>@ApiController</code> 应该用在提供类 API 接口，而<code>@UiApiController</code>应该被用于非公用的 API，其他接口使用<code>@Controller</code></p><p>一般来说，我们只需要实现<code>@Controller</code>和<code>@ApiController</code> 即可。</p><p><code>@Endpoint</code> 用于暴露接口的方法实现，它可以接收很多参数，比如请求方法，查询参数等；<br><strong><em>注</em></strong>：对于集群管理时，我们把 node 信息直接传输到 url 中，或许是一个好办法，参考：<code>@Endpoint(path=&quot;/&#123;date&#125;/latency&quot;)</code>处代码。</p><p>而继承<code>RESTController</code>默认返回<code>json</code>格式数据。它是一个简化并使用<code>collection</code>整合数据的抽象层，将方法名、请求类型和状态码进行映射。具体映射关系见文档表格。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>模块编写完成，重启服务，看是否会有模块未找到，服务导入等报错<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ceph mgr module disable dashboard</span><br><span class="line">ceph mgr module enable dashboard</span><br><span class="line">ceph dashboard create-self-signed-cert</span><br></pre></td></tr></table></figure><br>也可以查看日志，查找可能的报错信息。</p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p>通过该文件可以查看<code>mgr</code>中的报错信息，暂时未找到 logger.info()写入 log 中的信息（是否需要配置？）<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tailf /var/log/ceph/ceph-mgr.node1.log</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ..module <span class="keyword">import</span> cherrypy</span><br><span class="line">cherrypy.log(<span class="string">&#x27;---------&#x27;</span>, json.dumps(update_info))     <span class="comment"># 必须是str</span></span><br></pre></td></tr></table></figure></p><h3 id="MDS-状态"><a href="#MDS-状态" class="headerlink" title="MDS 状态"></a>MDS 状态</h3><p><a href="https://my.oschina.net/myspaceNUAA/blog/500136">元数据服务器</a><br><a href="http://docs.ceph.org.cn/man/8/ceph-mds/">CEPH-MDS – CEPH 元数据服务器守护进程</a></p><h3 id="需要安装的工具、依赖"><a href="#需要安装的工具、依赖" class="headerlink" title="需要安装的工具、依赖"></a>需要安装的工具、依赖</h3><ul><li>获取磁盘<code>SN</code>号码<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install hdparm</span><br></pre></td></tr></table></figure><h3 id="时间配置"><a href="#时间配置" class="headerlink" title="时间配置"></a>时间配置</h3>集群部署的时候脚本中应该有配置 NTP 的操作，步骤参见：<a href="https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/1.2.3/html/installation_guide_for_rhel_x86_64/pre-installation-requirements#ntp">NTP</a><br>不再支持手动输入时间配置</li></ul><ol><li>直接设置集群内部机器为 ntp 服务器，其他指向该机器；</li><li>给定 ip 或域名地址，如果是集群网段的，则直接返回提示不支持，否则，所有指向该地址。<div class="note warning modern"><p><strong>注意</strong><br>根据下面这篇文章的观点，在集群起来之后再去调节 ntp 服务被认为是会严重影响集群业务的操作，如果一定要调整，也可能会耗时很久！<br><a href="http://hackerain.me/2019/12/15/ceph/cephx.html">深度解析 CephX 原理—调节 NTP 时钟的困境 | 开心鬼</a></p></div></li></ol><p><a href="http://docs.ceph.org.cn/rados/configuration/mon-config-ref/">监视器配置参考</a></p><h3 id="mon-状态"><a href="#mon-状态" class="headerlink" title="mon 状态"></a>mon 状态</h3><ul><li><a href="https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/3/html/troubleshooting_guide/troubleshooting-monitors#understanding-monitor-status">Understanding Monitor Status</a></li><li><p><a href="https://docs.ceph.com/docs/nautilus/rados/troubleshooting/troubleshooting-mon/">Troubleshooting Monitors — Ceph Documentation</a></p><h4 id="在法定之内-in-quorum"><a href="#在法定之内-in-quorum" class="headerlink" title="在法定之内 in quorum"></a>在法定之内 in quorum</h4><p><code>ceph daemon mon.node X mon_status</code>两种 state， leader 或者 peon；<br>如果 leader down 之后，调用可以看到原来的 state 为<code>peon</code>的会变为<code>probing</code>，如果可以实现仲裁，则<code>rank</code>最小者变为 leader；</p><h4 id="超出法定人数-out-quorum-新加入的节点"><a href="#超出法定人数-out-quorum-新加入的节点" class="headerlink" title="超出法定人数 out quorum/新加入的节点"></a>超出法定人数 out quorum/新加入的节点</h4><p>状态可能为 探测（probing）, 选举（electing） 或者 synchronizing</p></li><li><p><a href="https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/3/html/troubleshooting_guide/troubleshooting-monitors#monitor-is-out-of-quorum">mon.X is down (out of quorum)</a></p></li></ul><h2 id="发布历史"><a href="#发布历史" class="headerlink" title="发布历史"></a>发布历史</h2><h3 id="vN1-0-1（2020-07-03）"><a href="#vN1-0-1（2020-07-03）" class="headerlink" title="vN1.0.1（2020-07-03）"></a>vN1.0.1（2020-07-03）</h3><h4 id="集群主机"><a href="#集群主机" class="headerlink" title="集群主机"></a>集群主机</h4><h5 id="mon-mgr"><a href="#mon-mgr" class="headerlink" title="mon/mgr"></a>mon/mgr</h5><p>节点发现：</p><ol><li>单节点添加</li><li>多节点添加</li><li>局域网段添加<br>节点删除</li></ol><h5 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h5><ol><li>节点远程开机、关机、重启；</li><li>修改远程操作用户用户名、密码；</li><li>网络配置（ip、掩码、网关。</li></ol><h5 id="磁盘展示及定位"><a href="#磁盘展示及定位" class="headerlink" title="磁盘展示及定位"></a>磁盘展示及定位</h5><p>磁盘盘位查看、（批量）定位及取消定位；</p><h5 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h5><ol><li>设置 ntp 服务器</li><li>设置 DNS</li></ol><h5 id="License"><a href="#License" class="headerlink" title="License"></a>License</h5><p>license 添加、删除、更新</p><h5 id="OSD"><a href="#OSD" class="headerlink" title="OSD"></a>OSD</h5><p>osd 新建：osd 添加（类型配置）、添加-WAL devices DB devices，加密<br>OSD 编辑：洗刷、深度洗刷、设置权重、标记、销毁、清除</p><h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><p>集群日志管理、审计日志、日志打包下载</p><h5 id="存储池"><a href="#存储池" class="headerlink" title="存储池"></a>存储池</h5><p>存储池新建、编辑、删除</p><h5 id="块设备"><a href="#块设备" class="headerlink" title="块设备"></a>块设备</h5><ul><li>映像<br>新建、编辑、复制、删除，移除回收站、容量调节</li><li>镜像</li><li>ISCSI-target</li><li>ISCSI-网关</li></ul><h5 id="对象网关"><a href="#对象网关" class="headerlink" title="对象网关"></a>对象网关</h5><p>守护进程创建、更新、删除</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>同事写的备忘录：<a href="https://note.youdao.com/ynoteshare1/index.html?id=550ed97b36101aab178afe9081cd52ee">有道云笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CEPH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Python 中定义本地类是什么操作？</title>
      <link href="blog/2019-12-10/define-a-local-class-inside-a-function-in-python/"/>
      <url>blog/2019-12-10/define-a-local-class-inside-a-function-in-python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>今天在看 ceph（mgr-dashboard）源码的时候看到下面的代码，产生了一点疑惑，这里简单整理一下。代码详见<code>src/pybind/mgr/dashboard/module.py:502</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cherrypy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandbyModule</span>(<span class="params">MgrStandbyModule, CherryPyConfig</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(StandbyModule, self).__init__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve</span>(<span class="params">self</span>):</span>        <span class="comment"># here</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Root</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">            @cherrypy.expose</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">self</span>):</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        cherrypy.tree.mount(Root(), <span class="string">&quot;&#123;&#125;/&quot;</span>.<span class="built_in">format</span>(self.url_prefix), &#123;&#125;)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shutdown</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_funky_data_structure</span>(<span class="params">bar_data=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FunkyClass</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">            self.data = <span class="string">&#x27;This is dunder init innner of FunkyClass&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_funky</span>(<span class="params">self, inner_data</span>):</span></span><br><span class="line">            print(<span class="string">&#x27;The inner_data of inner get_funky() is &#123;inner_data&#125;, outer of inner data is &#123;bar_data&#125;.&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                inner_data=inner_data, bar_data=bar_data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FunkyClass</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo = some_funky_data_structure(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">    foo_bar = some_funky_data_structure(<span class="string">&#x27;foo_bar&#x27;</span>)</span><br><span class="line">    print(foo().get_funky(<span class="string">&#x27;baz&#x27;</span>), foo_bar().get_funky(<span class="string">&#x27;baz&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    f1 = some_funky_data_structure()()</span><br><span class="line">    f2 = some_funky_data_structure()()</span><br><span class="line">    <span class="comment"># 类型看起来相同但实际不同</span></span><br><span class="line">    print(<span class="built_in">type</span>(f1))</span><br><span class="line">    print(<span class="built_in">type</span>(f2))</span><br><span class="line">    print(<span class="built_in">type</span>(f1) <span class="keyword">is</span> <span class="built_in">type</span>(f2))     <span class="comment"># False</span></span><br><span class="line">    print(<span class="built_in">isinstance</span>(f1, <span class="built_in">type</span>(f2)))     <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>初次遇到这种代码看起来会有点奇怪或者感到困惑。但是同时由于封装的实现，可以防止外部访问函数的实现。那么这究竟是一个好的实践还是糟糕的实现呢？</p><ol><li>无法进行类型检查，因为内部类对外部是隐藏的，你无法使用<code>isinstance(foo,FunkyClass)</code>语句检查类型，多次实例化之后两者类型虽然看起来相同，但实际不是一个类型，甚至在 Python2 中打印到的类型是<code>&lt;type &#39;instance&#39;&gt;</code></li><li>实现<code>map()</code>函数的静态调用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注：此处不知是我理解有误还是说的就是这个意思，这种写法还是尽量避免吧</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FunkyClass</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;args is <span class="subst">&#123;args&#125;</span>,kwargs is <span class="subst">&#123;kwargs&#125;</span>.&#x27;</span>)</span><br><span class="line">        self.data = <span class="string">&#x27;This is dunder init innner of FunkyClass&#x27;</span></span><br><span class="line">        self.bar_data = kwargs.get(<span class="string">&#x27;bar_data&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_funky</span>(<span class="params">self, inner_data</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;The inner_data of inner get_funky() is &#123;inner_data&#125;, outer of inner data is &#123;bar_data&#125;.&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            inner_data=inner_data, bar_data=self.bar_data))</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># see also: https://stackoverflow.com/questions/16874244/python-map-and-arguments-unpacking            </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> x: _FunkyClass.get_funky(x[<span class="number">1</span>], x[<span class="number">0</span>]),</span><br><span class="line">                 [(<span class="string">&#x27;foo&#x27;</span>, _FunkyClass(bar_data=<span class="string">&#x27;foo_bar&#x27;</span>)), (<span class="string">&#x27;bar&#x27;</span>, _FunkyClass(bar_data=<span class="string">&#x27;bar_foo&#x27;</span>))]):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>参阅<a href="https://stackoverflow.com/questions/34034644/python-best-practice-class-definition-inside-function">Python best practice: class definition inside function?</a></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>优点：<ol><li>使类局部性。该类不会以你不期望的方式在函数外部被执行使用；</li><li>性能。查找局部变量要比查找全局变量快得多。如果您创建了大量实例，这可能会提高使用全局类的性能。然而，通过默认参数/局部变量来抵消这种优势是<strong>及其</strong>容易的。</li></ol></li><li>缺点：<ol><li>可读性。除非类非常容易，否则函数将不可避免地增长变得非常长，会使代码丧失可读性。此外由于<code>Python</code>中使用缩进，如果你的外部函数某处嵌套循环，则会影响可读性；</li><li>性能。类在每一次函数调用时都将被重新编译。虽然不会很耗时，但还是会花一点时间。如果你原来的<code>function</code>很快，那么这个（引入本地类）成本可能有点高。</li></ol></li></ul><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>定义全局的类，如果你想定义成私有的，使用下划线即可，例如<code>_MyClass()</code>，因为我们知道这是<code>Python</code>中约定好的。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FunkyClass</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;args is <span class="subst">&#123;args&#125;</span>,kwargs is <span class="subst">&#123;kwargs&#125;</span>.&#x27;</span>)</span><br><span class="line">        self.data = <span class="string">&#x27;This is dunder init innner of FunkyClass&#x27;</span></span><br><span class="line">        self.bar_data = kwargs.get(<span class="string">&#x27;bar_data&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_funky</span>(<span class="params">self, inner_data</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;The inner_data of inner get_funky() is &#123;inner_data&#125;, outer of inner data is &#123;bar_data&#125;.&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            inner_data=inner_data, bar_data=self.bar_data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normal_some_funky_data_structure</span>(<span class="params">bar_data=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> _FunkyClass(bar_data=bar_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_normal_some_funky_data_structure</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> _FunkyClass</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    foo = normal_some_funky_data_structure(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">    foo_bar = normal_some_funky_data_structure(<span class="string">&#x27;foo_bar&#x27;</span>)</span><br><span class="line">    foo.get_funky(<span class="string">&#x27;baz&#x27;</span>)</span><br><span class="line">    foo_bar.get_funky(<span class="string">&#x27;baz&#x27;</span>)</span><br><span class="line">    print(<span class="built_in">isinstance</span>(foo, _FunkyClass))     <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">    c_foo = call_normal_some_funky_data_structure()(bar_data=<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">    c_fb = call_normal_some_funky_data_structure()(bar_data=<span class="string">&#x27;foo_bar&#x27;</span>)</span><br><span class="line">    c_foo.get_funky(<span class="string">&#x27;baz&#x27;</span>)</span><br><span class="line">    c_fb.get_funky(<span class="string">&#x27;baz&#x27;</span>)</span><br><span class="line">    print(<span class="built_in">isinstance</span>(c_foo, _FunkyClass))   <span class="comment"># True</span></span><br></pre></td></tr></table></figure><br>我们使用下面的代码做一个简单的性能测试：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Out</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self, _try_time=<span class="number">10</span></span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(_try_time):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_out</span>(<span class="params">n, try_time</span>):</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        _Out().test(try_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_in</span>(<span class="params">n, try_time</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self, _try_time=<span class="number">10</span></span>):</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(_try_time):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        Inner().test(try_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_mixed</span>(<span class="params">n, try_time, cls=_Out</span>):</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        cls().test(try_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m, test_try_time = <span class="number">1</span>, <span class="number">10</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    time of function_out is 0.0009663160890340805.</span></span><br><span class="line"><span class="string">    time of function_in is 0.009836168959736824.    # 相差一个数量级</span></span><br><span class="line"><span class="string">    time of function_mixed is 0.0009927581995725632.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># m, test_try_time = 1000, 10</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    time of function_out is 0.7052748203277588.</span></span><br><span class="line"><span class="string">    time of function_in is 0.7609770204871893.</span></span><br><span class="line"><span class="string">    time of function_mixed is 0.7371664671227336.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># m, test_try_time = 10000, 10</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    time of function_out is 6.49063076544553.</span></span><br><span class="line"><span class="string">    time of function_in is 6.0502378745004535.</span></span><br><span class="line"><span class="string">    time of function_mixed is 6.159397796727717.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    t1 = timeit.timeit(stmt=<span class="string">&quot;function_out(m, test_try_time)&quot;</span>,</span><br><span class="line">                       setup=<span class="string">&quot;from __main__ import function_out, m,test_try_time&quot;</span>, number=<span class="number">1000</span>)</span><br><span class="line">    t2 = timeit.timeit(stmt=<span class="string">&quot;function_in(m, test_try_time)&quot;</span>, setup=<span class="string">&quot;from __main__ import function_in, m,test_try_time&quot;</span>,</span><br><span class="line">                       number=<span class="number">1000</span>)</span><br><span class="line">    t3 = timeit.timeit(stmt=<span class="string">&quot;function_mixed(m, test_try_time)&quot;</span>,</span><br><span class="line">                       setup=<span class="string">&quot;from __main__ import function_mixed, m,test_try_time&quot;</span>, number=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f&#x27;time of function_out is <span class="subst">&#123;t1&#125;</span>.&#x27;</span>)</span><br><span class="line">    print(<span class="string">f&#x27;time of function_in is <span class="subst">&#123;t2&#125;</span>.&#x27;</span>)</span><br><span class="line">    print(<span class="string">f&#x27;time of function_mixed is <span class="subst">&#123;t3&#125;</span>.&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/22497985/is-it-a-bad-idea-to-define-a-local-class-inside-a-function-in-python">Is it a bad idea to define a local class inside a function in python?</a></li><li><a href="https://www.datacamp.com/community/tutorials/inner-classes-python">Inner Classes in Python</a></li></ul><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul><li><a href="https://stackoverflow.com/questions/4296677/creating-a-class-within-a-function-and-access-a-function-defined-in-the-containi">Creating a class within a function and access a function defined in the containing function’s scope</a></li><li><a href="https://stackoverflow.com/questions/20246523/how-references-to-variables-are-resolved-in-python">How references to variables are resolved in Python</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获取到指定日期之后安装的 Python 模块</title>
      <link href="blog/2019-12-07/how-can-get-all-packages-installed-after-a-certain-date-or-time-of-pip/"/>
      <url>blog/2019-12-07/how-can-get-all-packages-installed-after-a-certain-date-or-time-of-pip/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天在装包的时候，不小心将本该装到 Python 虚拟环境中的包安装到了机器真实环境中，所以需要对其筛选并清除，那么如何找到特定日期之后安装的 Python 包呢？在 <a href="https://stackoverflow.com/questions/10256093/how-to-convert-ctime-to-datetime-in-python">这里</a> 找到了解决方案，最后做了一个简单的封装，如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created by imoyao at 2019/12/7 13:33</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">修改 specific_time（like:2019-12-07）,以找到该日期之后安装的 pip 包</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pip._internal.utils.misc <span class="keyword">import</span> get_installed_distributions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_packages</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取到所有安装的 packages</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    install_packages = get_installed_distributions()</span><br><span class="line">    <span class="keyword">return</span> install_packages</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_after_date_packages</span>(<span class="params">date=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取指定日期之后安装的 package</span></span><br><span class="line"><span class="string">    :param date:str, like:2019-12-07</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> date:</span><br><span class="line">        date = datetime.datetime.today().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    install_packages = get_all_packages()</span><br><span class="line">    <span class="keyword">for</span> package <span class="keyword">in</span> install_packages:</span><br><span class="line">        package_ctime = os.path.getctime(package.location)  <span class="comment"># package 创建时间</span></span><br><span class="line">        time_array = time.localtime(package_ctime)</span><br><span class="line">        strftime_package = time.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>, time_array)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> strftime_package &gt;= date:  <span class="comment"># 转换为 %Y-%m-%d 之后比较大小</span></span><br><span class="line">            <span class="comment"># 打印安装时间和 package 名称</span></span><br><span class="line">            print(time.strftime(<span class="string">&#x27;%Y-%m-%d-%H:%M:%S&#x27;</span>, time_array), package)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    specific_time = <span class="string">&#x27;2019-11-06&#x27;</span></span><br><span class="line">    get_after_date_packages(specific_time)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用的时候只需要将年月日以<code>%Y-%m-%d</code>的格式给出就可以打印出该日期之后安装的包了。</p><p>发现一个可以处理<code>卸载命令的增强，能删除卸载软件包的所有依赖关系问题</code>的包：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pef</span><br></pre></td></tr></table></figure><ul><li><a href="https://stackoverflow.com/questions/7915998/does-uninstalling-a-package-with-pip-also-remove-the-dependent-packages">remove a package plus unused dependencies.</a></li></ul><h2 id="举一反三，Linux-环境中的呢"><a href="#举一反三，Linux-环境中的呢" class="headerlink" title="举一反三，Linux 环境中的呢"></a>举一反三，Linux 环境中的呢</h2><ul><li><a href="https://www.ostechnix.com/list-installed-packages-sorted-installation-date-linux/">How To List Installed Packages Sorted By Installation Date In Linux</a></li><li><a href="https://askubuntu.com/questions/548683/how-can-one-remove-all-packages-installed-after-a-certain-date-time">How can one remove all packages installed after a certain date/time?</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pip </tag>
            
            <tag> 包管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ping 某个域名的详细过程</title>
      <link href="blog/2019-11-19/the-detail-of-ping-a-domain/"/>
      <url>blog/2019-11-19/the-detail-of-ping-a-domain/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="ICMP-协议"><a href="#ICMP-协议" class="headerlink" title="ICMP 协议"></a>ICMP 协议</h2><p>ICMP（Internet Control Message Protocol | <em>网络控制消息协议</em>）是 TCP/IP 协议族的一个子协议，工作在网络互联层（<em>网络层</em>）。ICMP 协议是一种面向无连接的协议，用于在 IP 主机、路由器之间传递出错报告控制信息。控制消息是指网络是否连通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><h3 id="常见报文类型"><a href="#常见报文类型" class="headerlink" title="常见报文类型"></a>常见报文类型</h3><table><thead><tr><th>ICMP 消息类型</th><th>用途说明</th></tr></thead><tbody><tr><td>回显请求</td><td>Ping 工具通过发送 ICMP 回显消息检查特定节点的 IPv4 连接以排查网络问题。类型值为 0</td></tr><tr><td>回显应答</td><td>节点发送回显答复消息响应 ICMP 回显消息。类型值为 8</td></tr><tr><td>重定向</td><td>路由器发送“重定向”消息，告诉发送主机到目标 IPv4 地址更好的路由。类型值为 5</td></tr><tr><td>源抑制</td><td>路由器发送“源结束”消息，告诉发送主机它们的 IPv4 数据报将被丢弃——因为路由器上发生了拥塞。于是，发送主机将以较低的频度发送数据报。类型值为 4</td></tr><tr><td>超时</td><td>这个消息有两种用途。第一，当超过 IP 生存期时向发送系统发出错误信息。第二，如果分段的 IP 数据报没有在某种期限内重新组合，这个消息将通知发送系统。类型值为 11</td></tr><tr><td>无法到达目标</td><td>路由器和目标主机发送“无法到达目标”消息，通知发送主机它们的数据无法传送。类型值为 3  </td></tr></tbody></table><p>其中无法到达目标消息中可以细分为一下几项：</p><table><thead><tr><th>无法到达目标消息</th><th>说明</th></tr></thead><tbody><tr><td>不能访问主机</td><td>路由器找不到目标的 IPv4 地址的路由时发送“不能访问主机”消息</td></tr><tr><td>无法访问协议</td><td>目标 IPv4 节点无法将 IPv4 报头中的“协议”字段与当前使用的 IPv4 客户端协议相匹配时会发送“无法访问协议”消息</td></tr><tr><td>无法访问端口</td><td>IPv4 节点在 UDP 报头中的“目标端口”字段与使用该 UDP 端口的应用程序相匹配时发送“无法访问端口”消息</td></tr><tr><td>需要分段但设置了 DF</td><td>当必须分段但发送节点在 IPv4 报头中设置了“不分段（DF）”标志时，IPv4 路由器会发送“需要分段但设置了 DF”消息</td></tr></tbody></table><h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h2><p>我们经常会遇到这样的问题：已经知道了一个主机的 IP 地址，需要找到其对应的物理地址（MAC <Media Access Control，介质访问控制> ）。因为将 IP 数据报封装到 MAC 帧里面的时候需要知道目的地址的 MAC 地址。地址解析协议 ARP 的作用就是根据主机的 IP 地址来获得物理地址。</p><p>每个主机都设有一个 ARP 高速缓存（ARP cache），这里面放着的是主机已经知道的 IP 地址和 MAC 地址的映射表，并且这个映射表还是经常动态更新的。</p><h3 id="Address-Resolution-Protocol-——-ARP-的工作原理"><a href="#Address-Resolution-Protocol-——-ARP-的工作原理" class="headerlink" title="Address Resolution Protocol —— ARP 的工作原理"></a>Address Resolution Protocol —— ARP 的工作原理</h3><p>当主机 A 想要同本局域网上的某个主机 B 发送 IP 数据报时，就先在其 ARP 高速缓存中查看有无主机 B 的 IP 地址。如果有，就在 ARP 高速缓存中查找其对应的硬件地址，再把这个硬件地址写入 MAC 帧里，然后通过局域网把 MAC 帧发往此硬件地址。也有可能在 ARP 高速缓存中查不到主机 B 的 IP 地址（主机 A 缓存为空，或主机 B 刚加入局域网），这样也就无法知道主机 B 的 MAC 地址，这时候就需要使用到 ARP 了。</p><p>按以下步骤来获得主机 B 的硬件地址。</p><ol><li><p>主机 A 的 ARP 进程在本局域网上以广播的形式发送一个 ARP 请求分组，格式如图 a 所示。</p>   <table>       <tbody>           <tr>               <td width="87">               <div><b>以太网目的</b><b>MAC</b></div>               </td>               <td width="82">               <div><b>以太网源</b><b>MAC</b></div>               </td>               <td width="41">               <div><b>帧类型</b></div>               </td>               <td width="57">               <div><b>硬件类型</b></div>               </td>               <td rowspan="2" width="24">               <div><b>4</b></div>               </td>               <td rowspan="2" width="24">               <div><b>6</b></div>               </td>               <td width="35">               <div><b>OP</b></div>               </td>               <td width="89">               <div><b>发送端以太网</b><b>MAC</b></div>               </td>               <td width="72">               <div><b>发送端</b><b>IP</b><b>地址</b></div>               </td>               <td width="84">               <div><b>目的</b><b>MAC</b></div>               </td>               <td width="48">               <div><b>目的</b><b>IP</b></div>               </td>           </tr>           <tr>               <td width="87">               <div>FF-FF-FF-FF-FF-FF</div>               </td>               <td width="82">               <div>00-50-56-C0-00-01</div>               </td>               <td width="41">               <div>0806</div>               </td>               <td width="57">               <div>0800</div>               </td>               <td width="35">               <div>1</div>               </td>               <td width="89">               <div>00-50-56-C0-00-01</div>               </td>               <td width="72">               <div>1.1.1.1</div>               </td>               <td width="84">               <div>00-00-00-00-00-00</div>               </td>               <td width="48">               <div>1.1.1.3</div>               </td>           </tr>       </tbody>   </table>   <p>其中 OP 含义可选为：1:表示 ARP 请求 2:表示 ARP 应答 3:表示 RARP 请求 4:表示 RARP 应答。<br>更多关于 ARP 报文参考该文<a href="https://blog.csdn.net/u011784495/article/details/71716586">ARP 协议报文格式及 ARP 表_changsoon-CSDN 博客_arp 报文格式</a></p></li><li><p>在本局域网上的所有主机上运行的 ARP 进程都收到了这个 ARP 请求分组。</p></li><li><p>主机 B 在 ARP 请求分组中发现了自己的 IP 地址，就向 A 主机发送 ARP 响应分组，以单播的形式直接发给 A，以如图 b 所示。同时主机 B 知道了 A 的 IP 地址和 MAC 地址，就将主机 A 的 IP 地址和 MAC 地址写入 ARP 高速缓存中，并按同样的 ARP 报文格式返回给主机 A。其他主机在对比 IP 地址之后，发现与自己的 IP 地址不同，就丢掉分组。</p>   <table border="1" cellspacing="0" cellpadding="0">       <tbody>           <tr>               <td width="124">               <div align="center"><b>目的地址</b></div>               </td>               <td width="124">               <div align="center"><b>源地址</b></div>               </td>               <td rowspan="2" width="63">               <div align="center"><b>…</b></div>               </td>               <td width="63">               <div align="center"><b>源</b><b>IP</b></div>               </td>               <td width="64">               <div align="center"><b>目的</b><b>IP</b></div>               </td>               <td rowspan="2" width="63">               <div align="center"><b>…</b></div>               </td>               <td width="67">               <div align="center"><b>ICMP</b><b>报文</b></div>               </td>           </tr>           <tr>               <td width="124">               <div align="center">00-50-56-C0-00-03</div>               </td>               <td width="124">               <div align="center">00-50-56-C0-00-01</div>               </td>               <td width="63">               <div align="center">1.1.1.1</div>               </td>               <td width="64">               <div align="center">1.1.1.3</div>               </td>               <td width="67">               <div align="center">Echo request</div>               </td>           </tr>       </tbody>   </table>   </li><li><p>主机 A 收到主机 B 的 ARP 响应分组之后，这样就知道了主机 B 的 MAC 地址，同时把主机 B 的 IP 地址和 MAC 地址写入 ARP 高速缓存，然后就把这个 MAC 封装到 ICMP 协议的二层报文中向主机 B 发送。</p>   <table border="1" cellspacing="0" cellpadding="0">       <tbody>           <tr>               <td width="124">               <div align="center"><b>目的地址</b></div>               </td>               <td width="124">               <div align="center"><b>源地址</b></div>               </td>               <td rowspan="2" width="63">               <div align="center"><b>…</b></div>               </td>               <td width="63">               <div align="center"><b>源</b><b>IP</b></div>               </td>               <td width="64">               <div align="center"><b>目的</b><b>IP</b></div>               </td>               <td rowspan="2" width="63">               <div align="center"><b>…</b></div>               </td>               <td width="67">               <div align="center"><b>ICMP</b><b>报文</b></div>               </td>           </tr>           <tr>               <td width="124">               <div align="center">00-50-56-C0-00-03</div>               </td>               <td width="124">               <div align="center">00-50-56-C0-00-01</div>               </td>               <td width="63">               <div align="center">1.1.1.1</div>               </td>               <td width="64">               <div align="center">1.1.1.3</div>               </td>               <td width="67">               <div align="center">Echo request</div>               </td>           </tr>       </tbody>   </table>   </li><li><p>当主机 B 收到了这个报文后，发现是主机 A 的 ICPM 回显请求，就按同样的格式，返回一个值给主机 A，这样就完成了同一网段内的 ping 过程。</p>   <table border="1" cellspacing="0" cellpadding="0" align="left">       <tbody>           <tr>               <td width="124">               <div align="center"><b>目的地址</b></div>               </td>               <td width="124">               <div align="center"><b>源地址</b></div>               </td>               <td rowspan="2" width="63">               <div align="center"><b>…</b></div>               </td>               <td width="63">               <div align="center"><b>源</b><b>IP</b></div>               </td>               <td width="64">               <div align="center"><b>目的</b><b>IP</b></div>               </td>               <td rowspan="2" width="63">               <div align="center"><b>…</b></div>               </td>               <td width="67">               <div align="center"><b>ICMP</b><b>报文</b></div>               </td>           </tr>           <tr>               <td width="124">               <div align="center">00-50-56-C0-00-01</div>               </td>               <td width="124">               <div align="center">00-50-56-C0-00-03</div>               </td>               <td width="63">               <div align="center">1.1.1.3</div>               </td>               <td width="64">               <div align="center">1.1.1.1</div>               </td>               <td width="67">               <div align="center">Echo answer</div>               </td>           </tr>       </tbody>   </table>   ​</li></ol><p><img src= "/img/loading.svg" data-lazy-src="/images/ARP.jpg" alt="ARP工作原理"></p><p>上面所描述的情况是在<strong>同一局域网</strong>下的情景，如果主机 A 要和不在同一局域网下的主机 B 进行通信，发送 IP 数据报。首先主机 A 将主机 B 的 IP 地址同自己的子网掩码进行比对，发现不在同一局域网内，则利用 ARP 请求分组，跟本局域网上的路由器的 IP 地址来获取路由器的 MAC 地址，然后将剩下的工作交给路由器去做即可。</p><h3 id="ARP-的四种典型情况"><a href="#ARP-的四种典型情况" class="headerlink" title="ARP 的四种典型情况"></a>ARP 的四种典型情况</h3><ol><li><p>发送方是主机，要把 IP 数据报发送到本网络上的另一个主机。这时利用 ARP 找到目的主机的硬件地址。</p></li><li><p>发送方是主机，要把 IP 数据报发送到另一个网络上的一个主机。这时利用 ARP 找到本网络上的一个路由器的硬件地址，然后把剩下的工作交给路由器去完成。</p></li><li><p>发送方是路由器，要把 IP 数据报发送到另一个网络上的一个主机。这时利用 ARP 找到本网络上的另一个路由器的硬件地址，然后把剩下的工作交给这个路由器去完成。</p></li><li><p>发送方是路由器，要把 IP 数据报发送到本网络上的一个主机。这时利用 ARP 找到目的主机的硬件地址。</p></li></ol><h2 id="ping-某个域名的整个过程"><a href="#ping-某个域名的整个过程" class="headerlink" title="ping 某个域名的整个过程"></a>ping 某个域名的整个过程</h2><p><strong>PING 是应用层直接使用网络层 ICMP 的一个例子，没有经过传输层的 TCP 或 UDP。</strong></p><ol><li><p>主机查找本地系统 hosts 文件的 DNS 缓存，如果存在该域名对应的 IP，则获取 IP，跳转到第 8 步；如果不存在，则继续。</p></li><li><p>主机向本网络路由器发起请求，查找路由 DNS 缓存，如果存在该域名对于的 IP，则获取 IP，跳转到第 8 步；如果不存在，则继续。</p></li><li><p>路由器向本地 ISP（互联网提供商）的 DNS 服务器发起请求，查找 DNS 服务器的缓存，如果存在该域名对应的 IP，则跳转到第 7 步；如果不存在，则继续。</p></li><li><p>本地 DNS 服务器向根域名服务器发起请求，根域名服务器告诉本地服务器，下一次应查询的顶级域名服务器 dns.com 的 IP 地址。</p></li><li><p>本地域名服务器向顶级域名服务器 dns.com 进行查询，顶级域名服务器 dns.com 告诉本地域名服务器，下一步应查询的权限服务器 dns.abc.com 的 IP 地址。</p></li><li><p>本地域名服务器向权限域名服务器 dns.abc.com 进行查询，权限域名服务器 dns.abc.com 告诉本地域名服务器，所查询的主机的 IP 地址。 </p></li><li><p>本地域名服务器最后把查询结果——该域名对应的 IP 地址告诉给主机。</p></li><li><p>至此，主机知道了该域名的 IP 地址。</p><hr><p> <em>以上部分主要是根据域名获取对应的 IP 地址，涉及 DNS 解析</em></p></li><li><p>主机通过子网掩码判断该 IP 地址是本网段还是跨网段，由于本网段比较简单，我们以跨网段进行讲解。</p></li><li><p>主机先查看本地 ARP 高速缓存，查看表中是否有本网络路由器（网关）的 MAC 地址，如果有，则获取 MAC 地址，跳转到第 12 步；如果没有，则继续。</p></li><li><p>主机使用 ARP 解析协议获取到本网段路由的 MAC 地址。</p></li><li><p>至此，主机知道本网络一个路由的 MAC 地址。</p><hr><p><em>以上部分主要是获取本网络一个路由的 MAC 地址，涉及 ARP</em></p></li><li><p>主机将 ICMP 报文封装成 IP 数据报，IP 数据报的源地址为主机的 IP 地址，目的地址是域名对应的 IP 地址；</p></li><li><p>主机将 IP 数据报封装成 MAC 帧，MAC 帧的源地址为主机的 MAC 地址，目的地址是路由器的 MAC 地址；</p></li><li><p>路由器接收到 ICMP 报文之后，发现 MAC 帧的目的地址是自己，IP 地址是主机想要访问的 IP 地址，则将 MAC 帧的源地址改为自己的 MAC 地址，目的地址改为本网段另一个路由的 MAC 地址（也要通过 ARP 协议获取），转发下去。</p></li><li><p>直到最后一个路由根据 ARP 协议，找到了主机想要访问的 IP 地址对应的主机的 MAC 地址，然后将 ICMP 报文封装成 MAC 帧发送给该域名主机。</p></li><li><p>由于 ARP 协议具有相互学习性，域名主机接收到主机发送的 ICMP 回送请求报文之后，将向本网络路由发送 ICMP 回送回答报文，该路由又会转发下去。</p></li><li><p>当主机收到域名主机发送的 ICMP 回送回答报文之后，这样就表明该主机到域名主机是连通可达的。</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/guoweimelon/article/details/50865642">ping 某个域名的详细过程</a><br><a href="https://blog.51cto.com/wanicy/335207">ping 过程详解</a><br><a href="http://www.firewall.cx/networking-topics/routing/181-routing-process.html">THE IP ROUTING PROCESS - STEP-BY-STEP ANALYSIS</a><br><a href="https://www.jianshu.com/p/65710069d934">理解 ARP 协议</a><br><a href="https://cizixs.com/2017/07/31/arp-protocol/">ARP 协议解析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装 Python3 提示找不到 _ctypes 模块</title>
      <link href="blog/2019-11-12/no-module-named-ctypes/"/>
      <url>blog/2019-11-12/no-module-named-ctypes/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天在虚拟机安装 Python3 的时候遇到下面的报错：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">File <span class="string">&quot;/usr/local/lib/python3.7/multiprocessing/sharedctypes.py&quot;</span>, line 10, <span class="keyword">in</span> &lt;</span><br><span class="line">module&gt;</span><br><span class="line">   import ctypes</span><br><span class="line">   File <span class="string">&quot;/usr/local/lib/python3.7/ctypes/__init__.py&quot;</span>, line 7, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      from _ctypes import Union, Structure, Array</span><br><span class="line">ImportError: No module named <span class="string">&#x27;_ctypes&#x27;</span></span><br></pre></td></tr></table></figure></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/Fedora/CentOS</span></span><br><span class="line">sudo yum install libffi-devel</span><br><span class="line">---</span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu:</span></span><br><span class="line">sudo apt-get install libffi-dev</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://stackoverflow.com/questions/27022373/python3-importerror-no-module-named-ctypes-when-using-value-from-module-mul">ImportError: No module named ‘_ctypes’</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次 MySQL 内存不足错误</title>
      <link href="blog/2019-11-05/mysqld-out-of-memory/"/>
      <url>blog/2019-11-05/mysqld-out-of-memory/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>今天在访问博客的时候，登录首页发现无法正常加载博文。因为之前也出现过这种错误，怀疑还是因为数据库的问题，所以果断查看 MySQL 日志：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /var/<span class="built_in">log</span>/mariadb/mariadb.log </span><br></pre></td></tr></table></figure><br>gg 打到文件最后，分析日志：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">191104 17:48:04 mysqld_safe Number of processes running now: 0</span><br><span class="line">191104 17:48:05 mysqld_safe mysqld restarted</span><br><span class="line">191104 17:48:05 [Note] &#x2F;usr&#x2F;libexec&#x2F;mysqld (mysqld 5.5.64-MariaDB) starting as process 11169 ...</span><br><span class="line">191104 17:48:05 InnoDB: The InnoDB memory heap is disabled</span><br><span class="line">191104 17:48:05 InnoDB: Mutexes and rw_locks use GCC atomic builtins</span><br><span class="line">191104 17:48:05 InnoDB: Compressed tables use zlib 1.2.7</span><br><span class="line">191104 17:48:05 InnoDB: Using Linux native AIO</span><br><span class="line">191104 17:48:05 InnoDB: Initializing buffer pool, size &#x3D; 128.0M</span><br><span class="line">InnoDB: mmap(137756672 bytes) failed; errno 12</span><br><span class="line">191104 17:48:05 InnoDB: Completed initialization of buffer pool</span><br><span class="line">191104 17:48:05 InnoDB: Fatal error: cannot allocate memory for the buffer pool</span><br><span class="line">**错误信息从此行开始**</span><br><span class="line">191104 17:48:05 [ERROR] Plugin &#39;InnoDB&#39; init function returned error.</span><br><span class="line">191104 17:48:05 [ERROR] Plugin &#39;InnoDB&#39; registration as a STORAGE ENGINE failed.</span><br><span class="line">191104 17:48:05 [ERROR] mysqld: Out of memory (Needed 128917504 bytes)</span><br><span class="line">191104 17:48:05 [Note] Plugin &#39;FEEDBACK&#39; is disabled.</span><br><span class="line">191104 17:48:05 [ERROR] Unknown&#x2F;unsupported storage engine: InnoDB</span><br><span class="line">191104 17:48:05 [ERROR] Aborting</span><br><span class="line"></span><br><span class="line">191104 17:48:05 [Note] &#x2F;usr&#x2F;libexec&#x2F;mysqld: Shutdown complete</span><br><span class="line">**服务停止**</span><br><span class="line">191104 17:48:05 mysqld_safe mysqld from pid file &#x2F;var&#x2F;run&#x2F;mariadb&#x2F;mariadb.pid ended</span><br></pre></td></tr></table></figure><br>确认是 MySQL 服务的问题，首先手动把 MySQL 启动起来，保证应用正常使用：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><br>之后服务恢复正常</p><h2 id="增加-swap-分区"><a href="#增加-swap-分区" class="headerlink" title="增加 swap 分区"></a>增加 swap 分区</h2><div class="note warning modern"><p>使用 swap 必须要知道它存在的缺点，以便判断何时使用交换分区。<br>使用交换分区的好处是可以一定程度的缓解内存空间紧张的问题。<br>然而，由于 CPU 所读取的数据都来自于内存，而交换分区则是存放在磁盘上的，磁盘的速度和内存比较起来慢了好几个数量级，如果不停的读写 swap，那么对系统的性能肯定有影响，尤其是当系统内存很吃紧的时候，读写 swap 空间发生的频率会很高，导致系统运行很慢。</p></div><p>因为本身内存很小只有 1G，而 5.6（？）之后默认使用 innodb 引擎，这个引擎又很消耗内存。所以最好的办法是使用大内存或者将 MySQL 降级到一个合适的版本，但是，如果不是真的喜欢，谁愿意做一条舔狗呢？如果不是没钱，谁愿意用低配服务器呢。所以，退而求其次的办法就是增加一个 swap 分区，在内存不足时，使用 swap 分区。<br>接下来记录创建一个 1024M 的 swap 分区的办法。<br><div class="note info modern"><p><strong>更新</strong><br>交换分区大小的设置建议值：<br>内存小于 4GB 时，推荐不少于 2GB 的 swap 空间<br>内存 4GB~16GB，推荐不少于 4GB 的 swap 空间</p></div></p><h3 id="创建-swap-文件"><a href="#创建-swap-文件" class="headerlink" title="创建 swap 文件"></a>创建 swap 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1024 of=1048576 <span class="comment"># 1024*1024</span></span><br></pre></td></tr></table></figure><h3 id="配置-swap-文件"><a href="#配置-swap-文件" class="headerlink" title="配置 swap 文件"></a>配置 swap 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkswap /swapfile</span><br></pre></td></tr></table></figure><h3 id="立即启用-swap-文件"><a href="#立即启用-swap-文件" class="headerlink" title="立即启用 swap 文件"></a>立即启用 swap 文件</h3><p>而不是重启之后才生效<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapon /swapfile</span><br></pre></td></tr></table></figure></p><h3 id="配置重启生效"><a href="#配置重启生效" class="headerlink" title="配置重启生效"></a>配置重启生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br></pre></td></tr></table></figure><p>最后一行追加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/swapfile       swap    swap defaults   0    0</span><br></pre></td></tr></table></figure></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_0_16_centos imoyao]<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            991         697          70           0         223         120</span><br><span class="line">Swap:          1023           0        1023</span><br><span class="line">[root@VM_0_16_centos imoyao]<span class="comment"># cat /proc/swaps </span></span><br><span class="line">FilenameTypeSizeUsedPriority</span><br><span class="line">/swapfile                               file1048572520-2</span><br></pre></td></tr></table></figure><p>参考<a href="https://www.aimz8.com/?p=286">MariaDB 在低配 VPS 上崩溃问题处理方案</a></p><h2 id="设置-MySQL-自动重启"><a href="#设置-MySQL-自动重启" class="headerlink" title="设置 MySQL 自动重启"></a>设置 MySQL 自动重启</h2><h3 id="是否设置-MySQL-服务-enable"><a href="#是否设置-MySQL-服务-enable" class="headerlink" title="是否设置 MySQL 服务 enable"></a>是否设置 MySQL 服务 enable</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl is-enabled mariadb</span><br></pre></td></tr></table></figure><p>如果返回不是<code>enabled</code>则使用命令<code>systemctl enable mariadb</code>进行使能</p><h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/systemd/system/multi-user.target.wants/mariadb.service</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>在<code>Service</code>配置项中增加如下配置:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nu:30</span><br><span class="line">[Service]</span><br><span class="line">……</span><br><span class="line">Restart&#x3D;always</span><br><span class="line">RestartSec&#x3D;3</span><br><span class="line">……</span><br></pre></td></tr></table></figure></p><h3 id="配置生效"><a href="#配置生效" class="headerlink" title="配置生效"></a>配置生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新启动来重导Systemd配置：</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重新启动MariaDB服务</span></span><br><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><p>参见</p><ul><li><a href="https://www.codebye.com/how-to-config-centos7-mariadb-service-auto-start-after-reboot-or-crash.html">如何配置 CentOS7 mariadb 服务在崩溃或重启后自动启动</a>   </li><li><a href="http://chengms.com/?p=151">mariadb 在低配 ECS 上崩溃问题</a>  </li></ul><h2 id="修改-MySQL-配置"><a href="#修改-MySQL-配置" class="headerlink" title="修改 MySQL 配置"></a>修改 MySQL 配置</h2><p>(调小 innodb_buffer_pool_size 参数)<br>参见</p><ul><li><a href="https://www.v2ex.com/t/276069">MySQL5.7.12 占用内存过多的原因到底是什么?</a> </li><li><a href="https://www.v2ex.com/t/276069">MySQL 调优之 innodb_buffer_pool_size 大小设置</a>  </li><li><a href="https://segmentfault.com/a/1190000017992793">mariadb 内存占用优化</a>  </li><li><a href="https://segmentfault.com/a/1190000003072283">MySQL 必须调整的 10 项配置优化</a>  </li><li><a href="https://blog.csdn.net/sunny05296/article/details/78916775">MySQL 调优之 innodb_buffer_pool_size 大小设置</a>  </li><li><a href="http://www.bluestep.cc/%E4%BD%8E%E9%85%8D%E6%9C%8D%E5%8A%A1%E5%99%A8vps%E8%BF%90%E8%A1%8Cmysql%E7%BB%8F%E5%B8%B8%E5%B4%A9%E6%BA%83%EF%BC%9Aerror-mysqld-out-of-memory-needed-128663552-bytes/">低配服务器 VPS 运行 MYSQL 经常崩溃：[ERROR] mysqld: Out of memory (Needed 128663552 bytes)</a>  </li></ul><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br><span class="line">mysql  Ver 15.1 Distrib 5.5.64-MariaDB, <span class="keyword">for</span> Linux (x86_64) using readline 5.1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_0_16_centos imoyao]<span class="comment"># cat /etc/system-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br></pre></td></tr></table></figure><p><strong>注意</strong>：文中以<code>MariaDB</code>示例，关于其与<code>MySQL</code>的关系在此不做过多说明，如果使用<code>MySQL</code>作为数据库，以上配置命令可能略有不同。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://bobcares.com/blog/mysqld-out-of-memory/">“mysqld: out of memory” – 4 major reasons why you get this error</a></li><li><a href="https://blog.konghy.cn/2019/11/16/linux-swap/">Linux 创建交换（swap）分区 | Huoty’s Blog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> IdealYard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> MariaDB </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph-calamari 安装记录</title>
      <link href="blog/2019-10-23/ceph-calamari-install-guide/"/>
      <url>blog/2019-10-23/ceph-calamari-install-guide/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div class="note danger no-icon modern"><h2 id="过时提示-Deprecated"><a href="#过时提示-Deprecated" class="headerlink" title="过时提示 @Deprecated"></a>过时提示 @Deprecated</h2><p>基于<a href="http://liyichao.github.io/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-ceph-mgr.html"><em>本文</em></a>提到的原因，不再对该项目进行跟进、维护和继续探索。该文不再更新。</p></div><hr><h2 id="克隆源码"><a href="#克隆源码" class="headerlink" title="克隆源码"></a>克隆源码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /tmp/calamari-repo</span><br><span class="line"><span class="built_in">cd</span> /tmp/calamari-repo </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ceph/calamari.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ceph/Diamond.git </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ceph/calamari-clients.git</span><br></pre></td></tr></table></figure><h2 id="构建-calamari-server-的-rpm-包"><a href="#构建-calamari-server-的-rpm-包" class="headerlink" title="构建 calamari server 的 rpm 包"></a>构建 calamari server 的 rpm 包</h2><h2 id="生成-diamond-安装包"><a href="#生成-diamond-安装包" class="headerlink" title="生成 diamond 安装包"></a>生成 diamond 安装包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../Diamond</span><br><span class="line">git checkout origin/calamari</span><br><span class="line">yum install rpm-build -y</span><br><span class="line">make rpm</span><br></pre></td></tr></table></figure><p>将 diamond-<version>.noarch.rpm 复制到所有的 ceph 服务器，执行安装：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> dist/</span><br><span class="line"><span class="comment"># 方案1</span></span><br><span class="line">yum install python-configobj</span><br><span class="line">rpm -ivh diamond-&lt;version&gt;.noarch.rpm</span><br><span class="line"><span class="comment"># 方案2</span></span><br><span class="line">yum localinstall diamond-3.4.67-0.noarch.rpm</span><br></pre></td></tr></table></figure></p><h2 id="安装-salt-minion"><a href="#安装-salt-minion" class="headerlink" title="安装 salt-minion"></a>安装 salt-minion</h2><p>在所有的 ceph 服务器上安装 salt-minion<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install salt-minion</span><br></pre></td></tr></table></figure><br>创建<code>/etc/salt/minion.d/calamari.conf</code>，内容为：<br>master: {SERVER NODE HOSTNAME}<br>{SERVER NODE HOSTNAME}对应 calamari 服务器的域名。<br>启动 salt-minion 服务：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service salt-minion restart</span><br></pre></td></tr></table></figure></p><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><h3 id="Ceph-servers-are-connected-to-Calamari-but-no-Ceph-cluster-has-been-created-yet"><a href="#Ceph-servers-are-connected-to-Calamari-but-no-Ceph-cluster-has-been-created-yet" class="headerlink" title="Ceph servers are connected to Calamari, but no Ceph cluster has been created yet"></a>Ceph servers are connected to Calamari, but no Ceph cluster has been created yet</h3><p>安装完成之后，首页出现如下提示：</p><p><img src= "/img/loading.svg" data-lazy-src="/images/snipaste_20191106_133550.jpg" alt="New-Calamari-Installation"><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">This appears to be the first time you have started Calamari and there are no clusters currently configured.</span><br><span class="line"></span><br><span class="line">*some* Ceph servers are connected to Calamari, but no Ceph cluster has been</span><br><span class="line">created yet. Please use ceph-deploy to create a cluster; please see the</span><br><span class="line">Inktank Ceph Enterprise documentation for more details.</span><br></pre></td></tr></table></figure><br>具体<a href="https://github.com/ceph/calamari/issues/518">见此处</a>    </p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ul><li>执行<code>salt &#39;*&#39; ceph.get_heartbeats</code>，返回如下:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node2:</span><br><span class="line">    The minion function caused an exception: Traceback (most recent call last):</span><br><span class="line">      File &quot;/usr/lib/python2.7/site-packages/salt/minion.py&quot;, line 1200, in _thread_return</span><br><span class="line">        return_data = func(*args, **kwargs)</span><br><span class="line">      File &quot;/var/cache/salt/minion/extmods/modules/ceph.py&quot;, line 534, in get_heartbeats</span><br><span class="line">        service_data = service_status(filename)</span><br><span class="line">      File &quot;/var/cache/salt/minion/extmods/modules/ceph.py&quot;, line 593, in service_status</span><br><span class="line">        fsid = json.loads(admin_socket(socket_path, [&#x27;status&#x27;], &#x27;json&#x27;))[&#x27;cluster_fsid&#x27;]</span><br><span class="line">    KeyError: &#x27;cluster_fsid&#x27;</span><br><span class="line">…… # It is same.</span><br><span class="line">    The minion function caused an exception: Traceback (most recent call last):</span><br><span class="line">      File &quot;/usr/lib/python2.7/site-packages/salt/minion.py&quot;, line 1200, in _thread_return</span><br><span class="line">        return_data = func(*args, **kwargs)</span><br><span class="line">      File &quot;/var/cache/salt/minion/extmods/modules/ceph.py&quot;, line 534, in get_heartbeats</span><br><span class="line">        service_data = service_status(filename)</span><br><span class="line">      File &quot;/var/cache/salt/minion/extmods/modules/ceph.py&quot;, line 593, in service_status</span><br><span class="line">        fsid = json.loads(admin_socket(socket_path, [&#x27;status&#x27;], &#x27;json&#x27;))[&#x27;cluster_fsid&#x27;]</span><br><span class="line">    KeyError: &#x27;cluster_fsid&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>修改代码<code>AdminSocketError</code> 为 <code>(AdminSocketError,KeyError)</code>：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fsid = json.loads(admin_socket(socket_path, [<span class="string">&#x27;status&#x27;</span>], <span class="string">&#x27;json&#x27;</span>))[<span class="string">&#x27;cluster_fsid&#x27;</span>]</span><br><span class="line"><span class="keyword">except</span> (AdminSocketError,KeyError):  <span class="comment"># 此处也可以直接使用 Exception</span></span><br><span class="line">    <span class="comment"># older osd/mds daemons don&#x27;t support &#x27;status&#x27;; try our best</span></span><br><span class="line">   <span class="keyword">pass</span>             <span class="comment"># 此处代码不变</span></span><br></pre></td></tr></table></figure><strong>注意</strong>: 在<code>admin</code>节点，代码可能在 <code>/opt/calamari/salt/salt/_modules/ceph.py</code> 而在其他节点，代码可能在<code>/var/cache/salt/minion/extmods/modules/ceph.py</code>。</li><li>在<code>admin</code>节点执行<code>salt &quot;*&quot; saltutil.sync_all</code>或者<code>systemctl restart salt-minion</code>，返回:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node3:</span><br><span class="line">    ----------</span><br><span class="line">    beacons:</span><br><span class="line">    grains:</span><br><span class="line">    modules:</span><br><span class="line">    output:</span><br><span class="line">    renderers:</span><br><span class="line">    returners:</span><br><span class="line">    sdb:</span><br><span class="line">    states:</span><br><span class="line">    utils:</span><br><span class="line">……</span><br><span class="line">node2:</span><br><span class="line">    ----------</span><br><span class="line">    beacons:</span><br><span class="line">    grains:</span><br><span class="line">    modules:</span><br><span class="line">    output:</span><br><span class="line">    renderers:</span><br><span class="line">    returners:</span><br><span class="line">    sdb:</span><br><span class="line">    states:</span><br><span class="line">    utils:</span><br></pre></td></tr></table></figure></li><li>然后，在<code>admin</code>节点执行<code>salt &#39;*&#39; ceph.get_heartbeats</code>，返回:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node2:</span><br><span class="line">    |_</span><br><span class="line">      ----------</span><br><span class="line">      boot_time:</span><br><span class="line">          1573005001</span><br><span class="line">      ceph_version:</span><br><span class="line">          2:13.2.6-0.el7</span><br><span class="line">      services:</span><br><span class="line">          ----------</span><br><span class="line">          ceph-mgr.node2:</span><br><span class="line">              ----------</span><br><span class="line">              cluster:</span><br><span class="line">                  ceph</span><br><span class="line">              fsid:</span><br><span class="line">                  47071b01-394e-4a62-bb2d-cfe3c19637f7</span><br><span class="line">              id:</span><br><span class="line">                  node2</span><br><span class="line">              status:</span><br><span class="line">                  None</span><br><span class="line">              type:</span><br><span class="line">                  mgr</span><br><span class="line">              version:</span><br><span class="line">                  13.2.6</span><br><span class="line">          ceph-osd.0:</span><br><span class="line">              ----------</span><br><span class="line">              cluster:</span><br><span class="line">                  ceph</span><br><span class="line">              fsid:</span><br><span class="line">                  47071b01-394e-4a62-bb2d-cfe3c19637f7</span><br><span class="line">              id:</span><br><span class="line">                  0</span><br><span class="line">              status:</span><br><span class="line">                  None</span><br><span class="line">              type:</span><br><span class="line">                  osd</span><br><span class="line">              version:</span><br><span class="line">                  13.2.6</span><br><span class="line">    |_</span><br><span class="line">      ----------</span><br><span class="line">……</span><br></pre></td></tr></table></figure></li><li>访问页面，获取到如此显示<br><img src= "/img/loading.svg" data-lazy-src="/images/snipaste_20191106_102957.jpg" alt="500_error">   <h3 id="500-错误，请联系管理员"><a href="#500-错误，请联系管理员" class="headerlink" title="500 错误，请联系管理员"></a>500 错误，请联系管理员</h3><a href="https://tracker.ceph.com/issues/13476">此处</a>有关于该问题的描述。</li><li>查看 calamari 日志<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tailf /var/log/calamari/calamari.log </span><br></pre></td></tr></table></figure>获取到以下错误：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2019-11-05 21:02:19,605 - metric_access - django.request No graphite data for ceph.cluster.47071b01-394e-4a62-bb2d-cfe3c19637f7.df.total_used_bytes</span><br><span class="line">2019-11-05 21:02:19,606 - metric_access - django.request No graphite data for ceph.cluster.47071b01-394e-4a62-bb2d-cfe3c19637f7.df.total_used</span><br><span class="line">2019-11-05 21:02:19,606 - metric_access - django.request No graphite data for ceph.cluster.47071b01-394e-4a62-bb2d-cfe3c19637f7.df.total_space</span><br><span class="line">2019-11-05 21:02:19,607 - metric_access - django.request No graphite data for ceph.cluster.47071b01-394e-4a62-bb2d-cfe3c19637f7.df.total_avail</span><br><span class="line">2019-11-05 21:02:19,608 - ERROR - django.request Internal Server Error: /api/v1/cluster/47071b01-394e-4a62-bb2d-cfe3c19637f7/space</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/django/core/handlers/base.py&quot;, line 115, in get_response</span><br><span class="line">    response = callback(request, *callback_args, **callback_kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/rest_framework/viewsets.py&quot;, line 78, in view</span><br><span class="line">    return self.dispatch(request, *args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/rpc_view.py&quot;, line 94, in dispatch</span><br><span class="line">    self.client.close()</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/zerorpc/core.py&quot;, line 293, in close</span><br><span class="line">    SocketBase.close(self)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/zerorpc/socket.py&quot;, line 37, in close</span><br><span class="line">    self._events.close()</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/zerorpc/events.py&quot;, line 198, in close</span><br><span class="line">    self._send.close()</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/zerorpc/events.py&quot;, line 50, in close</span><br><span class="line">    self._send_task.kill()</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/gevent/greenlet.py&quot;, line 235, in kill</span><br><span class="line">    waiter.get()</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/gevent/hub.py&quot;, line 575, in get</span><br><span class="line">    return self.hub.switch()</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/gevent/hub.py&quot;, line 338, in switch</span><br><span class="line">    return greenlet.switch(self)</span><br><span class="line">LostRemote: Lost remote after 10s heartbeat</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">2019-11-05 23:59:43,586 - ERROR - django.request Internal Server Error: /api/v1/cluster/47071b01-394e-4a62-bb2d-cfe3c19637f7/health_counters</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/django/core/handlers/base.py&quot;, line 115, in get_response</span><br><span class="line">    response = callback(request, *callback_args, **callback_kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/rest_framework/viewsets.py&quot;, line 78, in view</span><br><span class="line">    return self.dispatch(request, *args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/rpc_view.py&quot;, line 91, in dispatch</span><br><span class="line">    return super(RPCViewSet, self).dispatch(request, *args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/django/views/decorators/csrf.py&quot;, line 77, in wrapped_view</span><br><span class="line">    return view_func(*args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/rest_framework/views.py&quot;, line 399, in dispatch</span><br><span class="line">    response = self.handle_exception(exc)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/rpc_view.py&quot;, line 108, in handle_exception</span><br><span class="line">    return super(RPCViewSet, self).handle_exception(exc)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/rest_framework/views.py&quot;, line 396, in dispatch</span><br><span class="line">    response = handler(request, *args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/v1.py&quot;, line 315, in get</span><br><span class="line">    counters = self.generate(osd_data, mds_data, mon_status, pg_summary)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/v1.py&quot;, line 167, in generate</span><br><span class="line">    &#x27;mds&#x27;: cls._calculate_mds_counters(mds_map),</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/v1.py&quot;, line 295, in _calculate_mds_counters</span><br><span class="line">    up = len(mds_map[&#x27;up&#x27;])</span><br><span class="line">TypeError: &#x27;NoneType&#x27; object has no attribute &#x27;__getitem__&#x27;</span><br><span class="line"></span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line">2019-11-06 00:00:53,567 - ERROR - django.request Internal Server Error: /api/v1/cluster/47071b01-394e-4a62-bb2d-cfe3c19637f7/osd</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/django/core/handlers/base.py&quot;, line 115, in get_response</span><br><span class="line">    response = callback(request, *callback_args, **callback_kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/rest_framework/viewsets.py&quot;, line 78, in view</span><br><span class="line">    return self.dispatch(request, *args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/rpc_view.py&quot;, line 91, in dispatch</span><br><span class="line">    return super(RPCViewSet, self).dispatch(request, *args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/django/views/decorators/csrf.py&quot;, line 77, in wrapped_view</span><br><span class="line">    return view_func(*args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/rest_framework/views.py&quot;, line 399, in dispatch</span><br><span class="line">    response = self.handle_exception(exc)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/rpc_view.py&quot;, line 108, in handle_exception</span><br><span class="line">    return super(RPCViewSet, self).handle_exception(exc)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/rest_framework/views.py&quot;, line 396, in dispatch</span><br><span class="line">    response = handler(request, *args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/v1.py&quot;, line 417, in get</span><br><span class="line">    osds, osds_by_pg_state = self.generate(pg_summary, osd_map, server_info, servers)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_rest_api-0.1-py2.7.egg/calamari_rest/views/v1.py&quot;, line 365, in generate</span><br><span class="line">    for pool_id, osds in osd_map.osds_by_pool.items():</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_common-0.1-py2.7.egg/calamari_common/util.py&quot;, line 8, in wrapper</span><br><span class="line">    rv = function(*args)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_common-0.1-py2.7.egg/calamari_common/types.py&quot;, line 206, in osds_by_pool</span><br><span class="line">    for rule in [r for r in self.data[&#x27;crush&#x27;][&#x27;rules&#x27;] if r[&#x27;ruleset&#x27;] == pool[&#x27;crush_ruleset&#x27;]]:</span><br><span class="line">KeyError: &#x27;crush_ruleset&#x27;</span><br><span class="line">2019-11-06 00:00:54,566 - metric_access - django.request No graphite data for ceph.cluster.47071b01-394e-4a62-bb2d-cfe3c19637f7.pool.1.num_objects</span><br></pre></td></tr></table></figure>查看 <code>cthulhu</code> 日志<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tailf /var/log/calamari/cthulhu.log</span><br></pre></td></tr></table></figure>返回如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2019-11-05 22:05:31,371 - WARNING - cthulhu Ignoring event salt/job/20191105220531366943/ret/node1</span><br><span class="line">2019-11-05 22:05:31,371 - WARNING - cthulhu.request_collection on_completion: unknown jid 20191105220531366943, return: None</span><br><span class="line">2019-11-05 22:05:38,283 - WARNING - cthulhu.request_collection on_completion: unknown jid 20191105220538277178, return: None</span><br><span class="line">2019-11-05 22:05:38,283 - WARNING - cthulhu Ignoring event salt/job/20191105220538277178/ret/node3</span><br><span class="line">2019-11-05 22:05:38,383 - WARNING - cthulhu Ignoring event salt/job/20191105220538379133/ret/node2</span><br><span class="line">2019-11-05 22:05:38,384 - WARNING - cthulhu.request_collection on_completion: unknown jid 20191105220538379133, return: None</span><br><span class="line">2019-11-05 22:05:41,384 - WARNING - cthulhu Abandoning fetch for mds_map started at 2019-11-06 03:05:31.344465+00:00</span><br><span class="line">2019-11-05 22:05:41,385 - ERROR - cthulhu Exception handling message with tag ceph/cluster/47071b01-394e-4a62-bb2d-cfe3c19637f7</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_cthulhu-0.1-py2.7.egg/cthulhu/manager/cluster_monitor.py&quot;, line 244, in _run</span><br><span class="line">    self.on_heartbeat(data[&#x27;id&#x27;], data[&#x27;data&#x27;])</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_cthulhu-0.1-py2.7.egg/cthulhu/gevent_util.py&quot;, line 35, in wrapped</span><br><span class="line">    return func(*args, **kwargs)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_cthulhu-0.1-py2.7.egg/cthulhu/manager/cluster_monitor.py&quot;, line 346, in on_heartbeat</span><br><span class="line">    cluster_data[&#x27;versions&#x27;][sync_type.str])</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_cthulhu-0.1-py2.7.egg/cthulhu/manager/cluster_monitor.py&quot;, line 99, in on_version</span><br><span class="line">    self.fetch(reported_by, sync_type)</span><br><span class="line">  File &quot;/opt/calamari/venv/lib/python2.7/site-packages/calamari_cthulhu-0.1-py2.7.egg/cthulhu/manager/cluster_monitor.py&quot;, line 109, in fetch</span><br><span class="line">    client = LocalClient(config.get(&#x27;cthulhu&#x27;, &#x27;salt_config_path&#x27;))</span><br><span class="line">  File &quot;/usr/lib/python2.7/site-packages/salt/client/__init__.py&quot;, line 126, in __init__</span><br><span class="line">    self.opts = salt.config.client_config(c_path)</span><br><span class="line">  File &quot;/usr/lib/python2.7/site-packages/salt/config.py&quot;, line 2203, in client_config</span><br><span class="line">  File &quot;/usr/lib/python2.7/site-packages/salt/utils/xdg.py&quot;, line 13, in xdg_config_dir</span><br><span class="line">  File &quot;/opt/calamari/venv/lib64/python2.7/posixpath.py&quot;, line 269, in expanduser</span><br><span class="line">KeyError: &#x27;getpwuid(): uid not found: 0&#x27;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2></li><li><a href="https://www.cnblogs.com/gaohong/p/4669524.html">安装部署 Ceph Calamari</a></li><li><a href="https://www.cnblogs.com/flytor/p/11425135.html">在 CentOS 7 安装 Calamari</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CEPH </tag>
            
            <tag> Calamari </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 面试记录</title>
      <link href="blog/2019-10-18/interview-2019/"/>
      <url>blog/2019-10-18/interview-2019/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="FunPlus-小视频业务"><a href="#FunPlus-小视频业务" class="headerlink" title="FunPlus (小视频业务)"></a>FunPlus (小视频业务)</h2><h3 id="数据库的事务隔离机制"><a href="#数据库的事务隔离机制" class="headerlink" title="数据库的事务隔离机制"></a>数据库的事务隔离机制</h3><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><ul><li><p>READ UNCOMMITTED（未提交读）<br>这个级别，事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，被称为脏读（Dirty Read），这个级别性能不会比其他级别好太多，但缺乏其他级别的很多好处，一般很少使用。</p></li><li><p>READ COMMITTED（提交读）<br>这个级别是大多数数据库系统的默认隔离级别（但 MySQL 不是）。一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的。这个级别也叫作不可重复读（nonrepeatable read），因为两次执行同样的查询，可能会得到不一样的结果。</p></li><li><p>REPEATABLE READ（可重复读）<br>该级别保证了在同一个事务中多次读取同样记录的结果是一致的，但依然无法解决另外一个幻读（Phantom Read）的问题。幻读，指的是当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行（Phantom Row）。InnoDB 和 XtraDB 存储引擎通过多版本并发控制（MVCC）解决了幻读的问题。可重复读是 MySQL 的默认事务隔离级别。</p></li><li><p>SERIALIZABLE（可串行化）<br>最高的隔离级别，强制事务串行执行，避免了前面说的幻读的问题。但每次读都需要获得表级共享锁，读写相互都会阻塞。</p></li></ul><p>所有隔离级别</p><ol><li><p>read uncommitted : 读取尚未提交的数据 ：哪个问题都不能解决</p></li><li><p>read committed：读取已经提交的数据 ：可以解决脏读 —- oracle 默认的</p></li><li><p>repeatable read：可重复读：可以解决脏读 和 不可重复读 —- mysql 默认的</p></li><li><p>serializable：串行化：可以解决 脏读 不可重复读 和 虚读—-相当于锁表</p></li></ol><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读（read uncommited）</td><td>×</td><td>×</td><td>×</td></tr><tr><td>提交读（read commited）</td><td>√</td><td>×</td><td>×</td></tr><tr><td>可重复读（repeatable read）</td><td>√</td><td>√</td><td>×</td></tr><tr><td>串行化（serialziable)</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>注：×表示有该问题，√表示解决该问题。</p><ol><li><p>脏读：事务 A 读取了事务 B 更新的数据，然后 B 进行回滚操作，那么 A 读取到的数据是脏数据；</p></li><li><p>不可重复读：事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果不一致;</p></li><li><p>幻读：“当事务 A 要对数据表中某个字段的所有值进修改操作，此时有一个事务是插入一条记录 并提交给数据库，当提交事务 A 的用户再次查看时就会发现有一行数据未被修改，其实是事务 B 刚刚添加进去的”，这就是幻读；</p></li></ol><p>隔离级别越高，越能保证数据的完整性和统一性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为 Read Committed。它能够避免脏读，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。</p><p><a href="https://blog.csdn.net/xiancaione/article/details/82157019">MySQL 事务隔离机制&amp;锁</a><br><a href="https://blog.csdn.net/taylor_tao/article/details/7063639">MySQL 隔离级别</a><br><a href="https://blog.csdn.net/weixin_39651041/article/details/79980202">数据库事务和四种隔离级别</a><br><a href="http://tech.dianwoda.com/2018/09/06/rr-yu-rcge-chi-ji-bie-de-yi-tong/">RR(REPEATABLE-READ) 与 RC(READ-COMMITED) 隔离级别的异同</a></p><h3 id="flask-组件及源码剖析"><a href="#flask-组件及源码剖析" class="headerlink" title="flask 组件及源码剖析"></a>flask 组件及源码剖析</h3><ul><li><a href="https://www.jianshu.com/p/8f01ad89406d">Flask 自带的常用组件介绍</a><ol><li>session</li><li>flash，消息闪现</li><li>jsonify，返回 json 化数据</li><li>blueprint，构建大型应用条理化</li><li>g，Flask 中的全局变量 g ，可以为特定请求临时存储任何需要的数据并且是线程安全的，当请求结束时，这个对象会被销毁，下一个新的请求到来时又会产生一个新的 g。</li><li>abort，自定义错误</li><li>current_app，应用上下文</li></ol></li><li><a href="https://segmentfault.com/a/1190000009152550">一个 Flask 应用运行过程剖析</a></li><li><a href="https://www.jianshu.com/p/2a2407f66438">Flask 的请求处理流程和上下文</a></li><li><a href="https://cizixs.com/2017/01/10/flask-insight-introduction/">flask 源码解析</a></li><li><a href="https://www.cnblogs.com/weihengblog/p/9490561.html">Flask 源码解析:Flask 应用执行流程及原理</a></li><li><a href="https://www.cnblogs.com/Utopia-Clint/p/10824238.html">Flask 面试题</a></li><li><a href="https://blog.csdn.net/bestallen/article/details/54342120">Flask 源码解读 | 浅谈 Flask 基本工作流程</a></li></ul><h3 id="redis-中的数据类型，其中列表和有序集合有什么区别"><a href="#redis-中的数据类型，其中列表和有序集合有什么区别" class="headerlink" title="redis 中的数据类型，其中列表和有序集合有什么区别"></a>redis 中的数据类型，其中列表和有序集合有什么区别</h3><h4 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h4><p>List 内部数据结构是双向链表，可以在链表左、右两边分别操作，所以插入数据的速度很快。</p><p>也可以把 list 看成一种队列，所以在很多时候可以用 redis 用作消息队列，这个时候它的作用类似于 activeMq；</p><p>但是缺点就是在数据量比较大的时候，访问某个数据的时间可能会很长，但针对这种情况，可以使用 zset。</p><p>应用案例有时间轴数据，评论列表，消息传递等等，它可以提供简便的分页，读写操作。</p><h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h4><p>Set 就是一个集合，内部数据结构是整数集合(intset)、HASH 表，集合的概念就是一堆<strong>不重复值</strong>的组合。利用 Redis 提供的 Set 数据结构，可以存储一些集合性的数据。</p><p>比如在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。</p><p>因为 Redis 非常人性化的为集合提供了求交集、并集、差集等操作，那么就可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p><p>1.共同好友、二度好友<br>2.利用唯一性，可以统计访问网站的所有独立 IP<br>3.好友推荐的时候，根据 tag 求交集，大于某个阈值（threshold）就可以推荐</p><h4 id="Zset-集合（Sorted-Sets）"><a href="#Zset-集合（Sorted-Sets）" class="headerlink" title="Zset 集合（Sorted Sets）"></a>Zset 集合（Sorted Sets）</h4><p>Sorted Set 有点像 Set 和 Hash 的结合体。</p><p>和 Set 一样，它里面的元素是唯一的，但是 Set 里面的元素是无序的，而 Sorted Set 里面的元素都带有一个浮点值，叫做分数（score），内部数据结构<strong>跳跃表</strong>，所以这一点和 Hash 有点像，因为每个元素都映射到了一个值。<br>使它在 set 的基础上增加了一个<strong>顺序属性</strong>，这一属性在添加修改元素的时候可以指定，每次指定后，zset 会自动重新按新的值调整顺序。可以对指定键的值进行排序权重的设定，它应用排名模块比较多。</p><p>比如一个存储全班同学成绩的 Sorted Sets，其集合 value 可以是同学的学号，而 score 就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。另外还可以用 Sorted Sets 来做带权重的队列，比如普通消息的 score 为 1，重要消息的 score 为 2，然后工作线程可以选择按 score 的倒序来获取工作任务，让重要的任务优先执行。</p><p>zset 集合可以完成有序执行、按照<code>优先级执行</code>的情况；</p><ul><li><a href="https://www.cnblogs.com/xuzhengzong/p/7724841.html">redis 五种数据结构详解（string，list，set，zset，hash）</a>   </li><li><a href="https://www.cnblogs.com/tangge/p/10698821.html">Redis 实战 - list、set 和 Sorted Set</a>    </li></ul><h2 id="独到科技"><a href="#独到科技" class="headerlink" title="独到科技"></a>独到科技</h2><h3 id="进程线程以及协程"><a href="#进程线程以及协程" class="headerlink" title="进程线程以及协程"></a>进程线程以及协程</h3><ol><li><p>进程<br>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，<strong>进程是系统进行资源分配和调度的基本单位</strong>。每个进程都有自己的独立内存空间，不同进程通过进程间通信*（IPC）来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。</p></li><li><p>线程<br><strong>线程是进程的一个实体，是 CPU 调度和分派的基本单位</strong>，它是比进程更小的能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器，一组寄存器和栈)，但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p></li><li><p>协程<br>协程是一种<strong>用户态</strong>的<strong>轻量级线程</strong>，<strong>协程的调度完全由用户控制</strong>。<strong>协程拥有自己的寄存器上下文和栈</strong>。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。可以利用到并发优势，又可以<strong>避免反复系统调用和进程切换造成的开销</strong>。</p></li></ol><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>进程与线程比较<br>线程是指进程内的一个执行单元，也是进程内的可调度实体。线程与进程的区别:</li></ul><ol><li>地址空间:线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间；</li><li>资源拥有:进程是资源分配和拥有的单位，同一个进程内的线程共享进程的资源；</li><li>线程是处理器调度的基本单位，但进程不是；</li><li>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制；</li></ol><ul><li>协程与线程进行比较</li></ul><ol><li>一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样 python 中则能使用多核 CPU；</li><li>线程进程都是同步机制，而协程则是<strong>异步</strong>；</li><li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态；<br>内核态的线程是由操作系统来进行调度的，在切换线程上下文时，要先保存上一个线程的上下文，然后执行下一个线程，当条件满足时，切换回上一个线程，并恢复上下文。协程也是如此（指需要切换 → 保存 → 恢复上下文）。只不过，用户态的线程不是由操作系统来调度的，而是由程序员来调度的，是在用户态的。<br><a href="https://www.cnblogs.com/lxmhhy/p/6041001.html">进程和线程、协程的区别</a></li></ol><h3 id="二叉树的深度优先算法和广度优先算法"><a href="#二叉树的深度优先算法和广度优先算法" class="headerlink" title="二叉树的深度优先算法和广度优先算法"></a>二叉树的深度优先算法和广度优先算法</h3><p>二叉树的<strong>深度优先</strong>遍历的非递归的通用做法是<strong>采用栈</strong>，<strong>广度优先</strong>遍历的非递归的通用做法是<strong>采用队列</strong>。<br>1：树的深度优先遍历主要分为：前序遍历、中序遍历以及后序遍历</p><pre><code>- 前序遍历：若二叉树为空则结束，否则依次先访问根节点，然后访问左子树，最后访问右子树。- 中序遍历：若二叉树为空则结束，否则先访问根节点的左子树，然后访问根节点，最后访问右子数。- 后序遍历：若二叉树为空则结束，否则先访问根节点的左子树，然后访问右子数，最后访问根节点。 深度优先一般采用递归的方式实现，递归的深度为树的高度。</code></pre><p>2：树的广度优先算法：广度优先是按照层次来遍历树的节点，先是根节点，然后依次遍历第二层子节点，当第二层子节点遍历完后，在依次遍历第三层子节点。广度优先采用队列来记录当前可遍历的节点，当遍历某个节点时，将其左孩子和右孩子结点依次入队，待该层遍历完了以后，再依次遍历下一层儿子结点。<br>3：非递归实现特点： 深度优先一般采用递归实现，如改用非递归，则可需要来模拟栈，当需要先遍历当前节点的儿子结点时（例如中序遍历）需要将其压入栈中，先遍历其儿子结点，然后再将其弹出栈，遍历当前节点。广度优先一般采用非递归来实现，用一个队列来保存依次需要遍历的节点。 </p><ol><li><a href="https://www.masantu.com/blog/2019-10-28/binary-tree-BFS-and-DFS/">二叉树深度优先遍历（DFS）和广度优先遍历（BFS）</a></li><li><a href="https://www.nowcoder.com/questionTerminal/b194924b44b144e8a238819a0a6dae42">简述树的深度优先算法、广度优先算法，及非递归实现的特点</a>   </li><li><a href="https://nullcc.github.io/2018/06/07/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2(BFS">广度优先搜索(BFS)和深度优先搜索(DFS)</a>%E5%92%8C%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2(DFS)/)<blockquote><p><a href="https://nullcc.github.io/2018/06/07/广度优先搜索(BFS)和深度优先搜索(DFS)/">https://nullcc.github.io/2018/06/07/广度优先搜索(BFS)和深度优先搜索(DFS)/</a></p></blockquote></li></ol><h3 id="Python-垃圾回收机制"><a href="#Python-垃圾回收机制" class="headerlink" title="Python 垃圾回收机制"></a>Python 垃圾回收机制</h3><p><a href="https://wiki.masantu.com/python/mm-gc/">Python 的内存管理与垃圾回收机制 | 别院牧志知识库</a></p><ul><li><p>引用计数  </p></li><li><p>标记-清除机制   </p></li><li><p>分代技术  </p></li></ul><h3 id="Python-传值还是传引用"><a href="#Python-传值还是传引用" class="headerlink" title="Python 传值还是传引用"></a>Python 传值还是传引用</h3><p>python 参数传递采用的是“<strong>传对象引用</strong>”的方式。这种方式相当于传值和传引用的一种综合。如果函数收到的是一个不可变对象（数字、字符或元组）的引用，就不能直接修改原始对象——相当于通过‘值传递’来传递对象。如果函数收到的是一个可变对象（字典、列表）的引用，就能修改对象的原始值——相当于‘传引用’来传递对象。</p><p><a href="https://www.masantu.com/blog/2019-04-13/python-pass-by-object-reference/">Python 传值还是传引用？| 通过对象引用传递</a></p><h2 id="中天联科"><a href="#中天联科" class="headerlink" title="中天联科"></a>中天联科</h2><h3 id="类属性和实例属性的区别，如何判断类-A-是否有属性-x"><a href="#类属性和实例属性的区别，如何判断类-A-是否有属性-x" class="headerlink" title="类属性和实例属性的区别，如何判断类 A 是否有属性 x"></a>类属性和实例属性的区别，如何判断类 A 是否有属性 x</h3><p><a href="https://github.com/imoyao/interview_python#4-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F">类变量和实例变量</a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    X = <span class="string">&#x27;Hello&#x27;</span>     <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name=<span class="string">&#x27;World&#x27;</span></span>):</span></span><br><span class="line">        self.name = name    <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">a = A(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">print(A.X)  <span class="comment"># Hello</span></span><br><span class="line">print(a.name)   <span class="comment">#foo</span></span><br><span class="line">print(<span class="built_in">hasattr</span>(a,<span class="string">&#x27;X&#x27;</span>))   <span class="comment"># True</span></span><br><span class="line">print(<span class="built_in">hasattr</span>(A,<span class="string">&#x27;X&#x27;</span>))   <span class="comment"># True</span></span><br><span class="line">print(<span class="built_in">hasattr</span>(A,<span class="string">&#x27;name&#x27;</span>))    <span class="comment"># False</span></span><br><span class="line">print(<span class="built_in">hasattr</span>(a,<span class="string">&#x27;name&#x27;</span>))    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">setattr</span>(a,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="built_in">setattr</span>(A,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Bye&#x27;</span>)</span><br><span class="line">print(a.name)   <span class="comment"># bar</span></span><br><span class="line">print(A.X)  <span class="comment"># Bye</span></span><br></pre></td></tr></table></figure></p><h3 id="什么是列表推导式？如何用一行代码判断一个文件夹下面文件数大于-10-个的子目录"><a href="#什么是列表推导式？如何用一行代码判断一个文件夹下面文件数大于-10-个的子目录" class="headerlink" title="什么是列表推导式？如何用一行代码判断一个文件夹下面文件数大于 10 个的子目录"></a>什么是列表推导式？如何用一行代码判断一个文件夹下面文件数大于 10 个的子目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print([_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_file_more_than_10</span>(<span class="params">root_dir_fp=<span class="literal">None</span>, limit=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> root_dir_fp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        root_dir_fp = os.path.split((os.path.abspath(__file__)))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [dirpath <span class="keyword">for</span> dirpath, _, filenames <span class="keyword">in</span> os.walk(root_dir_fp) <span class="keyword">if</span></span><br><span class="line">            <span class="built_in">len</span>(filenames) &gt; limit]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(find_file_more_than_10())</span><br></pre></td></tr></table></figure><h3 id="什么是协程？什么是生成器"><a href="#什么是协程？什么是生成器" class="headerlink" title="什么是协程？什么是生成器"></a>什么是协程？什么是生成器</h3><ul><li>生成器<br><code>yield</code>和生成器表达式<code>(i for i in range(10))</code>。</li></ul><h2 id="金山云"><a href="#金山云" class="headerlink" title="金山云"></a>金山云</h2><h3 id="单例模式，如何实现？以及如何判断只有这一个实例"><a href="#单例模式，如何实现？以及如何判断只有这一个实例" class="headerlink" title="单例模式，如何实现？以及如何判断只有这一个实例"></a>单例模式，如何实现？以及如何判断只有这一个实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span>    <span class="comment"># py3</span></span><br><span class="line">_instance = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls,*args,**kwargs</span>):</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">cls._instance = <span class="built_in">super</span>(Singleton,cls).__new__(cls,*args,**kwargs)</span><br><span class="line"><span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco_singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">_instance = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cls <span class="keyword">in</span> _instance:</span><br><span class="line">_instance[cls] = cls(*args,**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> _instance[cls]</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco_singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="死锁产生的原因"><a href="#死锁产生的原因" class="headerlink" title="死锁产生的原因"></a>死锁产生的原因</h3><h3 id="ping-域名的过程"><a href="#ping-域名的过程" class="headerlink" title="ping 域名的过程"></a>ping 域名的过程</h3><p><a href="https://www.masantu.com/blog/2019-11-19/the-detail-of-ping-a-domain/">ping 某域名的过程详解</a></p><h3 id="select-和-epoll-区别"><a href="#select-和-epoll-区别" class="headerlink" title="select 和 epoll 区别"></a>select 和 epoll 区别</h3><ol><li><a href="https://blog.ansheng.me/article/python-full-stack-way-io-multiplexing.html">Python 全栈之路系列之 IO 多路复用</a></li><li><a href="https://www.cnblogs.com/anker/p/3265058.html">select、poll、epoll 之间的区别总结[整理]</a></li><li><a href="https://www.haiyun.me/archives/1056.html">Python 异步非阻塞 IO 多路复用 Select/Poll/Epoll 使用</a></li><li><a href="https://www.jianshu.com/p/cdfddb026db0">Python 使用 select 和 epoll 实现 IO 多路复用实现并发服务器</a></li><li><a href="https://harveyqing.gitbooks.io/python-read-and-write/content/python_advance/how_to_use_linux_epoll.html">How To Use Linux epoll with Python</a></li></ol><h2 id="艾普艾"><a href="#艾普艾" class="headerlink" title="艾普艾"></a>艾普艾</h2><h3 id="Redis的数据类型都有哪些，如果要实现计数器功能，应该选用哪种数据类型？使用-Redis，如果内存满了会怎么样"><a href="#Redis的数据类型都有哪些，如果要实现计数器功能，应该选用哪种数据类型？使用-Redis，如果内存满了会怎么样" class="headerlink" title="Redis的数据类型都有哪些，如果要实现计数器功能，应该选用哪种数据类型？使用 Redis，如果内存满了会怎么样"></a><strong>Redis</strong>的数据类型都有哪些，如果要实现计数器功能，应该选用哪种数据类型？使用 Redis，如果内存满了会怎么样</h3><ul><li>数据类型<br>string，list，set，zset，hash</li><li>计数器/限流器功能</li></ul><ol><li>可以选用<code>string</code>类型，调用<code>incr()</code>方法，参见<a href="https://redis.io/commands/INCR">INCR</a><br>每次自增加 1<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET mykey <span class="string">&quot;10&quot;</span></span></span><br><span class="line">&quot;OK&quot;</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> INCR mykey</span></span><br><span class="line">(integer) 11</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET mykey</span></span><br><span class="line">&quot;11&quot;</span><br></pre></td></tr></table></figure></li><li>可以选用<code>hash</code>类型，调用<code>hincrby()</code>方法，参见<a href="https://redis.io/commands/hincrby">HINCRBY</a><br>对关联的统计项进行统一管理；<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HSET myhash field 5</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HINCRBY myhash field 1</span></span><br><span class="line">(integer) 6</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HINCRBY myhash field -1</span></span><br><span class="line">(integer) 5</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HINCRBY myhash field -10</span></span><br><span class="line">(integer) -5</span><br></pre></td></tr></table></figure></li><li>可以选用<code>set</code>类型，调用<code>sadd()</code>方法，参见<a href="https://redis.io/commands/SADD">SADD</a><br>多次调用只加一，防作弊刷数据等；<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD myset <span class="string">&quot;Hello&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD myset <span class="string">&quot;World&quot;</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SADD myset <span class="string">&quot;World&quot;</span></span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SMEMBERS myset</span></span><br><span class="line">1) &quot;Hello&quot;</span><br><span class="line">2) &quot;World&quot;</span><br></pre></td></tr></table></figure>更多 Python 实例应用:<a href="https://juejin.im/post/5da6923c5188252f192d2835"><em>Redis 多方式实现计数器功能（附代码）</em></a></li></ol><h4 id="内存满了"><a href="#内存满了" class="headerlink" title="内存满了"></a>内存满了</h4><p>此时不能继续写入数据，而且系统的其他操作任务也会受到影响。为防止这种现象发生，应该启用内存淘汰策略。<br><a href="https://blog.csdn.net/u014590757/article/details/79788076">Redis 内存满了的几种解决方法</a><br><a href="https://juejin.im/post/5dc81b4df265da4d4d0cfebc">Redis 过期–淘汰机制的解析和内存占用过高的解决方案</a></p><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p><a href="https://www.kancloud.cn/mangyusisha/php/701563">10 个常见的 Redis 面试”刁难”问题</a></p><h3 id="常见状态码错误？301、302-错误及区别？502-错误出现时应该怎么解决"><a href="#常见状态码错误？301、302-错误及区别？502-错误出现时应该怎么解决" class="headerlink" title="常见状态码错误？301、302 错误及区别？502 错误出现时应该怎么解决"></a>常见状态码错误？301、302 错误及区别？502 错误出现时应该怎么解决</h3><ul><li>301/302<br>跳转，301 redirect: 301 代表<strong>永久性</strong>转移(Permanently Moved)；302 redirect: 302 代表<strong>暂时性</strong>转移(Temporarily Moved )</li></ul><p>参见<a href="http://blog.csdn.net/grandPang/article/details/47448395">http 状态码 301 和 302 详解及区别——辛酸的探索之路</a></p><ul><li>502 Bad Gateway Error</li></ul><p>对用户访问请求的响应超时错误</p><ol><li>DNS 测试，ping 测试</li><li>检查防火墙端口，检查防火墙日志</li><li>数据库调用延迟</li><li>网络服务进程是否正常 </li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://www.zhihu.com/question/21647204">502 Bad Gateway 怎么解决？</a></li><li><a href="https://www.keycdn.com/support/502-bad-gateway">How to Solve 502 Bad Gateway Issues?</a></li></ol><h2 id="华胜天成"><a href="#华胜天成" class="headerlink" title="华胜天成"></a>华胜天成</h2><h3 id="类属性的继承"><a href="#类属性的继承" class="headerlink" title="类属性的继承"></a>类属性的继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = Parent()</span><br><span class="line">b = Child1()</span><br><span class="line">c = Child2()</span><br><span class="line"></span><br><span class="line">print(a.x,b.x,c.x)  <span class="comment"># (10, 10, 10)</span></span><br><span class="line">a.x = <span class="number">20</span></span><br><span class="line">print(a.x,b.x,c.x)  <span class="comment"># (20, 10, 10)</span></span><br><span class="line">b.x = <span class="number">30</span></span><br><span class="line">print(a.x,b.x,c.x)  <span class="comment"># (20, 30, 10)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    x = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    x = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A,B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">B,A</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(A.x,B.x,C.x,D.x)  <span class="comment"># (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;a&#x27;, &#x27;b&#x27;)</span></span><br><span class="line">A.x = <span class="string">&#x27;a1&#x27;</span></span><br><span class="line">print(A.x,B.x,C.x,D.x)  <span class="comment"># (&#x27;a1&#x27;, &#x27;b&#x27;, &#x27;a1&#x27;, &#x27;b&#x27;)</span></span><br><span class="line">B.x = <span class="string">&#x27;b1&#x27;</span></span><br><span class="line">print(A.x,B.x,C.x,D.x)  <span class="comment"># (&#x27;a1&#x27;, &#x27;b1&#x27;, &#x27;a1&#x27;, &#x27;b1&#x27;)</span></span><br><span class="line">C.x = <span class="string">&#x27;c&#x27;</span></span><br><span class="line">print(A.x,B.x,C.x,D.x)  <span class="comment"># (&#x27;a1&#x27;, &#x27;b1&#x27;, &#x27;c&#x27;, &#x27;b1&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="更多-1"><a href="#更多-1" class="headerlink" title="更多"></a>更多</h2><p><a href="https://juejin.im/post/5cf7ea91e51d4576bc1a0dc2">字节跳动、腾讯后台开发面经分享(2019.5)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面试 </tag>
            
            <tag> 记录 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🐍PyTricks | 如何更新一个嵌套字典的值？</title>
      <link href="blog/2019-09-25/update-value-of-a-nested-dictionary-of-varying-depth/"/>
      <url>blog/2019-09-25/update-value-of-a-nested-dictionary-of-varying-depth/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_nested_dict</span>(<span class="params">orig_dict, new_dict</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    更新嵌套字典</span></span><br><span class="line"><span class="string">    params = &#123;&#x27;state&#x27;:&#x27;1&#x27;,&#x27;message&#x27;:&#x27;9527&#x27;,&#x27;result&#x27;:&#123;&#x27;hello&#x27;:&#x27;world&#x27;,&#x27;foo&#x27;:&#x27;bar&#x27;,&#x27;age&#x27;:32&#125;&#125;</span></span><br><span class="line"><span class="string">    new_dict = &#123;&#x27;name&#x27;:&#x27;Peter&#x27;&#125;</span></span><br><span class="line"><span class="string">    &#123;&#x27;state&#x27;: &#x27;1&#x27;, &#x27;message&#x27;: &#x27;9527&#x27;, &#x27;name&#x27;: &#x27;Peter&#x27;, &#x27;result&#x27;: &#123;&#x27;age&#x27;: 32, &#x27;foo&#x27;: &#x27;bar&#x27;, &#x27;hello&#x27;: &#x27;world&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string">    ---</span></span><br><span class="line"><span class="string">    new_dict = &#123;&#x27;result&#x27;:&#123;&#x27;foo&#x27;:&#x27;baz&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string">    &#123;&#x27;state&#x27;: &#x27;1&#x27;, &#x27;message&#x27;: &#x27;9527&#x27;, &#x27;result&#x27;: &#123;&#x27;age&#x27;: 32, &#x27;foo&#x27;: &#x27;baz&#x27;, &#x27;hello&#x27;: &#x27;world&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string">    new_dict = &#123;&#x27;result&#x27;:&#123;&#x27;name&#x27;:&#x27;Peter&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string">    &#123;&#x27;state&#x27;: &#x27;1&#x27;, &#x27;message&#x27;: &#x27;9527&#x27;, &#x27;result&#x27;: &#123;&#x27;age&#x27;: 32, &#x27;foo&#x27;: &#x27;bar&#x27;, &#x27;hello&#x27;: &#x27;world&#x27;, &#x27;name&#x27;: &#x27;Peter&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string">    ---</span></span><br><span class="line"><span class="string">    new_dict = &#123;&#x27;result&#x27;:&#123;&#x27;hobbies&#x27;:[&#x27;reading&#x27;,&#x27;fishing&#x27;,&#x27;play game&#x27;]&#125;&#125;</span></span><br><span class="line"><span class="string">    &#123;&#x27;state&#x27;: &#x27;1&#x27;, &#x27;message&#x27;: &#x27;9527&#x27;, &#x27;result&#x27;: &#123;&#x27;age&#x27;: 32, &#x27;foo&#x27;: &#x27;bar&#x27;, &#x27;hello&#x27;: &#x27;world&#x27;, &#x27;hobbies&#x27;: [&#x27;reading&#x27;, &#x27;fishing&#x27;, &#x27;play game&#x27;]&#125;&#125;</span></span><br><span class="line"><span class="string">    ---</span></span><br><span class="line"><span class="string">    params = &#123;&#x27;state&#x27;:&#x27;1&#x27;,&#x27;message&#x27;:&#x27;9527&#x27;,&#x27;result&#x27;:&#123;&#x27;hello&#x27;:&#x27;world&#x27;,&#x27;foo&#x27;:&#x27;bar&#x27;,&#x27;age&#x27;:32,&#x27;hobbies&#x27;:[&#x27;coding&#x27;]&#125;&#125;</span></span><br><span class="line"><span class="string">    new_dict = &#123;&#x27;result&#x27;:&#123;&#x27;hobbies&#x27;:[&#x27;reading&#x27;,&#x27;fishing&#x27;,&#x27;play game&#x27;]&#125;&#125;</span></span><br><span class="line"><span class="string">    &#123;&#x27;state&#x27;: &#x27;1&#x27;, &#x27;message&#x27;: &#x27;9527&#x27;, &#x27;result&#x27;: &#123;&#x27;age&#x27;: 32, &#x27;foo&#x27;: &#x27;bar&#x27;, &#x27;hello&#x27;: &#x27;world&#x27;, &#x27;hobbies&#x27;: [&#x27;coding&#x27;, &#x27;reading&#x27;, &#x27;fishing&#x27;, &#x27;play game&#x27;]&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> key, val <span class="keyword">in</span> new_dict.iteritems():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(val, collections.Mapping):</span><br><span class="line">            tmp = update_nested_dict(orig_dict.get(key, &#123;&#125;), val)</span><br><span class="line">            orig_dict[key] = tmp</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(val, <span class="built_in">list</span>):</span><br><span class="line">            orig_dict[key] = (orig_dict.get(key, []) + val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            orig_dict[key] = new_dict[key]</span><br><span class="line">    <span class="keyword">return</span> orig_dict</span><br></pre></td></tr></table></figure><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://stackoverflow.com/questions/3232943/update-value-of-a-nested-dictionary-of-varying-depth">Update value of a nested dictionary of varying depth</a></p>]]></content>
      
      
      <categories>
          
          <category> 🐍PyTricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP 和 UDP 的区别</title>
      <link href="blog/2019-09-21/differences-between-tcp-and-udp/"/>
      <url>blog/2019-09-21/differences-between-tcp-and-udp/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>TCP 传输控制协议（ Transmission Control Protocol）和 UDP 用户数据报协议（User Datagram Protocol）是在传输层运行的主要协议。传输控制协议（TCP）和用户数据报协议（UDP）的操作方式非常不同，你可以根据需要选择传输控制协议（TCP）或用户数据报协议（UDP）。</p><p>TCP 代表传输控制协议，它保证数据包的传送。该协议提供了广泛的错误检查机制，例如流控制和数据确认。传输控制协议（TCP）是面向连接的协议。在传输数据之前，必须确保在参与数据传输的设备之间建立连接。如果您的应用程序需要保证数据的传输，则必须选择 TCP 作为传输层协议。</p><p>UDP 代表用户数据报协议，它以数据报模式运行。在此处应注意的主要区别是用户数据报协议（UDP）是一种无连接协议。用户数据报协议（UDP）仅具有使用校验和的基本错误检查机制。</p><h2 id="传输控制协议（TCP）和用户数据报协议（UDP）之间的区别"><a href="#传输控制协议（TCP）和用户数据报协议（UDP）之间的区别" class="headerlink" title="传输控制协议（TCP）和用户数据报协议（UDP）之间的区别"></a>传输控制协议（TCP）和用户数据报协议（UDP）之间的区别</h2><h3 id="传输控制协议（TCP）"><a href="#传输控制协议（TCP）" class="headerlink" title="传输控制协议（TCP）"></a>传输控制协议（TCP）</h3><ol><li><p>TCP 是面向连接的协议，这意味着设备应在传输数据之前打开连接，并在传输数据后正常关闭连接。</p></li><li><p>TCP 确保将数据可靠地传递到目的地。</p></li><li><p>TCP 协议提供了广泛的错误检查机制，例如流控制和数据确认。</p></li><li><p>TCP 具有数据排序的功能。</p></li><li><p>TCP 可以保证数据的传输。</p></li><li><p>由于广泛的错误检查机制，TCP 相对较慢。</p></li><li><p>在 TCP 中使用 TCP 端口号可以进行多路复用和多路分解。</p></li><li><p>在 TCP 中可以重新传输丢失的数据包。</p></li></ol><h3 id="用户数据报协议（UDP）"><a href="#用户数据报协议（UDP）" class="headerlink" title="用户数据报协议（UDP）"></a>用户数据报协议（UDP）</h3><ol><li><p>UDP 是面向数据报的协议，无需任何开销即可打开连接（使用三向握手），维护连接以及关闭（终止）连接。</p></li><li><p>UDP 对于网络传输的广播/多播类型非常有效。</p></li><li><p>UDP 仅具有使用校验和的基本错误检查机制。</p></li><li><p>UDP 中没有数据排序。</p></li><li><p>UDP 中不能保证数据的传递。</p></li><li><p>UDP 比 TCP 更快，更简单，更高效。但是，UDP 的可靠性不如 TCP。</p></li><li><p>在使用 UDP 端口号的 UDP 中可以进行复用和解复用。</p></li><li><p>UDP 中没有丢失分组的重传。</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.omnisecu.com/tcpip/differences-between-tcp-and-udp.php">Differences between TCP and UDP</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP 三次握手与四次挥手</title>
      <link href="blog/2019-09-20/tcp-connection-3-way-handshake-and-termination-4-way-handshake/"/>
      <url>blog/2019-09-20/tcp-connection-3-way-handshake-and-termination-4-way-handshake/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="TCP-头部"><a href="#TCP-头部" class="headerlink" title="TCP 头部"></a>TCP 头部</h2><p><img src= "/img/loading.svg" data-lazy-src="/images/tcp-head-en.jpg" alt="tcp头部"><br><img src= "/img/loading.svg" data-lazy-src="/images/tcp-head-cn.jpg" alt="tcp头部"><br>上面就是 TCP 协议头部的格式，它非常重要，是理解其它内容的基础，下面将每个字段的信息都详细的说明一下：</p><ul><li>Source Port<br>  16 位，用于标识源端口号（发送机器 TCP 端口）</li><li>Destination Port<br>  16 位，用于标识目的端口号（接收端口）</li><li>Sequence Number<br>  32 位，用于 TCP 段的字节级别编号。如果使用 TCP 连接，则为数据的每个字节分配一个序列号。如果设置了 SYN 标志（在<em>三向握手连接</em>初始化期间），则是初始序列号。 然后，实际第一个数据字节的序列号将是此序列号加 1。例如，让设备在特定 TCP 报头中的数据的第一个字节在该字段 50000 中将具有其序列号。如果此数据包有 500 字节中的数据，那么此设备发送的下一个数据包将具有 50000 + 500 + 1 = 50501 的序列号。</li><li>Acknowledgment Number<br>  32 位，确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加 1。不过，只有当标志位中的 ACK 标志（下面介绍）为 1 时该确认序列号的字段才有效。主要用来解决不丢包的问题；</li><li>Header Length<br>  4 位，显示 header 中 32 位字的数量。需要这个值是因为任选字段的长度是可变的。也称为数据偏移字段（Data Offset field）。 header 的最小为 5 个字（二进制模式为 0101）。</li><li>Reserved<br>  6 位，常被设为 0；</li><li>Control Bit Flags<br>  我们之前已经知道 TCP 是面向连接的协议。 面向连接协议的含义是，在可以传输任何数据之前，必须获得（obtained）并确认可靠的连接。 控制位控制着连接建立，数据传输和连接终止的整个过程。<br>  控制位列出如下：它们依次为 URG，ACK，PSH，RST，SYN，FIN。每个标志位的含义如下：   <ol><li>URG：Urgent Pointer，此标志表示 TCP 包的紧急指针域（后面马上就要说到）有效，用来保证 TCP 连接不被中断，并且督促中间层设备要尽快处理这些数据；</li><li>ACK：Acknowledgement，此标志表示应答域有效。就是说前面所说的 TCP 应答号将会包含在 TCP 数据包中；有两个取值：0 和 1，为 1 的时候表示应答域有效，反之为 0；</li><li>PSH：push，这个标志位表示传送操作。所谓 Push 操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；</li><li>RST：reset，这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；</li><li>SYN：synchronous，表示同步序号，用来建立连接。SYN 标志位和 ACK 标志位搭配使用，当连接请求的时候，SYN=1，ACK=0；连接被响应的时候，SYN=1，ACK=1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有 SYN 的数据包，如果对方主机响应了一个数据包回来，就表明这台主机存在这个端口；但是由于这种扫描方式只是进行 TCP 三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行 TCP 的三次握手；</li><li>FIN： finish，表示发送端已经达到数据末尾。也就是说双方的数据传送完成，没有数据可以传送了，发送 FIN 标志位的 TCP 数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。<br>需要注意的是：<ul><li>不要将确认序号 ack 与标志位中的 ACK 搞混了。</li><li>确认方 ack=发起方 req+1，两端配对。  </li></ul></li></ol></li><li>Window<br>  16bits，窗口字段用来控制对方发送的数据量，单位为字节。也就是有名的滑动窗口，用来进行流量控制。TCP 连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方以确定对方的发送窗口的上限。</li><li>Checksum<br>  16bits,检验和字段检验的范围包括首部和数据这两部分。在计算检验和时，要在 TCP 报文段的前面加上 12 字节的伪首部。</li><li>Urgent Pointer<br>  紧急指针字段，16bits，紧急指针指出在本报文段中的紧急数据的最后一个字节的序号。</li><li>Option<br>  长度可变，TCP 首部可以有多达 40 字节的可选信息，用于把附加信息传递给终点，或用来对齐其它选项。</li></ul><ol><li><a href="http://www.omnisecu.com/tcpip/tcp-header.php">TCP Header Fields</a></li><li><a href="https://www.inetdaemon.com/tutorials/internet/tcp/tcp_header.shtml">TCP Header</a></li></ol><h2 id="三次握手与四次挥手"><a href="#三次握手与四次挥手" class="headerlink" title="三次握手与四次挥手"></a>三次握手与四次挥手</h2><h3 id="三次握手（3-way-Handshake）"><a href="#三次握手（3-way-Handshake）" class="headerlink" title="三次握手（3-way Handshake）"></a>三次握手（3-way Handshake）</h3><p>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送 3 个包。</p><p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 <code>connect()</code> 时。将触发三次握手。</p><ul><li><p>第一次握手(SYN=1, ACK=0, ISN=x):<br> 设备 A（客户端）发送一个 <strong>SYN</strong>chronize 标志设置为 1, <strong>ACK</strong>nowledge 标志设置为 0，以及初始序列号 ISN (Initial Sequence Number) 为 x 的 TCP 连接请求报文段；</p><p> 发送完毕后，客户端进入 <code>SYN_SEND</code> 状态，等待服务器的确认；</p></li><li><p>第二次握手(SYN=1, ACK=1, ISN=y, ACKnum=x+1):<br>  设备 B（服务器）接收设备 A 的 TCP 报文段，并返回 SYN = 1，ACK = 1，ISN = Y（设备 B 的初始序列号），确认编号(Acknowledgment Number )= x + 1（设备 B 接收到的设备 A 的 ISN 加 1）</p><p> 发送完毕后，服务器端进入 <code>SYN_RCVD</code> 状态。此时服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为<em>半连接队列</em>。</p></li><li><p>第三次握手(ACK=1, SYN=0, ACKnum=y+1,seq=x+1)<br>  设备 A(客户端)向设备 B(服务器)发送一个 TCP 报文段，以确认接收到设备 B 的 ISN，标志设置为 ACK = 1，序列号(Sequence number)= x+1，确认号(Acknowledgment number)= y+1</p><p> 发送完毕后，客户端进入 <code>ESTABLISHED</code> 状态，当服务器端接收到这个包时，也进入 <code>ESTABLISHED</code> 状态，TCP 握手结束。</p></li></ul><p>完成了三次握手，客户端和服务器端建立全双工通信（full-duplex communication），开始使用约定的序列号和确认号（ sequence 和 acknowledge numbers）传送数据。</p><p>三次握手的过程的示意图如下：</p><p><img src= "/img/loading.svg" data-lazy-src="/images/tcp-connection-made-three-way-handshake.png" alt="three-way-handshake"><br><img src= "/img/loading.svg" data-lazy-src="/images/3-way-handshake.png" alt="three-way-handshake"></p><ul><li><a href="http://www.omnisecu.com/tcpip/tcp-three-way-handshake.php">3 way handshake, TCP Three-way handshake, TCP Synchronization</a></li><li><a href="https://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml">TCP 3-Way Handshake (SYN,SYN-ACK,ACK)</a>  </li><li><a href="https://www.geeksforgeeks.org/tcp-3-way-handshake-process/">TCP 3-Way Handshake Process</a> </li><li><a href="https://study-ccna.com/tcp-three-way-handshake/">TCP three-way handshake</a> </li></ul><h3 id="四次挥手（TCP-Connection-Termination）"><a href="#四次挥手（TCP-Connection-Termination）" class="headerlink" title="四次挥手（TCP Connection Termination）"></a>四次挥手（TCP Connection Termination）</h3><p>当客户端和服务器通过三次握手建立了 TCP 连接以后，数据传送完毕，肯定是要断开 TCP 连接。TCP 的连接的解除需要发送四个包，因此称为四次挥手(Four-way handshake)。<strong>客户端或服务器均可主动发起挥手动作</strong>，在 socket 编程中，任何一方执行 <code>close()</code> 操作即可产生挥手操作。</p><ul><li><p>第一次挥手(FIN=1，seq=x)<br> （从客户端获得 FIN）——此处假定客户端应用程序决定要关闭连接。 （请注意，服务器也可以选择关闭连接）。这将导致客户端将 FIN 位设置为 1 的 TCP 报文段发送到服务器，并进入 FIN_WAIT_1 状态。当客户端处于 FIN_WAIT_1 状态时，它会等待来自服务器的带有 ACK 确认（acknowledgment）的 TCP 段。</p><p> 发送完毕后，客户端进入 <code>FIN_WAIT_1</code> 状态，此时仍然可以接受数据。</p></li><li><p>第二次挥手(ACK=1，ACKnum=x+1)<br> （来自服务器的 ACK）——当服务器从发件人（客户端）收到 FIN 位段时，服务器立即向发件人（客户端）发送确认（ACK）报文段。Acknowledgment Number 为 Sequence Number 加 1；表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p><p> 发送完毕后，服务器端进入 <code>CLOSE_WAIT</code> 状态，客户端接收到这个确认包之后，进入 <code>FIN_WAIT_2</code> 状态，等待服务器端发送关闭连接段。</p></li><li><p>第三次挥手(FIN=1，seq=y)</p><p> （来自服务器的 FIN）服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为 1。</p><p> 发送完毕后，服务器端进入 <code>LAST_ACK</code> 状态，等待来自客户端的最后一个 ACK。</p></li><li><p>第四次挥手(ACK=1，ACKnum=y+1)</p><p> （来自客户端的 ACK）客户端接收到来自服务器端的关闭请求，发送一个确认报文段，并进入 <code>TIME_WAIT</code>状态，TIME_WAIT 状态允许客户端在 ACK 丢失的情况下重新发送最终确认的 ACK 包。</p><p> 服务器端接收到这个确认包之后，关闭连接，进入 <code>CLOSED</code> 状态。</p><p> 客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 <code>CLOSED</code> 状态。</p><p> 处于 TIME_WAIT 状态的客户端所花费的时间取决于其实现，但典型值为 30 秒，1 分钟和 2 分钟。等待之后，连接正式关闭，并且客户端上的所有资源（包括端口号和缓冲区数据）都被释放。</p></li></ul><p>四次挥手的示意图如下：</p><p><img src= "/img/loading.svg" data-lazy-src="/images/tcp-connection-closed-four-way-handshake.png" alt="four-way-handshake"></p><ul><li><a href="http://www.tcpipguide.com/free/t_TCPConnectionTermination-2.htm">TCP Connection Termination</a>  </li><li><a href="https://www.geeksforgeeks.org/tcp-connection-termination/">TCP Connection Termination</a>   </li></ul><h4 id="完整状态转换图"><a href="#完整状态转换图" class="headerlink" title="完整状态转换图"></a>完整状态转换图</h4><p><img src= "/img/loading.svg" data-lazy-src="/images/TCP-states-visited-by-ClientSide.png" alt="客户端"></p><p><img src= "/img/loading.svg" data-lazy-src="/images/TCP-states-visited-by-ServerSide.png" alt="服务端"></p><hr><h2 id="疑问解惑"><a href="#疑问解惑" class="headerlink" title="疑问解惑"></a>疑问解惑</h2><h3 id="ISN-是固定的吗"><a href="#ISN-是固定的吗" class="headerlink" title="ISN 是固定的吗"></a>ISN 是固定的吗</h3><p>三次握手的一个重要功能是客户端和服务端交换 ISN(Initial Sequence Number), 以便让对方知道接下来接收数据的时候如何按序列号组装数据。</p><p>如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的。</p><h3 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h3><p>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。为了解决“网络中存在延迟的重复分组”的问题。    </p><p>为什么 A 还要发送一次确认呢？这主要是为了防止己失效的连接请求报文段突然又传送到了 B ,因而产生错误。<br>所谓“己失效的连接请求报文段”是这样产生的：</p><blockquote><p>正常情况下：A 发出连接请求,但因连接请求报文丢失而未收到确认。于是 A 再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接。A 共发送了两个连接请求报文段。其中，第一个丢失，第二个到达了 B。没有“已失效的连接请求报文段”。</p><p>现假定出现一种异常情况：即 A 发出的第一个连接请求报文段并没有丢失，而是在某些网络结点长时间滞留了，以致延误到连接释放以后的某个时间才到达 B。本来这是一个早己失效的报文段。但 B 收到此失效的连接请求报文段后，就误认为是 A 又发出一次新的连接请求。于是就向 A 发出确认报文段，同意建立连接，假定不采用“三次握手”，那么只要 B 发出确认，新的连接就建立了。<br>由于现在 A 并没有发出建立连接的请求。因此不会理睬 B 的确认。也不会向 B 发送数据。但 B 却以为新的运输连接己经建立了，并一直等待 A 发来数据。B 的许多资源就这样白白浪费了。<br>采用三次握手的办法可以防止上述现象的发生。例如在刚才的情况下，A 不会向 B 的确认发出确认。B 由于收不到确认。就知道 A 并没有要求建立连接。</p></blockquote><p>这就很明白了，<strong>防止服务器端的一直等待而浪费资源</strong>。</p><p>在 Google Groups 的 TopLanguage 中看到一帖讨论 TCP“三次握手”觉得很有意思。贴主提出“TCP 建立连接为什么是三次握手？”的问题，在众多回复中，有一条回复写道：“这个问题的本质是：信道不可靠, 但是通信双发需要就某个问题达成一致。而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值。所以三次握手不是 TCP 本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的。请注意这里的本质需求,信道不可靠, 数据传输要可靠。三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了。因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像 UDP 那样直接发送消息就可以了。”这可视为对“三次握手”目的的另一种解答思路。</p><h3 id="通俗理解"><a href="#通俗理解" class="headerlink" title="通俗理解"></a>通俗理解</h3><p>但是为什么一定要进行三次握手来保证连接是双工的呢，一次不行么？两次不行么？我们举一个现实生活中两个人进行语言沟通的例子来模拟三次握手。<br>引用网上的一些通俗易懂的例子，虽然不太正确，后面会指出，但是不妨碍我们理解，大体就是这么个理解法。</p><ul><li>第一次对话：<br>老婆让甲出去打酱油，半路碰到一个朋友乙，甲问了一句：哥们你吃饭了么？<br>结果乙带着耳机听歌呢，根本没听到，没反应。甲心里想：跟你说话也没个音，不跟你说了，沟通失败。说明乙接受不到甲传过来的信息的情况下沟通肯定是失败的。<br>如果乙听到了甲说的话，那么第一次对话成功，接下来进行第二次对话。</li><li>第二次对话：<br>乙听到了甲说的话，但是他是老外，中文不好，不知道甲说的啥意思也不知道怎样回答，于是随便回答了一句学过的中文 ：我去厕所了。甲一听立刻笑喷了，“去厕所吃饭”?道不同不相为谋，离你远点吧，沟通失败。说明乙无法做出正确应答的情况下沟通失败。<br>如果乙听到了甲的话，做出了正确的应答，并且还进行了反问：我吃饭了，你呢？那么第二次握手成功。<br>通过前两次对话证明了乙能够听懂甲说的话，并且能做出正确的应答。 接下来进行第三次对话。</li><li>第三次对话：<br>甲刚和乙打了个招呼，突然老婆喊他，“你个死鬼，打个酱油咋这么半天，看我回家咋收拾你”，甲是个妻管严，听完吓得二话不说就跑回家了，把乙自己晾那了。乙心想：这什么人啊，得，我也回家吧，沟通失败。说明甲无法做出应答的情况下沟通失败。<br>如果甲也做出了正确的应答：我也吃了。那么第三次对话成功，两人已经建立起了顺畅的沟通渠道，接下来开始持续的聊天。<br>通过第二次和第三次的对话证明了甲能够听懂乙说的话，并且能做出正确的应答。<br>可见，两个人进行有效的语言沟通，这三次对话的过程是必须的。<br>为了保证服务端能收接受到客户端的信息并能做出正确的应答而进行前两次(第一次和第二次)握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次(第二次和第三次)握手。<br>这个例子举得挺好的。不过个人感觉为什么是三次而不是二次，不是因为为了证明甲能听懂乙并回应（第二次乙能正确的响应甲说明俩人之间沟通已无障碍了），而是怕出现以下情况而浪费感情。这个情景是这样的（例子有点不实际意会就好）：甲在路上跟乙打招呼，由于刮风什么的这句活被吹跑了，然后甲又跟打了个招呼，乙听到了并作出了回应。此时不管是三次握手还是两次握手两个人都能愉快的沟通。0.1 秒后俩人四次挥手告别了。此时被风刮跑的那句话又传到了乙的耳朵里，乙认为甲又要跟他沟通，所以做出了响应的回应。（问题出现了）假如采用 2 次握手，乙就认定了甲要跟他沟通，于是就不停的等，浪费感情。可如果是采用 3 次握手，乙等了一会后发现甲没有回应他就认为甲走了然后自己也就走了！<br>这就很明白了，其实第三步是防止了乙的一直等待而浪费自己的时间，而不是为了保证甲能够正确回应乙的信息。</li></ul><h3 id="为什么要四次分手"><a href="#为什么要四次分手" class="headerlink" title="为什么要四次分手"></a>为什么要四次分手</h3><p>TCP 协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。<br>TCP 是全双工模式，这就意味着，当主机 1 发出 FIN 报文段时，只是表示主机 1 已经没有数据要发送了，主机 1 告诉主机 2，它的数据已经全部发送完毕了；但是，这个时候主机 1 还是可以接受来自主机 2 的数据；当主机 2 返回 ACK 报文段时，表示它已经知道主机 1 没有数据发送了，但是主机 2 还是可以发送数据到主机 1 的；当主机 2 也发送了 FIN 报文段时，这个时候就表示主机 2 也没有数据要发送了，就会告诉主机 1，我也没有数据要发送了，之后彼此就会愉快地中断这次 TCP 连接。<br>如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化：  </p><ul><li>FIN_WAIT_1: 这个状态要好好解释一下，其实 FIN_WAIT_1 和 FIN_WAIT_2 状态的真正含义都是表示等待对方的 FIN 报文。而这两种状态的区别是：FIN_WAIT_1 状态实际上是当 SOCKET 在 ESTABLISHED 状态时，它想主动关闭连接，向对方发送了 FIN 报文，此时该 SOCKET 即进入到 FIN_WAIT_1 状态。而当对方回应 ACK 报文后，则进入到 FIN_WAIT_2 状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应 ACK 报文，所以 FIN_WAIT_1 状态一般是比较难见到的，而 FIN_WAIT_2 状态还有时常常可以用 netstat 看到。（主动方）</li><li>FIN_WAIT_2：上面已经详细解释了这种状态，实际上 FIN_WAIT_2 状态下的 SOCKET，表示半连接，也即有一方要求 close 连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK 信息)，稍后再关闭连接。（主动方）</li><li>CLOSE_WAIT：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方 close 一个 SOCKET 后发送 FIN 报文给自己，你系统毫无疑问地会回应一个 ACK 报文给对方，此时则进入到 CLOSE_WAIT 状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close 这个 SOCKET，发送 FIN 报文给对方，也即关闭连接。所以你在 CLOSE_WAIT 状态下，需要完成的事情是等待你去关闭连接。（被动方）</li><li>LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送 FIN 报文后，最后等待对方的 ACK 报文。当收到 ACK 报文后，也即可以进入到 CLOSED 可用状态了。（被动方）</li><li>TIME_WAIT: 表示收到了对方的 FIN 报文，并发送出了 ACK 报文，就等 2MSL 后即可回到 CLOSED 可用状态了。如果 FINWAIT1 状态下，收到了对方同时带 FIN 标志和 ACK 标志的报文时，可以直接进入到 TIME_WAIT 状态，而无须经过 FIN_WAIT_2 状态。（主动方）</li><li>CLOSED: 表示连接中断。</li></ul><h3 id="为什么连接的时候是三次握手，关闭的时候却是四次握手"><a href="#为什么连接的时候是三次握手，关闭的时候却是四次握手" class="headerlink" title="为什么连接的时候是三次握手，关闭的时候却是四次握手"></a>为什么连接的时候是三次握手，关闭的时候却是四次握手</h3><p>因为当 Server 端收到 Client 端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当 Server 端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉 Client 端，”你发的 FIN 报文我收到了”。只有等到我 Server 端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送。故需要四步握手。</p><h3 id="为什么-TIME-WAIT-状态需要经过-2MSL-maximum-segment-lifetime：最大报文段生存时间-才能返回到-CLOSE-状态"><a href="#为什么-TIME-WAIT-状态需要经过-2MSL-maximum-segment-lifetime：最大报文段生存时间-才能返回到-CLOSE-状态" class="headerlink" title="为什么 TIME_WAIT 状态需要经过 2MSL(maximum segment lifetime：最大报文段生存时间)才能返回到 CLOSE 状态"></a>为什么 TIME_WAIT 状态需要经过 2MSL(maximum segment lifetime：最大报文段生存时间)才能返回到 CLOSE 状态</h3><ol><li><p>可靠地实现 TCP 全双工连接的终止<br> 在进行关闭连接四路握手协议时，最后的 ACK 是由主动关闭端发出的，如果这个最终的 ACK 丢失，服务器将重发最终的 FIN，因此客户端必须维护状态信息允许它重发最终的 ACK。如果不维持这个状态信息，那么客户端将响应 RST 分节，服务器将此分节解释成一个错误（在 java 中会抛出 connection reset 的 SocketException)。因而，要实现 TCP 全双工连接的正常终止，必须处理终止序列四个分节中任何一个分节的丢失情况，主动关闭的客户端必须维持状态信息进入 TIME_WAIT 状态。</p></li><li><p>允许老的重复分节在网络中消逝<br> TCP 分节可能由于路由器异常而“迷途”，在迷途期间，TCP 发送端可能因确认超时而重发这个分节，迷途的分节在路由器修复后也会被送到最终目的地，这个原来的迷途分节就称为 lost duplicate。在关闭一个 TCP 连接后，马上又重新建立起一个相同的 IP 地址和端口之间的 TCP 连接，后一个连接被称为前一个连接的化身 （incarnation)，那么有可能出现这种情况，前一个连接的迷途重复分组在前一个连接终止后出现，从而被误解成从属于新的化身。为了避免这个情况，TCP 不允许处于 TIME_WAIT 状态的连接启动一个新的化身，因为 TIME_WAIT 状态持续 2MSL，就可以保证当成功建立一个 TCP 连接的时候，来自连接先前化身的重复分组已经在网络中消逝。</p></li></ol><p><a href="https://blog.csdn.net/unix21/article/details/16918307">为什么 TCP 的 TIME_WAIT 状态要保持 2MSL?</a><br><a href="http://docs.52im.net/extend/docs/book/tcpip/vol1/18/">18.6.1 2MSL 等待状态</a>   </p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://people.na.infn.it/~garufi/didattica/CorsoAcq/Trasp/Lezione9/tcpip_ill/tcp_conn.htm">TCP Connection Establishment and Termination</a></li><li><a href="https://www.inetdaemon.com/tutorials/internet/tcp/index.shtml">Transmission Control Protocol (TCP) Tutorials</a></li><li><a href="https://github.com/jawil/blog/issues/14">通俗大白话来理解 TCP 协议的三次握手和四次分手</a></li><li><a href="http://blog.csdn.net/oney139/article/details/8103223">TCP 三次握手详解及释放连接过程</a></li><li><a href="https://www.jellythink.com/archives/240">简析 TCP 的三次握手与四次分手</a></li><li><a href="https://www.cnblogs.com/zhanglei93/p/6574714.html">TCP 协议设计原理</a></li><li><a href="http://blog.csdn.net/whuslei/article/details/6667471">TCP 协议中的三次握手和四次挥手(图解)</a></li><li><a href="https://www.cnblogs.com/yuilin/archive/2012/11/05/2755298.html">理解 TCP 为什么需要进行三次握手(白话)</a></li><li><a href="https://www.zhihu.com/question/24853633">TCP 为什么是三次握手，为什么不是两次或四次？</a></li><li><a href="https://juejin.im/post/58e36d35b123db15eb748856">面试时，你被问到过 TCP/IP 协议吗?</a></li><li><a href="https://hit-alibaba.github.io/interview/basic/network/TCP.html">TCP 协议</a></li><li><a href="http://www.cnblogs.com/hnrainll/archive/2011/10/14/2212415.html">TCP 三次握手及四次挥手详细图解</a></li><li><a href="http://www.cnblogs.com/rootq/articles/1377355.html">TCP 协议三次握手过程分析</a></li><li><a href="http://baike.baidu.com/subview/32754/8048820.htm">百度百科：SYN 攻击</a></li><li><a href="http://www.tldp.org/HOWTO/html_single/TCP-Keepalive-HOWTO/">TCP-Keepalive-HOWTO</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么 Redis 这么快？</title>
      <link href="blog/2019-09-19/why-redis-is-so-fast/"/>
      <url>blog/2019-09-19/why-redis-is-so-fast/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="太长不看版"><a href="#太长不看版" class="headerlink" title="太长不看版"></a>太长不看版</h2><ol><li><p>Redis 是基于内存的访问，内存的读写速度非常快；</p></li><li><p>Redis 是单线程的模型。保证了每个操作的原子性，省去了很多上下文切换线程的时间以及竞态而产生的消耗；</p></li><li><p>Redis 使用多路复用技术，可以处理并发的连接。非阻塞 IO 内部实现采用 epoll，采用了 epoll+自己实现的简单的事件轮询（event loop）框架。epoll 中的读、写、关闭、连接都转化成了事件，然后利用 epoll 的多路复用特性，绝不在 io 上浪费一点时间。</p></li><li><p>数据结构。Redis 全程使用 hash 结构，读取速度快，还有一些特殊的数据结构，对数据存储进行了优化，如压缩表，对短数据进行压缩存储，再如，跳表，使用有序的数据结构加快读取的速度。</p></li></ol><h2 id="为什么-Redis-使用单线程"><a href="#为什么-Redis-使用单线程" class="headerlink" title="为什么 Redis 使用单线程"></a>为什么 Redis 使用单线程</h2><p>因为 Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章地采用单线程的方案。</p><h3 id="详细原因"><a href="#详细原因" class="headerlink" title="详细原因"></a>详细原因</h3><ol><li><p>不需要各种锁的性能消耗</p><p> Redis 的数据结构并不全是简单的 Key-Value，还有 list，hash 等复杂的结构，这些结构有可能会进行很细粒度的操作，比如在很长的列表后面添加一个元素，在 hash 当中添加或者删除</p><p> 一个对象。这些操作可能就需要加非常多的锁，导致的结果是同步开销大大增加。</p><p> 总之，在单线程的情况下，就不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗。</p></li><li><p>单线程多进程集群方案</p><p> 单线程的威力实际上非常强大，每核心效率也非常高，多线程自然是可以比单线程有更高的性能上限，但是在今天的计算环境中，即使是单机多线程的上限也往往不能满足需要了，需要进一步摸索的是多服务器集群化的方案，这些方案中多线程的技术照样是用不上的。</p><p> 所以单线程、多进程的集群不失为一个时髦的解决方案。</p></li><li><p>CPU 消耗</p><p> 采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU。</p></li></ol><h2 id="但是如果-CPU-成为-Redis-瓶颈，或者不想让服务器其他-CUP-核闲置，那怎么办"><a href="#但是如果-CPU-成为-Redis-瓶颈，或者不想让服务器其他-CUP-核闲置，那怎么办" class="headerlink" title="但是如果 CPU 成为 Redis 瓶颈，或者不想让服务器其他 CUP 核闲置，那怎么办"></a>但是如果 CPU 成为 Redis 瓶颈，或者不想让服务器其他 CUP 核闲置，那怎么办</h2><p>可以考虑多起几个 Redis 进程，Redis 是 key-value 数据库，不是关系数据库，数据之间没有约束。只要客户端分清哪些 key 放在哪个 Redis 进程上就可以了。</p><h2 id="Redis-单线程的优劣势"><a href="#Redis-单线程的优劣势" class="headerlink" title="Redis 单线程的优劣势"></a>Redis 单线程的优劣势</h2><ol><li><p>单进程单线程优势</p><ul><li>代码更清晰，处理逻辑更简单；</li><li>不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</li><li>不存在多进程或者多线程导致的切换而消耗 CPU； </li></ul></li><li><p>单进程单线程弊端<br> 无法发挥多核 CPU 性能，不过可以通过在单机开多个 Redis 实例来完善；</p></li></ol><h2 id="IO-多路复用技术"><a href="#IO-多路复用技术" class="headerlink" title="IO 多路复用技术"></a>IO 多路复用技术</h2><p>Redis 采用网络 IO 多路复用技术来保证在多连接的时候，系统的高吞吐量。</p><p>这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络 IO 的时间消耗），且 Redis 在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了 Redis 具有很高的吞吐量。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/u011663149/article/details/85307615">Redis 为什么是单线程、及高并发快的大原因详解</a></li><li><a href="https://www.jianshu.com/p/3d54131ee94c">Redis 为什么快？</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客 idealyard 待办事项记录</title>
      <link href="blog/2019-08-29/blog-idealyard-TODO/"/>
      <url>blog/2019-08-29/blog-idealyard-TODO/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="BUGs-记录"><a href="#BUGs-记录" class="headerlink" title="BUGs 记录"></a>BUGs 记录</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li style="list-style: none"><input type="checkbox" checked></input> 新建文章报错；</li><li style="list-style: none"><input type="checkbox" checked></input> 首页无限滚动时提示<code>Duplicate keys detected: &#39;xxxx&#39;. This may cause an update error.</code></li><li style="list-style: none"><input type="checkbox" checked></input> 用户注册页面；<ul><li style="list-style: none"><input type="checkbox" checked></input> 用户注册成功，但是跳转首页之后显示问题；</li></ul></li><li style="list-style: none"><input type="checkbox" checked></input> 用户写文章时，作者不是当前登录用户；</li><li style="list-style: none"><input type="checkbox" checked></input> 点击页内锚点，跳转到文章分类页面，应该在本页面内跳转；</li><li style="list-style: none"><input type="checkbox" checked></input> cookie 中密码没有加密；<br>解决办法<a href="https://www.cnblogs.com/xiaolucky/p/11165179.html">参考这里</a></li><li style="list-style: none"><input type="checkbox" checked></input> token 超时时弹出很多 message,应该使用更友好的方式！或者精准提示，一次只提示一条即可；<br>  解决办法：<a href="https://segmentfault.com/a/1190000020173021">如何让 Element UI 的 Message 消息提示每次只弹出一个</a></li><li style="list-style: none"><input type="checkbox" checked></input> 标签云  <ol><li><del>参考<a href="https://github.com/MikeCoder/hexo-tag-cloud">这里</a></del></li><li><a href="https://juejin.im/post/5c99a0f7e51d454e9b3c3343">这里</a></li><li><del><a href="https://github.com/nobalmohan/vue-tag-cloud">这里</a></del><br>最终参考<a href="https://github.com/SeregPie/VueWordCloud">VueWordCloud</a> 实现；</li></ol></li><li style="list-style: none"><input type="checkbox" checked></input> 记住密码；</li><li style="list-style: none"><input type="checkbox" checked></input> 标签、分类页面，item 数量为 0 时，点击事件 disable；</li><li><p>[x] 找回密码；</p><ul><li style="list-style: none"><input type="checkbox" checked></input> 前端异常处理；</li></ul></li><li><p>[x] 盘古之白</p><blockquote><p>有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其餘三成的人最后只能把遗產留给自己的猫。毕竟爱情跟书写都需要适时地留白。<br><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a></p><ol><li><a href="https://github.com/hustcc/hint">python 版本</a></li><li><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk">python 版本</a></li><li><a href="https://github.com/hustcc/lint-md/tree/master/packages/lint-md">JS 版本</a></li></ol></blockquote></li><li style="list-style: none"><input type="checkbox" checked></input> 首页摘要信息获取错误</li><li style="list-style: none"><input type="checkbox" checked></input> 概览页（index）显示</li><li style="list-style: none"><input type="checkbox" checked></input> 更新文章，对原有标签删除时，不成功，但新加正常</li><li style="list-style: none"><input type="checkbox" checked></input> 首页点击查看全部进入空白页</li><li style="list-style: none"><input type="checkbox" checked></input> 编辑文章时已经存在的标签会二次添加（查询中间表可以看到写了两次！）<br>  <del>1. 新建标签失败</del><br>  <del>2. 标题无法修改（目前有该入口，正常来说应该是可以更新的&lt;除非代码没有这块逻辑，如果没有，则不添加，文章新建之后就不要改变链接了&gt;）</del></li><li style="list-style: none"><input type="checkbox" checked></input> 文章详情页 header 下划线显示异常</li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li style="list-style: none"><input type="checkbox" checked></input> 数据库迁移报错  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">werkzeug.utils.ImportStringError: import_string() failed for &#39;mains.bp&#39;. Possible reasons are:</span><br><span class="line"></span><br><span class="line">- missing __init__.py in a package;</span><br><span class="line">- package or module path not included in sys.path;</span><br><span class="line">- duplicated package or module name taking precedence in sys.path;</span><br><span class="line">- missing module, class, function or variable;</span><br><span class="line"></span><br><span class="line">Debugged import:</span><br><span class="line"></span><br><span class="line">- &#39;mains&#39; not found.</span><br><span class="line"></span><br><span class="line">Original exception:</span><br><span class="line"></span><br><span class="line">ModuleNotFoundError: No module named &#39;mains&#39;</span><br></pre></td></tr></table></figure></li><li style="list-style: none"><input type="checkbox" checked></input> 未注册用户登录（假用户）无提示，后台报错:  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TypeError: unauthorized() takes 0 positional arguments but 1 was given</span><br></pre></td></tr></table></figure></li><li style="list-style: none"><input type="checkbox" checked></input> 首页热门标签应该显示最热，而不是全部</li><li style="list-style: none"><input type="checkbox" checked></input> 首页点标签名称，进去之后的名称 title 不对</li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><h3 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h3><ul><li style="list-style: none"><input type="checkbox" checked></input> 文章阅读计数</li><li style="list-style: none"><input type="checkbox" checked></input> 添加获取用户信息 API</li><li style="list-style: none"><input type="checkbox" checked></input> 博客自己修改  <ul><li style="list-style: none"><input type="checkbox" checked></input> view 页面需要 summary,因为在编辑时，摘要不能消失；  </li><li style="list-style: none"><input type="checkbox" checked></input> 编辑时需要对新的和旧的标签对比，正常不走 add 逻辑；  </li><li style="list-style: none"><input type="checkbox" checked></input> 编辑时应该是 post 请求，将用户提交的全量更新，没有的置空；</li></ul></li><li style="list-style: none"><input type="checkbox" checked></input> 博客作者自己删除</li><li style="list-style: none"><input type="checkbox" checked></input> slug 选项在更新文章时应该是不可见的（url 确定之后不可修改！）</li><li style="list-style: none"><input type="checkbox" checked></input> 链接由 id 变成数字和 slug 的组合</li><li style="list-style: none"><input type="checkbox" checked></input> 找回密码<ul><li style="list-style: none"><input type="checkbox" checked></input> 生成随机密码，给用户发送明文，并把数据库中数据加密更新保存；</li><li style="list-style: none"><input type="checkbox" checked></input> 用户输入一次之后过期；（Redis？<del>Celery 清除？</del>）</li><li style="list-style: none"><input type="checkbox" checked></input> 通过则设置密码，否则重新发送并重新设置密码；</li></ul></li></ul><h3 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h3><ul><li style="list-style: none"><input type="checkbox" checked></input> <del>访问已删除文章时，不会跳转到首页！</del><ul><li style="list-style: none"><input type="checkbox"></input> 目前可以跳转，但是由于 abort() 函数，导致会有报错闪现。</li></ul></li><li style="list-style: none"><input type="checkbox"></input> 用户邮箱验证，如果没有验证，则在首页提示用户去验证，完成验证之后才可以写文章；否则登录也无法进行有效操作。<ul><li style="list-style: none"><input type="checkbox" checked></input> 消息提示已完成；</li><li style="list-style: none"><input type="checkbox"></input> 需要完成激活邮箱；</li></ul></li><li style="list-style: none"><input type="checkbox"></input> 使用 swagger 生成 Flask RESTful<br>参考<a href="https://segmentfault.com/a/1190000010144742">使用 swagger 生成 Flask RESTful API - 古寺比的寺 - SegmentFault 思否</a></li><li><p>[ ] <code>vendor</code>文件过大，导致首页刷新时间过长；</p><p>参考 1. <a href="https://forum.vuejs.org/t/vue-cli-vendor-js/37246">这里</a>  2. <a href="https://segmentfault.com/q/1010000008832754">这里</a>  3. <a href="https://www.jianshu.com/p/e78c2210c410">这里</a></p></li><li style="list-style: none"><input type="checkbox"></input> 使用<code>盘古之白</code>之后不能输入<code>emoji</code>表情；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pymysql.err.InternalError: (1366, &quot;Incorrect string value: &#39;\\xF0\\x9F\\x98\\x98&lt;&#x2F;...&#39; for column &#39;content_html&#39; at row 1&quot;)</span><br></pre></td></tr></table></figure></li><li style="list-style: none"><input type="checkbox"></input> 链接的 slug 中直接把 emoji 也给显示出来了，此处需要对 emoji 进行过滤或者转换为字符说明。<ol><li><a href="https://stackoverflow.com/questions/33404752/removing-emojis-from-a-string-in-python">removing emojis from a string in Python - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/43797500/python-replace-unicode-emojis-with-ascii-characters/43813727#43813727">Python - replace unicode emojis with ASCII characters - Stack Overflow</a></li></ol></li><li style="list-style: none"><input type="checkbox"></input> 需要增加用户详情页（about?），可编辑用户信息；</li><li style="list-style: none"><input type="checkbox"></input> 使<code>aside</code>侧边栏固定，不会随鼠标滚动消失；</li><li style="list-style: none"><input type="checkbox"></input> 参考博客后端管理系统；<ul><li><a href="https://github.com/uncleLian/vue-blog">基于 vue 全家桶 + element-ui 构建的一个后台管理集成解决方案</a></li><li><a href="https://github.com/taylorchen709/vue-admin">vue-admin</a></li><li><a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a></li></ul></li><li style="list-style: none"><input type="checkbox"></input> 自适应时 footer 只有半个；</li><li style="list-style: none"><input type="checkbox"></input> 时间线无法正常显示；</li><li style="list-style: none"><input type="checkbox"></input> 使用<code>celery</code>备份博客<ol><li>每创建一篇文章；自动生成<code>xxxx.md</code>用于静态博客；</li><li>每个月备份数据库；将数据库通过邮件发送到本人邮箱；</li></ol></li><li style="list-style: none"><input type="checkbox" checked></input> 发送邮件改为<code>Celery</code>异步</li></ul><hr><p>优先级中等</p><ul><li style="list-style: none"><input type="checkbox"></input> 管理员账户</li><li style="list-style: none"><input type="checkbox"></input> 标签管理员手动添加</li><li style="list-style: none"><input type="checkbox"></input> 分类管理员手动添加</li><li style="list-style: none"><input type="checkbox"></input> i18n（en&amp;zh）</li><li style="list-style: none"><input type="checkbox"></input> 前端文件太大<a href="https://www.dongwm.com/post/optimize-javascript/">继续优化博客 Vue+Webpack 生成的 Javascript 文件体积 - 小明明 s à domicile</a></li></ul><hr><p>优先级低</p><ul><li style="list-style: none"><input type="checkbox"></input> 移动端自适应</li></ul>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> IdealYard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> TODO </tag>
            
            <tag> 博客 </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Gunicorn+Gevent+Supervisor+Nginx 部署 Flask 应用</title>
      <link href="blog/2019-08-07/how-to-deploy-flask-with-nginx-gunicorn-gevent-supervisor/"/>
      <url>blog/2019-08-07/how-to-deploy-flask-with-nginx-gunicorn-gevent-supervisor/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><ol><li><p>Nginx: 高性能<code>Web</code>服务器，负责反向代理；</p></li><li><p>gunicorn: （Green Unicorn，绿色独角兽）高性能 uWSGI 服务器；</p></li><li><p>gevent: 将<code>Python</code>同步代码转换为异步的协议库；</p></li><li><p>supervisor: 监控服务流程的工具；</p></li></ol><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash-4.2<span class="comment"># gunicorn --version</span></span><br><span class="line">gunicorn (version 19.9.0)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装-gunicorn-和-gevent"><a href="#安装-gunicorn-和-gevent" class="headerlink" title="安装 gunicorn 和 gevent"></a>安装 gunicorn 和 gevent</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install gunicorn</span><br><span class="line">pip install gevent</span><br></pre></td></tr></table></figure><h2 id="配置-gunicorn"><a href="#配置-gunicorn" class="headerlink" title="配置 gunicorn"></a>配置 gunicorn</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gun.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gevent.monkey</span><br><span class="line"></span><br><span class="line">gevent.monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;log&#x27;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line">loglevel = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># 绑定的ip及端口号</span></span><br><span class="line">bind = <span class="string">&#x27;0.0.0.0:5000&#x27;</span></span><br><span class="line">pidfile = <span class="string">&#x27;log/gunicorn.pid&#x27;</span></span><br><span class="line">logfile = <span class="string">&#x27;log/debug.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动的进程数</span></span><br><span class="line">workers = multiprocessing.cpu_count() * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">worker_class = <span class="string">&#x27;gunicorn.workers.ggevent.GeventWorker&#x27;</span></span><br><span class="line"></span><br><span class="line">x_forwarded_for_header = <span class="string">&#x27;X-FORWARDED-FOR&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash-4.2<span class="comment"># gunicorn -k gevent -c gun.py runserver:app</span></span><br><span class="line">[2019-08-07 16:00:20 +0800] [32111] [DEBUG] Current configuration:</span><br><span class="line">  config: gun.py</span><br><span class="line">  <span class="built_in">bind</span>: [<span class="string">&#x27;0.0.0.0:5000&#x27;</span>]</span><br><span class="line">  backlog: 2048</span><br><span class="line">  workers: 3</span><br><span class="line">  worker_class: gevent</span><br><span class="line">  threads: 1</span><br><span class="line"><span class="comment"># ………… 省略中间部分</span></span><br><span class="line">  ciphers: TLSv1</span><br><span class="line">  raw_paste_global_conf: []</span><br><span class="line">[2019-08-07 16:00:20 +0800] [32111] [INFO] Starting gunicorn 19.9.0</span><br><span class="line">[2019-08-07 16:00:20 +0800] [32111] [DEBUG] Arbiter booted</span><br><span class="line">[2019-08-07 16:00:20 +0800] [32111] [INFO] Listening at: http://0.0.0.0:5000 (32111)</span><br><span class="line">[2019-08-07 16:00:20 +0800] [32111] [INFO] Using worker: gevent</span><br><span class="line">[2019-08-07 16:00:20 +0800] [32115] [INFO] Booting worker with pid: 32115</span><br><span class="line">[2019-08-07 16:00:20 +0800] [32116] [INFO] Booting worker with pid: 32116</span><br><span class="line">[2019-08-07 16:00:20 +0800] [32117] [INFO] Booting worker with pid: 32117</span><br><span class="line">[2019-08-07 16:00:20 +0800] [32111] [DEBUG] 3 workers</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时正常访问<code>http://10.10.15.111:5000/</code>应该可以看到首页信息提示表示连接服务正常。<br><strong>注意</strong>：此处 ip 和端口均由自己设置，所以访问时应该做相应调整。<br>如果无法正常访问，则需要验证防火墙是否正常：  </p><ul><li>CentOS 7 以下版本  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询</span></span><br><span class="line">-bash-4.2<span class="comment"># iptables -nL|grep 5000</span></span><br><span class="line"><span class="comment"># 开放指定端口</span></span><br><span class="line">-bash-4.2<span class="comment"># iptables -I INPUT -p tcp --dport 5000 -j ACCEPT</span></span><br><span class="line"><span class="comment"># 再次查询</span></span><br><span class="line">-bash-4.2<span class="comment"># iptables -nL|grep 5000</span></span><br><span class="line">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:5000</span><br></pre></td></tr></table></figure></li><li>CentOS 7<br>使用<code>firewall-cmd</code>管理防火墙端口<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-port=5000/tcp      <span class="comment"># no</span></span><br><span class="line">firewall-cmd --add-port=5000/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --query-port=5000/tcp  <span class="comment"># yes</span></span><br><span class="line">systemctl status firewall</span><br><span class="line">systemctl status firewalld</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h2 id="安装-nginx-和-supervisor"><a href="#安装-nginx-和-supervisor" class="headerlink" title="安装 nginx 和 supervisor"></a>安装 nginx 和 supervisor</h2></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install nginx supervisor</span><br></pre></td></tr></table></figure><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><p>默认安装的 Nginx 配置文件<code>/etc/nginx/nginx.conf</code>内有如下配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf;</span><br></pre></td></tr></table></figure><p>即从外部目录<code>/etc/nginx/conf.d/</code>文件夹下还引入了其他配置文件。<br>这样，我们不修改默认配置，只在<code>/etc/nginx/conf.d/</code>目录下增加一个<code>***.conf</code>，来在外面增加新配置。</p><p>在<code>/etc/nginx/conf.d/</code>增加<code>app.conf</code>，内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;     <span class="comment"># 如果80端口被占用，可以使用其他端口，记得在防火墙中打开相应端口</span></span><br><span class="line">    server_name localhost;</span><br><span class="line">    charset utf-8; </span><br><span class="line">    access_log /var/pmmt/access.log;</span><br><span class="line">    error_log /var/pmmt/error.log;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 100M;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">            proxy_pass  http://0.0.0.0:5000;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            proxy_connect_timeout 300;</span><br><span class="line">            proxy_send_timeout 300;</span><br><span class="line">            proxy_read_timeout 300;</span><br><span class="line">            send_timeout 300;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">            proxy_set_header X-Scheme <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Port <span class="variable">$server_port</span>;</span><br><span class="line">            proxy_set_header X-Request-Start <span class="variable">$msec</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><ul><li>报错<code>nginx: [emerg] getpwnam(&quot;nginx&quot;) failed in /etc/nginx/nginx.conf:5</code><br>查看配置该行内容为<code>user nginx;</code>，添加用户<code>useradd nginx</code>；</li></ul><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><ul><li><p>ERR_CONTENT_LENGTH_MISMATCH<br>  查看 nginx 错误日志</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tailf /var/<span class="built_in">log</span>/nginx/error.log</span><br><span class="line">2019/08/09 03:04:21 [crit] 24616<span class="comment">#0: *204 open() &quot;/var/lib/nginx/tmp/proxy/2/03/0000000032&quot; failed (13: Permission denied) while reading upstream, client: 10.10.15.199, server: localhost, request: &quot;GET /static/js/app.1b53c809113e333c2727.js.map HTTP/1.1&quot;, upstream: &quot;http://0.0.0.0:5000/static/js/app.1b53c809113e333c2727.js.map&quot;, host: &quot;10.10.15.111:82&quot;</span></span><br></pre></td></tr></table></figure><p>  参考这里：<a href="https://blog.csdn.net/mr_ooo/article/details/81068369">ERR_CONTENT_LENGTH_MISMATCH 解决方法</a>      </p></li><li>进入首页出现<code>403 Forbidden</code><ol><li>nginx 启动用户和配置中的工作用户不一致（注意：如果你的<code>nginx</code>服务是<code>root</code>用户运行，则配置中<code>user</code>项配置为<code>root</code>）；</li><li>配置文件中缺少 index index.html index.htm index.php 行；</li><li>nginx 用户没有相应工作目录的操作权限（<code>chown -R nginx:nginx WORK_DIR_PATH</code>）；</li><li>防火墙设置。<br>参考这里：<a href="https://blog.csdn.net/onlysunnyboy/article/details/75270533">解决 Nginx 出现 403 forbidden (13: Permission denied)报错的四种方法</a></li></ol></li></ul><h2 id="配置-Supervisor"><a href="#配置-Supervisor" class="headerlink" title="配置 Supervisor"></a>配置 Supervisor</h2><p>首先检查是否存在配置文件，一般配置文件的路径是<code>/etc/supervisord.conf</code>，如果配置文件不存在，我们可以通过命令来生成：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure><br>配置文件的内容很多，项目配置可以参照<a href="http://www.supervisord.org/introduction.html">官网文档</a></p><p>打开配置文件的最后一行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">;[include]</span><br><span class="line">;files = /etc/supervisord/*.conf    <span class="comment"># 注意：本人安装版本为ini格式，所以我们自写的配置也应该调整为相应的.ini格式[include] \n files = supervisord.d/*.ini </span></span><br></pre></td></tr></table></figure><br>默认一般是注释掉的，我们可以取消注释，这行配置的作用也很浅显，就是导入设置的路径下的所有<code>conf</code>文件，这使得我们如果有多个项目可以不用都写在同一个配置文件里，可以一个项目一个配置文件，更适合管理。这里的路径也是可以按照实际需求随意更改。<br>手动启动 Supervisord<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure><br>在设置的路径下新建一个配置文件，命令请根据上一步设置的扩展名。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[program:project_name]</span><br><span class="line"><span class="built_in">command</span>=/usr/bin/gunicorn -c gun.py runserver:app       <span class="comment"># 具体路径根据自己安装或者虚拟环境中的位置进行配置</span></span><br><span class="line">directory=/project_path/        <span class="comment"># 项目路径</span></span><br><span class="line">startsecs=0</span><br><span class="line">stopwaitsecs=0</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br></pre></td></tr></table></figure><br><code>project_name</code>按照你的实际需求修改，作为你这个服务的唯一标识，用于启动停止服务时使用。<br><code>command</code>修改为测试<code>gunicorn</code>时使用的命令，建议使用绝对路径。<br><code>directory</code>指定了工作路径，通常设置为项目根目录，我们填写的 gun.py 和 app 都是基于这个路径的。</p><p>管理<code>Supervisor</code>的项目是使用<code>supervisorctl</code>命令，我们可以启动项目试试看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisorctl start PROJECT_NAME</span><br></pre></td></tr></table></figure><p>如果没有报错，应该可以和上一步测试<code>gunicorn</code>一样可以正常访问项目了。<br>验证<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash-4.2<span class="comment"># supervisorctl</span></span><br><span class="line">app                              RUNNING   pid 24639, uptime 0:20:55</span><br></pre></td></tr></table></figure></p><h3 id="报错记录"><a href="#报错记录" class="headerlink" title="报错记录"></a>报错记录</h3><ul><li>Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord. For help, use /usr/bin/supervisord -h  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以查看supervisor.sock并删除 </span></span><br><span class="line">-bash-4.2<span class="comment"># find / -name supervisor.sock </span></span><br><span class="line">/run/supervisor/supervisor.sock</span><br><span class="line">-bash-4.2<span class="comment"># unlink /run/supervisor/supervisor.sock</span></span><br></pre></td></tr></table></figure>再次重新启动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash-4.2<span class="comment"># supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2></li></ul><ol><li><a href="https://programmer.help/blogs/5c13afa73d10a.html">Huawei Cloud Centos7 Flask+Gunicorn+Gevent+Supervisor+Nginx Multi-site Production Environment Deployment</a></li><li><a href="https://www.jianshu.com/p/192e62a5cdd2">Flask + Nginx + Gunicorn + Gevent 部署</a></li><li><a href="https://www.jianshu.com/p/65fae00615b9">gunicorn+gevent+nginx 部署 flask 应用</a></li><li><a href="https://blog.csdn.net/spark_csdn/article/details/80790929">CentOS 上 Flask + uWSGI + Nginx 部署</a></li><li><a href="https://www.zhihu.com/question/38528616">Nginx、Gunicorn 在服务器中分别起什么作用</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Web 开发 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 报错&quot;TypeError:a-bytes-like-object-is-required,not-&#39;str&#39;&quot;解决办法</title>
      <link href="blog/2019-07-11/a-bytes-like-object-is-required-not-str-python3/"/>
      <url>blog/2019-07-11/a-bytes-like-object-is-required-not-str-python3/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天在解析一个工具输出问题时遇到这两个编码错误，记录一下。</p><ul><li>TypeError: a bytes-like object is required, not ‘str’</li><li>UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xb3 in position 38: invalid start byte<a id="more"></a></li></ul><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><blockquote><p>导致这个问题主要的原因是你调用的是字符<code>str</code>类型的方法而你给传递的是一个字节<code>byte</code>类型的对象。</p></blockquote><h2 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a>先上代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecCommandError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecCommand</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cust_popen_list</span>(<span class="params">cmdlist, close_fds=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        subprocess.call只接受数组变量作为命令，并将数组的第一个元素作为命令，剩下的全部作为该命令的参数。</span></span><br><span class="line"><span class="string">        :param cmdlist:</span></span><br><span class="line"><span class="string">        :param close_fds:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        lastcmdlist = <span class="built_in">list</span>()</span><br><span class="line">        lastcmdlist.extend(cmdlist)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            proc = subprocess.Popen(lastcmdlist, shell=<span class="literal">False</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE,</span><br><span class="line">                                    close_fds=close_fds)</span><br><span class="line">            retcode = proc.wait()</span><br><span class="line">            <span class="keyword">return</span> retcode, proc</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> (ExecCommandError, e)</span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HwMaker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.retcode = <span class="number">1</span></span><br><span class="line">        self.proc = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec_command</span>(<span class="params">cmd_list=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        调用执行命令的程序</span></span><br><span class="line"><span class="string">        :param cmd_list: list,</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> cmd_list</span><br><span class="line">        cmd = ExecCommand()</span><br><span class="line">        <span class="keyword">return</span> cmd.cust_popen_list(cmd_list)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_label</span>(<span class="params">label</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        如果以空格分割，则替换为 with_under_case,最后调用lower()返回lower_with_under_case</span></span><br><span class="line"><span class="string">        :param label:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        split_label = label.split()</span><br><span class="line">        label = <span class="string">&#x27;_&#x27;</span>.join([span.lower() <span class="keyword">for</span> span <span class="keyword">in</span> split_label]) <span class="keyword">if</span> <span class="built_in">len</span>(split_label) &gt; <span class="number">1</span> <span class="keyword">else</span> label.lower()</span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensorMaker</span>(<span class="params">HwMaker</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">secs2hours</span>(<span class="params">secs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        秒转化为小时</span></span><br><span class="line"><span class="string">        :param secs:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        mm, ss = <span class="built_in">divmod</span>(secs, <span class="number">60</span>)</span><br><span class="line">        hh, mm = <span class="built_in">divmod</span>(mm, <span class="number">60</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%d:%02d:%02d&quot;</span> % (hh, mm, ss)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_vertical_line</span>(<span class="params">self, parser_data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        以“|” 分割之后获取有用信息</span></span><br><span class="line"><span class="string">        :param parser_data:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        _expect_info = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> parser_data:</span><br><span class="line">            strip_line = line.strip().decode(<span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;|&#x27;</span> <span class="keyword">in</span> strip_line:</span><br><span class="line">                item, value = [item.strip() <span class="keyword">for</span> item <span class="keyword">in</span> strip_line.split(<span class="string">&#x27;|&#x27;</span>)]</span><br><span class="line">                lower_label = self.make_label(item)</span><br><span class="line">                _expect_info[lower_label] = value</span><br><span class="line">        <span class="keyword">return</span> _expect_info</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ipmi_pminfo</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">         [SlaveAddress = B2h] [Module 2]</span></span><br><span class="line"><span class="string">         Item                           |                Value</span></span><br><span class="line"><span class="string">         ----                           |                -----</span></span><br><span class="line"><span class="string">         Status                         |     [STATUS OK](00h)</span></span><br><span class="line"><span class="string">         AC Input Voltage               |              237.0 V</span></span><br><span class="line"><span class="string">         AC Input Current               |               0.36 A</span></span><br><span class="line"><span class="string">         DC 12V Output Voltage          |              12.04 V</span></span><br><span class="line"><span class="string">         DC 12V Output Current          |               5.07 A</span></span><br><span class="line"><span class="string">         Temperature 1                  |              34C/94F</span></span><br><span class="line"><span class="string">         Temperature 2                  |              37C/98F</span></span><br><span class="line"><span class="string">         Fan 1                          |             5400 RPM</span></span><br><span class="line"><span class="string">         Fan 2                          |              985 RPM</span></span><br><span class="line"><span class="string">         DC 12V Output Power            |                 61 W</span></span><br><span class="line"><span class="string">         AC Input Power                 |                 78 W</span></span><br><span class="line"><span class="string">         PMBus Revision                 |               0xD222</span></span><br><span class="line"><span class="string">         PWS Serial Number              |      ³³³³³³³U³³³³³³³</span></span><br><span class="line"><span class="string">         PWS Module Number              |         ³³³³³³³³³³³³</span></span><br><span class="line"><span class="string">         PWS Revision                   |               ³³³³³³</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         out: &#123;&#x27;status&#x27;: &#x27;[STATUS OK](00h)&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;ac_input_voltage&#x27;: &#x27;237.0 V&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;ac_input_current&#x27;: &#x27;0.39 A&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;dc_12v_output_voltage&#x27;: &#x27;12.04 V&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;dc_12v_output_current&#x27;: &#x27;5.19 A&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;temperature_1&#x27;: &#x27;34C/94F&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;temperature_2&#x27;: &#x27;37C/98F&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;fan_1&#x27;: &#x27;5424 RPM&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;fan_2&#x27;: &#x27;985 RPM&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;dc_12v_output_power&#x27;: &#x27;63 W&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;ac_input_power&#x27;: &#x27;71 W&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;pmbus_revision&#x27;: &#x27;0xD222&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;pws_serial_number&#x27;: &#x27;U&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;pws_module_number&#x27;: &#x27;&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;pws_revision&#x27;: &#x27;&#x27;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        _pm_info = &#123;&#125;</span><br><span class="line">        _cmd = [<span class="string">&#x27;ipmicfg&#x27;</span>, <span class="string">&#x27;-pminfo&#x27;</span>]</span><br><span class="line">        self.retcode, self.proc = self.exec_command(_cmd)</span><br><span class="line">        <span class="keyword">if</span> self.retcode == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 截取有用行（排除前三行）</span></span><br><span class="line">            out_data = self.out_data()</span><br><span class="line">            <span class="keyword">if</span> out_data:</span><br><span class="line">                _pm_info = self.parse_vertical_line(out_data[<span class="number">3</span>:])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> _pm_info</span><br></pre></td></tr></table></figure><h2 id="原因解释及解决方案"><a href="#原因解释及解决方案" class="headerlink" title="原因解释及解决方案"></a>原因解释及解决方案</h2><p>关于<code>TypeError: a bytes-like object is required, not &#39;str&#39;</code>错误，我们可以这样复现一下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [16]: a &#x3D; b&#39;123|456&#39;</span><br><span class="line"></span><br><span class="line">In [17]: a.split(&#39;|&#39;)                                                                                         </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-17-d4229c89bf5f&gt; in &lt;module&gt;</span><br><span class="line">----&gt; 1 a.split(&#39;|&#39;)</span><br><span class="line"></span><br><span class="line">TypeError: a bytes-like object is required, not &#39;str&#39;</span><br></pre></td></tr></table></figure><br>所以提示类型错误，如果你的<em>字节</em>是<code>byte</code>型，可以尝试先<code>decode</code>转为<em>字符</em>类型之后再执行相应的<code>str</code>方法。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [20]: a &#x3D; b&#39;123|456&#39;                                                                                        </span><br><span class="line">In [21]: a.decode(&#39;utf-8&#39;).split(&#39;|&#39;)                                                                         </span><br><span class="line">Out[21]: [&#39;123&#39;, &#39;456&#39;]</span><br></pre></td></tr></table></figure><p>关于问题<code>UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xb3 in position 38: invalid start byte</code>，主要是因为结果中有<code>³³³³³³³U³³³³³³³</code>,这个没有办法按照<code>utf-8</code>解码。<br>出现异常报错是由于设置了<code>decode()</code>方法的第二个参数<code>errors</code>为严格（<code>strict</code>）形式造成的，因为默认就是这个参数，将其更改为<code>ignore</code>即可。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/wang7807564/article/details/78164855/">Python3 解决 UnicodeDecodeError: ‘utf-8’ codec can’t decode byte..问题 终极解决方案</a></li><li><a href="https://stackoverflow.com/questions/33054527/typeerror-a-bytes-like-object-is-required-not-str-when-writing-to-a-file-in">TypeError: a bytes-like object is required, not ‘str’ when writing to a file in Python3</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Vue 中实现显示全部的功能？</title>
      <link href="blog/2019-07-05/how-to-make-show-all-with-Vue/"/>
      <url>blog/2019-07-05/how-to-make-show-all-with-Vue/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><p>我们可以简单分析一下功能实现：</p><ol><li>显示内容是从后台一次性获取到的，不存在点击“阅读更多”再去请求一次后台获取剩余数据的可能；</li><li>通过第一步其实可以得出，网站是通过控制显示元素的高度来实现这一功能，而非控制内容的获取；</li><li>可以看到“阅读更多”按钮上有一层渐变遮罩层，网站通过这一遮罩挡住剩余内容。</li></ol><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div v-for&#x3D;&quot;(item, key) in testItems&quot; v-show&#x3D;&quot;key&lt;limitShowNum&quot;&gt;</span><br><span class="line">      &#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;el-button @click&#x3D;&quot;showMore&quot; type&#x3D;&quot;text&quot; style&#x3D;&quot;color:#79bbff;&quot;&gt;&#123;&#123;showAllTip&#125;&#125;&lt;&#x2F;el-button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;&gt;</span><br><span class="line">&lt;!-- 引入组件库 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">          testItems: [&#39;海客谈瀛洲，烟涛微茫信难求；&#39;, &#39;越人语天姥，云霞明灭或可睹。&#39;, &#39;天姥连天向天横，势拔五岳掩赤城。&#39;, &#39;天台四万八千丈，对此欲倒东南倾。&#39;, &#39;我欲因之梦吴越，一夜飞度镜湖月。&#39;, &#39;湖月照我影，送我至剡溪。&#39;, &#39;谢公宿处今尚在，渌水荡漾清猿啼。&#39;, &#39;脚著谢公屐，身登青云梯。&#39;, &#39;半壁见海日，空中闻天鸡。&#39;, &#39;千岩万转路不定，迷花倚石忽已暝。&#39;, &#39;熊咆龙吟殷岩泉，栗深林兮惊层巅。&#39;, &#39;云青青兮欲雨，水澹澹兮生烟。&#39;, &#39;列缺霹雳，丘峦崩摧。&#39;, &#39;洞天石扉，訇然中开。&#39;, &#39;青冥浩荡不见底，日月照耀金银台。&#39;, &#39;霓为衣兮风为马，云之君兮纷纷而来下。&#39;, &#39;虎鼓瑟兮鸾回车，仙之人兮列如麻。&#39;, &#39;忽魂悸以魄动，恍惊起而长嗟。&#39;, &#39;惟觉时之枕席，失向来之烟霞。&#39;, &#39;世间行乐亦如此，古来万事东流水。&#39;, &#39;别君去兮何时还？且放白鹿青崖间。须行即骑访名山。&#39;, &#39;安能摧眉折腰事权贵，使我不得开心颜！&#39;],</span><br><span class="line">          isShow: true,</span><br><span class="line">  showAllTip: &#39;我全都要 😜&#39;,</span><br><span class="line">  limitShowNum: 5,</span><br><span class="line">      defaultShowNum:5</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        &#x2F;&#x2F; 功能实现</span><br><span class="line">        showMore()&#123;</span><br><span class="line">let showDataLen &#x3D; this.testItems.length</span><br><span class="line">this.isShow &#x3D; !this.isShow;</span><br><span class="line">this.limitShowNum &#x3D; this.isShow? this.defaultShowNum: showDataLen;</span><br><span class="line">this.showAllTip &#x3D; this.isShow?&#39;我全都要 😜&#39;:&#39;收起&#39;</span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h2><p>此处显示与直接代码运行效果不一样，主要是因为样式以及添加 i 标签图标等导致；样式不会写的话可以参考<code>element-ui</code>官方文档的实现。</p><p><img src= "/img/loading.svg" data-lazy-src="/images/show_all_example.gif" alt="显示全部与折叠"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/XuM222222/article/details/80189355">利用 vue 实现“显示更多”功能</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask-sqlalchemy 中的多对多关系模型问题记录</title>
      <link href="blog/2019-07-03/flask-sqlalchemy-many-to-many/"/>
      <url>blog/2019-07-03/flask-sqlalchemy-many-to-many/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can<span class="string">&#x27;t proceed with initialization of other mappers. Triggering mapper: &#x27;</span>mapped class Article-&gt;iy_article<span class="string">&#x27;. Original exception was: Error creating backref &#x27;</span>articles<span class="string">&#x27; on relationship &#x27;</span>Article.tags<span class="string">&#x27;: property of that name exists on mapper &#x27;</span>mapped class Tag-&gt;iy_tag<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>出现这个错误是因为两个关系表中互相定义，意思是你的代码中可能同时包含下面的语句：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># class Article:</span></span><br><span class="line"></span><br><span class="line">tags = db.relationship(<span class="string">&#x27;Tag&#x27;</span>, secondary=posts_tags_table, backref=db.backref(<span class="string">&#x27;articles&#x27;</span>, lazy=<span class="string">&#x27;dynamic&#x27;</span>),</span><br><span class="line">                               lazy=<span class="string">&quot;dynamic&quot;</span>)</span><br><span class="line"><span class="comment"># Class Tag:                            </span></span><br><span class="line">articles = db.relationship(<span class="string">&#x27;Article&#x27;</span>, secondary=posts_tags_table,</span><br><span class="line">    <span class="comment">#                            back_populates=&#x27;tags&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>当您使用<code>backref</code>时，<code>SQLAlchemy</code>会自动创建向后关联，因此它（<code>backref</code>）<strong>只应该</strong>在关系的一侧使用。所以应该删除上面其中的一句定义。</p><p>参见这里👉 <a href="https://stackoverflow.com/questions/39869793/when-do-i-need-to-use-sqlalchemy-back-populates">when-do-i-need-to-use-sqlalchemy-back-populates</a></p><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlalchemy.orm.exc.StaleDataError: DELETE statement on table <span class="string">&#x27;iy_post_tags&#x27;</span> expected to delete 4 row(s); Only 24 were matched.</span><br></pre></td></tr></table></figure><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><p>出现这个问题原因是在多对多关系的关联表中，出现了重复数据。<br>书上说</p><blockquote><p>将某个 Book 的 Writer 属性设置为 None,就会解除与 Writer 对象的关系。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">post_obj = Article.query.<span class="built_in">filter</span>(Article.post_id == post_id).one()</span><br><span class="line"><span class="keyword">if</span> post_obj:</span><br><span class="line">    body_id = post_obj.body_id</span><br><span class="line">    post_obj.tags = <span class="literal">None</span></span><br><span class="line">    db.session.commit()</span><br></pre></td></tr></table></figure><p>失败！😞</p><p>再次参考👉 <a href="https://seagullbird.xyz/posts/how-to-delete-many-to-many-in-sqlalchemy/">How to delete a Many-to-Many relationship in Flask-SQLAlchemy</a><br>作者提到可能是因为对数据手动处理的问题。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>查询数据表中是否存在重复数据：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> iy_post_tags <span class="keyword">where</span> post_id<span class="operator">=</span><span class="number">26</span>;</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.22</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> iy_post_tags;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+</span></span><br><span class="line"><span class="operator">|</span> post_id <span class="operator">|</span> tag_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">20</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">21</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">22</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">23</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">24</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">24</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">20</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">25</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">27</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span>    <span class="comment">-- 注意这两行，表中出现同一篇文章，标签相同记录两次的情况，此时删除操作就会报错</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">27</span> <span class="operator">|</span>      <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>的确存在重复数据，可以手动删除。</p><p>如果无法删除，可以参考<a href="https://stackoverflow.com/questions/36002638/how-to-fix-sqlalchemy-sawarning-delete-statement-on-table-expected-to-delete-1">这里</a> 的方案：修改表结构，解除确认删除。</p><h3 id="利用代码限制永久解决"><a href="#利用代码限制永久解决" class="headerlink" title="利用代码限制永久解决"></a>利用代码限制永久解决</h3><p>利用主键唯一约束，在创建中间表的时候进行限制<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置： primary_key=True</span></span><br><span class="line">article_tag_rel = sa.Table(<span class="string">&#x27;article_tag_rel&#x27;</span>, Base.metadata,</span><br><span class="line">    sa.Column(<span class="string">&#x27;tag_id&#x27;</span>, sa.Integer, ForeignKey(<span class="string">&#x27;tag.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">    sa.Column(<span class="string">&#x27;article_id&#x27;</span>, sa.Integer, ForeignKey(<span class="string">&#x27;article.id&#x27;</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面的一种简便写法</span></span><br><span class="line"><span class="keyword">import</span> db</span><br><span class="line">posts_tags_table = db.Table(<span class="string">&#x27;iy_post_tags&#x27;</span>, db.Model.metadata,</span><br><span class="line">                            db.Column(<span class="string">&#x27;post_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;iy_article.post_id&#x27;</span>)),</span><br><span class="line">                            db.Column(<span class="string">&#x27;tag_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;iy_tag.id&#x27;</span>)),</span><br><span class="line">                            db.PrimaryKeyConstraint(<span class="string">&#x27;tag_id&#x27;</span>, <span class="string">&#x27;post_id&#x27;</span>)</span><br><span class="line">                            )</span><br></pre></td></tr></table></figure></p><ul><li>参见<a href="https://github.com/kvesteri/sqlalchemy-continuum/issues/65">这里</a> 和 <a href="https://stackoverflow.com/questions/41941273/deleting-from-a-sqlalchemy-many-to-many-matches-the-wrong-number-of-rows">这里</a></li></ul><p>出现这个问题，可能是因为删除主键字段的时候，<code>tags</code> 含有对 <code>post_id</code> 的引用。<br>具体讨论参见<a href="https://groups.google.com/forum/#!topic/sqlalchemy/vfoTsQkqfHI">这里</a></p><h2 id="back-populates-vs-backref"><a href="#back-populates-vs-backref" class="headerlink" title="back_populates vs backref"></a><code>back_populates</code> vs <code>backref</code></h2><p><a href="https://stackoverflow.com/questions/39869793/when-do-i-need-to-use-sqlalchemy-back-populates">python - When do I need to use sqlalchemy back_populates? - Stack Overflow</a></p><blockquote><p>backref is more succinct because you don’t need to declare the relation on both classes, but in practice I find it not worth to save this on line. I think back_populates is better, not only because in python culture “Explicit is better than implicit” (Zen of Python), but when you have many models, with a quick glance at its declaration you can see all relationships and their names instead of going over all related models. Also, a nice side benefit of back_populates is that you get auto-complete on both directions on most IDEs.</p></blockquote><p>英文不好的同学可以参考本人下文翻译：</p><p><code>backref</code>更为简洁，因为您不需要在两个类上都声明该关系，但是实践中，我发现这一点不值得作为准则。基于以下两点，我认为<code>back_populates</code>更好：</p><ol><li>不仅因为在python文化中，“显式比隐式更好”（Python之禅）；</li><li>而且当我们创建了许多模型时，快速浏览一下它的声明，就可以看到所有关系及其名称，而不用去在所有相关模型上慢慢查找；</li><li>另外，back_populates的一个不错的好处是，您可以在大多数IDE的两个方向上自动完成。（TODO：此处不知道如何实现）</li></ol><blockquote><p>A human being should be able to change a diaper, plan an invasion, butcher a hog, conn a ship, design a building, write a sonnet, balance accounts, build a wall, set a bone, comfort the dying, take orders, give orders, cooperate, act alone, solve equations, analyze a new problem, pitch manure, program a computer, cook a tasty meal, fight efficiently, die gallantly. Specialization is for insects.</p><p>一个人应该能够换尿布，策划战争，杀猪，开船，设计房子，写十四行诗，结算账户，砌墙，接脱臼的骨头，安慰濒死的人，服从命令，发布号令，携手合作，独立行动，解数学方程，分析新问题，铲粪，电脑编程，做出可口的饭，善打架，勇敢地死去。只有昆虫才囿于一门。</p><footer><strong>Robert A. Heinlein</strong><cite>《时间足够你爱》</cite></footer></blockquote>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> IdealYard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> SqlAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 flask-celery 实现异步任务？</title>
      <link href="blog/2019-06-18/how-to-use-celery-with-flask/"/>
      <url>blog/2019-06-18/how-to-use-celery-with-flask/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h1><ul><li><code>redis</code>版本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --version</span><br><span class="line">redis-cli 5.0.4</span><br></pre></td></tr></table></figure></li><li><code>celery</code>版本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">celery --version</span><br><span class="line">4.3.0 (rhubarb)</span><br></pre></td></tr></table></figure></li><li><code>Flask</code>和 <code>Python</code> 版本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flask --version</span><br><span class="line">Flask 1.0.2</span><br><span class="line">Python 3.6.5 (default, Apr  1 2018, 05:46:30) </span><br><span class="line">[GCC 7.3.0]</span><br></pre></td></tr></table></figure></li><li><code>Linux</code> 版本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 18.04 LTS</span><br><span class="line">Release:18.04</span><br><span class="line">Codename:bionic</span><br><span class="line"><span class="comment"># ---</span></span><br><span class="line">uname -a</span><br><span class="line">Linux <span class="built_in">local</span> 4.15.0-22-generic <span class="comment">#24-Ubuntu SMP Wed May 16 12:15:17 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Celery是什么"><a href="#Celery是什么" class="headerlink" title="Celery是什么"></a><code>Celery</code>是什么</h2></li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>Celery</code> 是一个“自带电池”的专注于实时处理和任务调度的分布式任务队列，同时提供操作和维护分布式系统所需的<strong>工具</strong>。</p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src= "/img/loading.svg" data-lazy-src="/images/structure-of-celery.png" alt="celery架构图"></p><center><span>celery架构图</span></center><p><code>Celery</code>支持定时任务（Celery Beat）和异步执行(Async Task)两种模式。同步模式为任务调用方等待任务执行完成，这种方式等同于 RPC(Remote Procedure Call)， 异步方式为任务在后台执行，调用方调用后就去做其他工作，之后再根据需要来查看任务结果。<code>Celery</code>自己没有实现消息队列，而是直接已存在的消息队列作为<code>Broker</code>角色。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>使用 <code>Celery</code> 运行后台任务并不像在线程中这样做那么简单，但是好处多多。<code>Celery</code> 具有分布式架构，使应用更加易于扩展。一个 <code>Celery</code> 安装有三个核心组件：</p><ul><li><code>Celery</code> 客户端: 用于发布后台作业。当与 <code>Flask</code> 一起工作的时候，客户端与 <code>Flask</code> 应用一起运行。</li><li>Celery workers: 任务消费者，是运行后台作业的进程。<code>Celery</code> 支持本地和远程的 <code>workers</code>，因此你就可以在 <code>Flask</code> 服务器上启动一个单独的 <code>worker</code>，随后随着你的应用需求的增加而新增更多的 <code>workers</code>。</li><li>消息代理（<code>Broker</code>）: 客户端通过消息队列和 <code>workers</code> 进行通信，<code>Celery</code> 支持多种方式来实现这些队列。常见的为 <code>RabbitMQ</code> 和 <code>Redis</code>。</li><li>任务结果存储：用来存储<code>workers</code>执行的任务结果。<br>详见<a href="http://docs.jinkan.org/docs/celery/getting-started/introduction.html#id19">Celery 是……</a></li></ul><h2 id="Celery的安装配置"><a href="#Celery的安装配置" class="headerlink" title="Celery的安装配置"></a><code>Celery</code>的安装配置</h2><h3 id="安装-Celery"><a href="#安装-Celery" class="headerlink" title="安装 Celery"></a>安装 <code>Celery</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install celery</span><br></pre></td></tr></table></figure><p>安装时会自动解决依赖：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Installing collected packages: vine, amqp, kombu, billiard, celery</span><br></pre></td></tr></table></figure><br>验证<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">celery --version</span><br><span class="line">4.3.0 (rhubarb)</span><br></pre></td></tr></table></figure></p><h3 id="与-redis-结合使用"><a href="#与-redis-结合使用" class="headerlink" title="与 redis 结合使用"></a>与 <code>redis</code> 结合使用</h3><p>redis 安装可以参考之前写的这篇文章<a href="https://imoyao.github.io/blog/2019-04-11/how-to-install-Redis-on-Linux/">Linux 下如何安装 Redis？</a></p><p><strong>注意</strong>： 此处需要同时安装<code>redis</code>客户端和<code>redis</code>的<code>Python</code>支持。</p><h3 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imoyao@local:~$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;_kombu.binding.celery&quot;</span><br><span class="line">2) &quot;celery-task-meta-a9db6911-e15a-4b9e-b321-958f5298652a&quot;</span><br><span class="line">3) &quot;celery-task-meta-e22b0603-8117-4f0d-ac6b-ad621738e256&quot;</span><br><span class="line">4) &quot;unacked_mutex&quot;</span><br><span class="line">5) &quot;_kombu.binding.celery.pidbox&quot;</span><br><span class="line">6) &quot;celery-task-meta-aac524bd-cb47-4493-b0dd-9712a98a3f14&quot;</span><br><span class="line">7) &quot;_kombu.binding.celeryev&quot;</span><br><span class="line">8) &quot;celery-task-meta-ccd8d274-7f14-4abc-8244-e80f01932097&quot;</span><br><span class="line">9) &quot;celery-task-meta-3b2b3efa-4ad7-4c7e-b92d-27636eaeaa6b&quot;</span><br><span class="line">127.0.0.1:6379&gt; get celery-task-meta-a9db6911-e15a-4b9e-b321-958f5298652a</span><br><span class="line">&quot;&#123;\&quot;status\&quot;: \&quot;SUCCESS\&quot;, \&quot;result\&quot;: 30, \&quot;traceback\&quot;: null, \&quot;children\&quot;: [], \&quot;task_id\&quot;: \&quot;a9db6911-e15a-4b9e-b321-958f5298652a\&quot;, \&quot;date_done\&quot;: \&quot;2019-06-13T18:43:43.491009\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="如何在项目中使用Celery"><a href="#如何在项目中使用Celery" class="headerlink" title="如何在项目中使用Celery"></a>如何在项目中使用<code>Celery</code></h2><p>以与<code>Flask</code>结合为例(使用<code>redis</code>作为<code>backend</code>)</p><ul><li>创建<code>celery</code>实例</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app\__init__.py</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_celery</span>(<span class="params">app</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    参见：http://docs.jinkan.org/docs/flask/patterns/celery.html</span></span><br><span class="line"><span class="string">    初始化celery</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    celery = Celery(app.import_name, broker=app.config[<span class="string">&#x27;CELERY_BROKER_URL&#x27;</span>])</span><br><span class="line">    celery.conf.update(app.config)</span><br><span class="line">    TaskBase = celery.Task</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ContextTask</span>(<span class="params">TaskBase</span>):</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">with</span> app.app_context():</span><br><span class="line">                <span class="keyword">return</span> TaskBase.__call__(self, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    celery.Task = ContextTask</span><br><span class="line">    <span class="keyword">return</span> celery</span><br></pre></td></tr></table></figure><ul><li>创建后台任务</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery.utils.log <span class="keyword">import</span> get_task_logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app, init_celery</span><br><span class="line"></span><br><span class="line">lg = get_task_logger(__name__)      <span class="comment"># 记录日志</span></span><br><span class="line">celery = init_celery(create_app(os.getenv(<span class="string">&#x27;FLASK_CONFIG&#x27;</span>, <span class="string">&#x27;default&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># @celery.task(name=&#x27;pmrearend.task.log_it&#x27;)        # 此处是解决导入失败的一种方案，但是感觉不够优雅，需要深入了解</span></span><br><span class="line"><span class="meta">@celery.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_it</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    msg = num1 + num2</span><br><span class="line">    print(msg)</span><br><span class="line">    lg.debug(<span class="string">&quot;in log_test()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># task = log_it.delay(5,8)</span></span><br><span class="line">    task = log_it.apply_async(args=[<span class="number">10</span>, <span class="number">20</span>], countdown=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>新建目录及文件  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /var/<span class="built_in">log</span>/celery/</span><br><span class="line">sudo touch /var/<span class="built_in">log</span>/celery/celery.log </span><br></pre></td></tr></table></figure></li><li><p>启动 celery worker 服务</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">celery -A task worker -l debug -f /var/<span class="built_in">log</span>/celery/celery.log</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="遇到的问题记录"><a href="#遇到的问题记录" class="headerlink" title="遇到的问题记录"></a>遇到的问题记录</h3><ol><li><p>sqlalchemy.exc.InvalidRequestError</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlalchemy.exc.InvalidRequestError: Table <span class="string">&#x27;user&#x27;</span> is already defined <span class="keyword">for</span> this MetaData instance.  </span><br><span class="line">Specify <span class="string">&#x27;extend_existing=True&#x27;</span> to redefine options and columns on an existing Table object.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 解决：在对应 model 中添加<code>&#39;extend_existing&#39;: True</code></p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__table_args__ = &#123;<span class="string">&#x27;extend_existing&#x27;</span>: <span class="literal">True</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>celery: command not found</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo: celery: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p> 解决：按照绝对路径调用<code>celery</code></p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> celery</span><br><span class="line">/home/imoyao/envs/py3flk/bin/celery</span><br></pre></td></tr></table></figure><p> 替换此处<code>celery</code>的位置即可运行（TODO：不够优雅，暂时测试性解决方案）</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /home/imoyao/envs/py3flk/bin/celery -A pmrearend.task worker -l debug -f /var/<span class="built_in">log</span>/celery/celery.log</span><br></pre></td></tr></table></figure></li><li><p>没有导入<code>task</code>模块</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2019-06-14 02:32:40,115: ERROR/MainProcess] Received unregistered task of <span class="built_in">type</span> <span class="string">&#x27;pmrearend.log_it&#x27;</span>.</span><br><span class="line">The message has been ignored and discarded.</span><br><span class="line"></span><br><span class="line">Did you remember to import the module containing this task?</span><br><span class="line">Or maybe you<span class="string">&#x27;re using relative imports?</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p> 解决：每个任务必须有不同的名称。如果没有显示提供名称，任务装饰器将会自动产生一个，产生的名称会基于这些信息： 1）任务定义所在的模块， 2）任务函数的名称</p><p> 显示设置任务名称的例子：在装饰器<a href="mailto:`@app.task">`@app.task</a><code>中加入参数</code>name<code>，就可以被</code>celery`读取到。  </p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@celery.task(<span class="params">name=<span class="string">&#x27;pmrearend.task.log_it&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_it</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    msg = num1 + num2</span><br><span class="line">    print(msg)</span><br><span class="line">    lg.debug(<span class="string">&quot;in log_test()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line">```   </span><br><span class="line">正常运行结果</span><br><span class="line"></span><br><span class="line">```plain</span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">43</span>,<span class="number">139</span>: DEBUG/MainProcess] TaskPool: Apply &lt;function _fast_trace_task at <span class="number">0x7f72a03fef28</span>&gt; (args:(<span class="string">&#x27;pmrearend.task.log_it&#x27;</span>, <span class="string">&#x27;a9db6911-e15a-4b9e-b321-958f5298652a&#x27;</span>, &#123;<span class="string">&#x27;lang&#x27;</span>: <span class="string">&#x27;py&#x27;</span>, <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;pmrearend.task.log_it&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;a9db6911-e15a-4b9e-b321-958f5298652a&#x27;</span>, <span class="string">&#x27;shadow&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;eta&#x27;</span>: <span class="string">&#x27;2019-06-13T18:43:43.139123+00:00&#x27;</span>, <span class="string">&#x27;expires&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;group&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;retries&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;timelimit&#x27;</span>: [<span class="literal">None</span>, <span class="literal">None</span>], <span class="string">&#x27;root_id&#x27;</span>: <span class="string">&#x27;a9db6911-e15a-4b9e-b321-958f5298652a&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;argsrepr&#x27;</span>: <span class="string">&#x27;[10, 20]&#x27;</span>, <span class="string">&#x27;kwargsrepr&#x27;</span>: <span class="string">&#x27;&#123;&#125;&#x27;</span>, <span class="string">&#x27;origin&#x27;</span>: <span class="string">&#x27;gen4669@local&#x27;</span>, <span class="string">&#x27;reply_to&#x27;</span>: <span class="string">&#x27;a2563c50-9249-3718-85a8-9ad44174831c&#x27;</span>, <span class="string">&#x27;correlation_id&#x27;</span>: <span class="string">&#x27;a9db6911-e15a-4b9e-b321-958f5298652a&#x27;</span>, <span class="string">&#x27;delivery_info&#x27;</span>: &#123;<span class="string">&#x27;exchange&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;routing_key&#x27;</span>: <span class="string">&#x27;celery&#x27;</span>, <span class="string">&#x27;priority&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;redelivered&#x27;</span>: <span class="literal">None</span>&#125;&#125;, <span class="string">b&#x27;[[10, 20], &#123;&#125;, &#123;&quot;callbacks&quot;: null, &quot;errbacks&quot;: null, &quot;chain&quot;: null, &quot;chord&quot;: null&#125;]&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) kwargs:&#123;&#125;)</span><br><span class="line">[2019-06-14 02:43:43,281: DEBUG/MainProcess] basic.qos: prefetch_count-&gt;4</span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">43</span>,<span class="number">284</span>: WARNING/ForkPoolWorker-<span class="number">1</span>] <span class="number">30</span></span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">43</span>,<span class="number">286</span>: DEBUG/MainProcess] Task accepted: pmrearend.task.log_it[a9db6911-e15a-4b9e-b321-958f5298652a] pid:<span class="number">4089</span></span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">43</span>,<span class="number">287</span>: DEBUG/ForkPoolWorker-<span class="number">1</span>] pmrearend.task.log_it[a9db6911-e15a-4b9e-b321-958f5298652a]: <span class="keyword">in</span> log_test()</span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">43</span>,<span class="number">504</span>: INFO/ForkPoolWorker-<span class="number">1</span>] Task pmrearend.task.log_it[a9db6911-e15a-4b9e-b321-958f5298652a] succeeded <span class="keyword">in</span> <span class="number">0.22014467700500973</span>s: <span class="number">30</span></span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">44</span>,<span class="number">751</span>: INFO/MainProcess] Received task: pmrearend.task.log_it[aac524bd-cb47-<span class="number">4493</span>-b0dd-9712a98a3f14]  ETA:[<span class="number">2019</span>-06-<span class="number">13</span> <span class="number">18</span>:<span class="number">43</span>:<span class="number">54.619709</span>+<span class="number">00</span>:<span class="number">00</span>] </span><br><span class="line">[2019-06-14 02:43:44,752: DEBUG/MainProcess] basic.qos: prefetch_count-&gt;5</span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">54</span>,<span class="number">621</span>: DEBUG/MainProcess] TaskPool: Apply &lt;function _fast_trace_task at <span class="number">0x7f72a03fef28</span>&gt; (args:(<span class="string">&#x27;pmrearend.task.log_it&#x27;</span>, <span class="string">&#x27;aac524bd-cb47-4493-b0dd-9712a98a3f14&#x27;</span>, &#123;<span class="string">&#x27;lang&#x27;</span>: <span class="string">&#x27;py&#x27;</span>, <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;pmrearend.task.log_it&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;aac524bd-cb47-4493-b0dd-9712a98a3f14&#x27;</span>, <span class="string">&#x27;shadow&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;eta&#x27;</span>: <span class="string">&#x27;2019-06-13T18:43:54.619709+00:00&#x27;</span>, <span class="string">&#x27;expires&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;group&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;retries&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;timelimit&#x27;</span>: [<span class="literal">None</span>, <span class="literal">None</span>], <span class="string">&#x27;root_id&#x27;</span>: <span class="string">&#x27;aac524bd-cb47-4493-b0dd-9712a98a3f14&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;argsrepr&#x27;</span>: <span class="string">&#x27;[10, 20]&#x27;</span>, <span class="string">&#x27;kwargsrepr&#x27;</span>: <span class="string">&#x27;&#123;&#125;&#x27;</span>, <span class="string">&#x27;origin&#x27;</span>: <span class="string">&#x27;gen4706@local&#x27;</span>, <span class="string">&#x27;reply_to&#x27;</span>: <span class="string">&#x27;ee66dc1c-aebd-3111-9ef4-f07a71943fc0&#x27;</span>, <span class="string">&#x27;correlation_id&#x27;</span>: <span class="string">&#x27;aac524bd-cb47-4493-b0dd-9712a98a3f14&#x27;</span>, <span class="string">&#x27;delivery_info&#x27;</span>: &#123;<span class="string">&#x27;exchange&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;routing_key&#x27;</span>: <span class="string">&#x27;celery&#x27;</span>, <span class="string">&#x27;priority&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;redelivered&#x27;</span>: <span class="literal">None</span>&#125;&#125;, <span class="string">b&#x27;[[10, 20], &#123;&#125;, &#123;&quot;callbacks&quot;: null, &quot;errbacks&quot;: null, &quot;chain&quot;: null, &quot;chord&quot;: null&#125;]&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>) kwargs:&#123;&#125;)</span><br><span class="line">[2019-06-14 02:43:54,631: DEBUG/MainProcess] basic.qos: prefetch_count-&gt;4</span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">54</span>,<span class="number">637</span>: WARNING/ForkPoolWorker-<span class="number">1</span>] <span class="number">30</span></span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">54</span>,<span class="number">639</span>: DEBUG/ForkPoolWorker-<span class="number">1</span>] pmrearend.task.log_it[aac524bd-cb47-<span class="number">4493</span>-b0dd-9712a98a3f14]: <span class="keyword">in</span> log_test()</span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">54</span>,<span class="number">645</span>: DEBUG/MainProcess] Task accepted: pmrearend.task.log_it[aac524bd-cb47-<span class="number">4493</span>-b0dd-9712a98a3f14] pid:<span class="number">4089</span></span><br><span class="line">[<span class="number">2019</span>-06-<span class="number">14</span> 02:<span class="number">43</span>:<span class="number">54</span>,<span class="number">650</span>: INFO/ForkPoolWorker-<span class="number">1</span>] Task pmrearend.task.log_it[aac524bd-cb47-<span class="number">4493</span>-b0dd-9712a98a3f14] succeeded <span class="keyword">in</span> <span class="number">0.012691148993326351</span>s: <span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">celery.platforms.LockFailed: [Errno 13] Permission denied: <span class="string">&#x27;/home/xxx/celerybeat.pid&#x27;</span></span><br><span class="line">```    </span><br><span class="line">pid 文件没有权限；这种情况有两种解决办法：</span><br><span class="line"></span><br><span class="line">- 修改 pid 文件存储路径，放到当前执行用户有权限的位置</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">    celery beat -A celeryapp --loglevel=INFO --pidfile=<span class="string">&quot;/tmp/celerybeat.pid&quot;</span>        <span class="comment"># 修改路径</span></span><br></pre></td></tr></table></figure><ul><li>对 pid 文件所在目录加权限，然后执行：<br><code>bashchown -R YOUR_USER_NAME:YOUR_USER_NAME  CURRENT_PATHcelery -A celery_worker:celery beat --loglevel=INFO</code>plain<br><a href="https://github.com/celery/celery/issues/3828">参见这里</a></li></ul><h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><p><strong>不要</strong>将 task 写进类中，因为可能导致执行出错等各种问题，如果真的要这么做，可以参考这里：<br>参见 <a href="https://stackoverflow.com/questions/9250317/using-class-methods-as-celery-tasks">using class methods as celery tasks</a></p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>因为个人时间关系，这个暂时没有学完。关于<code>Celery</code>的使用需要进一步实践学习。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="http://docs.celeryproject.org/en/latest/">Celery 4.3.0 documentation »</a><br><a href="https://www.jianshu.com/p/807efde55d81">在 Flask 中使用 Celery 的最佳实践</a><br><a href="https://blog.csdn.net/libing_thinking/article/details/78547816">Celery 中文文档</a><br><a href="https://blog.csdn.net/libing_thinking/article/details/78563222">Celery-4.1 用户指南: Calling Tasks</a></p><h2 id="相关代码库"><a href="#相关代码库" class="headerlink" title="相关代码库"></a>相关代码库</h2><p><a href="https://github.com/nebularazer/flask-celery-example">1</a><br><a href="https://github.com/chiqj/flask-with-celery-example">2</a> </p>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> TODO </tag>
            
            <tag> HOWTO </tag>
            
            <tag> Celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的开源博客 idealyard 心路历程及其他</title>
      <link href="blog/2019-06-17/blog-idealyard-update-history-v1/"/>
      <url>blog/2019-06-17/blog-idealyard-update-history-v1/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天（2019-09-12）基本完成了博客系统—— <a href="https://github.com/imoyao/idealyard">IdealYard</a> 的雏形，当然，这距离臻于完美还有很长的路要走。但正所谓不怕走不到头，就怕一直不敢出发。虽然是个不起眼的项目，但是从无到有也消耗了不少精力，所以有必要做个简单记录。</p><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>一切缘起，都要从丘处机路过牛家村的那个下午说起……<br>早就想动手搭建一个属于自己的博客项目，但是作为一名出色的国家一级退堂鼓表演家，总是找各种理由，一直未能计划成型落实。最后，终于在 G 小姐的鼓舞下开始着手编码了。<br><img src= "/img/loading.svg" data-lazy-src="/images/wx_img_20190910153859.jpg" alt="不试试，怎么知道自己做不到呢？"></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>因为主要开发语言是 Python，而目前 Python 社区已经发出公告将在 2020 年初停止 Python2 的维护。因此，选择使用 Python3 作为基本版本支持。在 <a href="/blog/2019-06-05/Flask-vs-webpy/">框架选择</a> 问题上，虽然之前主要使用 Web.py 开发，但鉴于 Web.py 目前的维护现状和社区活跃度，所以选择更受开发者青睐的 Flask 作为后端 web 开发框架；此外，使用到 Celery 做一些耗时请求异步处理，如注册验证邮件发送和博客数据库备份（由于时间关系暂时未做）。而前端则使用目前热门的框架 Vue 和 Element-UI 来构建。</p><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><p>虽然 Python2 与 Python3 之间有语法区别，但是基本用法方面也没有到“学习一种新语言”的地步，所以还算顺利。而 Flask 作为“一次一滴”的轻型框架，在刚开始的时候学习每一个子模块的使用感觉有点繁琐，用过几个之后感觉也挺顺利并逐渐喜欢上了这种理念。</p><p>前端方面呢，由于之前一直使用 <code>jQuery</code> 操作 DOM，所以一开始并不习惯这种 <code>MVVM</code> 设计模式，尤其是对生命周期的理解不够到位。话说回来，目前来说也还是有很多地方理解不够透彻，但是基本能够实现功能并简单优化。当然，道路是崎岖的，比如在使用 <code>axios</code> 发送请求连接前后端的时候，就出现了一些问题，尤其是在认证环节耗费了不少时间。其实是一个很细微的点，但是因为周围的同事都没有这方面的开发经验，所以一个人琢磨还是花费了不少的时间。</p><p>回首看来，没有打败你的最终都会让你更加强大，不过在第一次面对这些问题的时候还真是有点找不到北。</p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><iframe class="bilibili" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV11v411v76q" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>如果上方无法打开，请访问下方链接。</p><iframe class="bilibili" src="//player.bilibili.com/player.html?aid=244176193&bvid=BV11v411v76q&cid=221300555&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><ol><li>技术问题请尽量使用<a href="https://github.com/imoyao/idealyard/issues">Issues · imoyao/idealyard</a>提问回馈社区，参阅：<a href="https://github.com/imoyao/idealyard/issues/15">Issue #15 · imoyao/idealyard</a></li><li>在网友的提议下建立了 QQ 群，群号：613922612。但是请注意：该项目为单纯开源，本人并不靠此盈利（有自己的砖要搬），在可预见的未来也<strong>没有可能</strong>投入到为大家答疑解惑中去。所以该群的目的更多是建立一个小白之间互相交流的途径。如果可能，请在公开场合讨论你的问题而不是简单地抛出截图等待答案。</li></ol><p><img src= "/img/loading.svg" data-lazy-src="https://cdn.jsdelivr.net/gh/imoyao/idealyard@master/document/src/idealyard-qq-group.png" alt="QQ 群扫码关注"></p><a target="_blank" href="https://qm.qq.com/cgi-bin/qm/qr?k=Em75uvDaupjSZzL-Y_C9FqzzFUUPiBAA&jump_from=webapi"><img border="0" src= "/img/loading.svg" data-lazy-src="//pub.idqqimg.com/wpa/images/group.png" alt="脚踏实地，仰望星空" title="Flask 交流群"></a><ol start="3"><li>友善、友善、友善。网络一线牵，珍惜这段缘。请务必和善、诚恳地对待其他同学。</li></ol><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>目前基本完成了一个博客的完整功能，但是其实还有很多的小 Bug 需要解决。而且在开发的过程中又产生了一些新想法，还需要自己抽时间落地。具体请阅读 <a href="/blog/2019-08-29/blog-idealyard-TODO/">我的博客 idealyard 待办事项记录</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本博客在编写过程中主要参考链接和书目有：</p><ul><li><a href="https://element.eleme.cn/#/zh-CN/component">Element 官方文档</a></li><li><a href="https://cn.vuejs.org/v2/guide/index.html">Vue 官方文档</a></li><li><a href="https://book.douban.com/subject/30310340/">《Flask Web 开发实战》</a></li></ul><blockquote><p>天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。人之为学有难易乎？学之，则难者亦易矣；不学，则易者亦难矣。<br>吾资之昏，不逮人也，吾材之庸，不逮人也；旦旦而学之，久而不怠焉，迄乎成，而亦不知其昏与庸也。吾资之聪，倍人也，吾材之敏，倍人也；屏弃而不用，其与昏与庸无以异也。圣人之道，卒于鲁也传之。然则昏庸聪敏之用，岂有常哉？<br>蜀之鄙有二僧：其一贫，其一富。贫者语于富者曰：“吾欲之南海，何如？”富者曰：“子何恃而往？”曰：“吾一瓶一钵足矣。”富者曰：“吾数年来欲买舟而下，犹未能也。子何恃而往！”越明年，贫者自南海还，以告富者，富者有惭色。<br>西蜀之去南海，不知几千里也，僧富者不能至而贫者至焉。人之立志，顾不如蜀鄙之僧哉？是故聪与敏，可恃而不可恃也；自恃其聪与敏而不学者，自败者也。昏与庸，可限而不可限也；不自限其昏与庸，而力学不倦者，自力者也。</p><footer><strong>彭端淑</strong><cite>为学一首示子侄</cite></footer></blockquote>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
          <category> IdealYard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> 博客 </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 之 Web 开发框架对比——Flask vs Web.py</title>
      <link href="blog/2019-06-05/Flask-vs-webpy/"/>
      <url>blog/2019-06-05/Flask-vs-webpy/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><code>Python</code> 常用的<code>web</code>开发框架有很多如<code>Django</code>、<code>Flask</code>、<code>Tornado</code>、<code>Web.py</code>等，我们之前项目中使用的是 <code>Web.py</code>，但是新项目中选择哪个？或许是个值得思考的问题。本文主要对<code>Web.py</code>和<code>Flask</code>进行一个简单的对比。</p><a id="more"></a><h2 id="为什么要从Web-py迁移到Flask"><a href="#为什么要从Web-py迁移到Flask" class="headerlink" title="为什么要从Web.py迁移到Flask"></a>为什么要从<code>Web.py</code>迁移到<code>Flask</code></h2><p>大势所趋。根据最新的<a href="https://www.jetbrains.com/research/python-developers-survey-2018/">Python 开发者调研-2018</a>结果显示，<code>Flask</code>和<code>Django</code>已经成为最流行的<code>web</code>开发框架。对企业的良性发展和开发者个人成长而言，使用热门技术都是值得鼓励且必要的。而且，众所周知，官方计划在<code>2020</code>年停止<code>Python2</code>支持，而相比<code>Flask</code>而言，<code>Web.py</code>的版本更新计划有点跟不上节奏的感觉。</p><p><img src= "/img/loading.svg" data-lazy-src="/images/Web-frameworks-python-developers-survey-2018.jpg" alt="Web-frameworks-python-developers-survey-2018"></p><h2 id="TL-DR，Flask-对比-Web-py-的不同点"><a href="#TL-DR，Flask-对比-Web-py-的不同点" class="headerlink" title="TL;DR，Flask 对比 Web.py 的不同点"></a>TL;DR，<code>Flask</code> 对比 <code>Web.py</code> 的不同点</h2><p><code>Flask</code>拥有活跃的社区文化和丰富而强大的第三方扩展，而<code>Web.py</code>在原作者（Aaron Swartz）自杀之后自身维护已举步维艰，第三方扩展的发展更是不言而喻。</p><ul><li><strong>维护积极性</strong>  - 最新版本分别为<code>Flask-1.0.2</code>和 <code>webpy-0.39</code>。</li></ul><div class="justified-gallery"><p><img src= "/img/loading.svg" data-lazy-src="/images/flask-contributors.jpg" alt="flask-contributors"><br><img src= "/img/loading.svg" data-lazy-src="/images/webpy-contributors.jpg" alt="webpy-contributors"></p>          </div><ul><li><strong>官方文档</strong> - <code>Flask</code>具有良好的官方文档，并且有国内使用者翻译的中文文档；<code>Web.py</code>只有勉强够用、捉襟见肘的入门级官方文档，剩下的需要开发人员自行摸索。</li><li><strong>社区活跃度</strong> - <code>Flask</code>拥有活跃的社区文化和数量庞大的拥趸者，<code>Web.py</code>国内只有不活跃的专门的豆瓣小组或者在一些热门<code>Python</code>社区偶有提及。</li><li>第三方扩展  <ul><li>表单 - <code>Flask</code> 使用扩展<code>Flask-WTF</code>和<code>WTForms</code>可以实现很好的表单验证和 <code>csrf</code> 安全保护；（参阅<a href="https://www.jianshu.com/p/7e16877757f8">Flask-WTF 与 WTForms 的用法详解</a>）；而<code>Web.py</code>自带<a href="https://webpy.org/cookbook/forms">Form 库</a>，可以实现表单及简单校验。</li><li>数据库 -  <code>Flask</code> 使用扩展<code>Flask-SQLAlchemy</code>实现对数据库的<code>ORM</code>操作，可以很好地管理和实现数据库的迁移(借助<code>Flask-Migrate</code>)工作；<code>Web.py</code>我们使用自己封装的<code>database.py</code>。</li><li>身份验证和权限 - <code>Flask</code>提供安全<code>cookie</code>作为您自己实现的工具，第三方扩展如<code>Flask-Login</code>(用户会话管理)，<code>Flask-HTTPAuth</code><sup>①</sup>（简化了使用<code>Flask</code>路由的<code>HTTP</code>身份验证的使用），<code>Flask-Security</code>（提供一站式管理）， <code>Flask-Social</code>（用于添加“社交”或<code>OAuth</code>登录和连接管理）等，这些扩展良莠不齐，使用时需要对其有个初步了解并进行遴选；<code>Web.py</code>还是要自己造轮子。</li><li><code>RESTful</code> - 使用<code>Flask-RESTful</code> 可以创建<code>REST</code>的<code>API</code>。</li><li>强大的页面渲染 -<code>Flask</code>使用<code>jinja2</code>作为模板引擎；<code>Web.py</code>使用 <a href="https://webpy.org/templetor"><code>Templetor</code>类</a> ，类似<code>python</code> 语法的写法使其写起来信手拈来，无痛衔接。当然你也可以使用<code>Mako</code>模板引擎，两者平分秋色，甚至从语法上来说 web.py 略胜一筹。性能对比见这里👉 <a href="http://www.pythontip.com/blog/post/2239/">几个模板系统的性能对比</a></li></ul></li><li>伸缩性 - <code>Flask</code>既可以像<code>Web.py</code>那样做微框架开发一个很小的<code>web</code>应用，也可以借助上方的各种扩展做到<code>Django</code>级别的应用。</li></ul><h2 id="Flask-框架"><a href="#Flask-框架" class="headerlink" title="Flask 框架"></a>Flask 框架</h2><blockquote><p>Flask is a microframework for Python based on Werkzeug, Jinja 2 and good intentions.<br>Flask 是一个基于 <code>Jinja2</code> 模板引擎和 <code>Werkzeug WSGI</code> 套件的一个微型的<code>Web</code>开发框架。体现了<code>logo</code>中的口号<code>web development, one drop at a time.</code>(<code>web</code>开发，一次一滴。)</p></blockquote><h3 id="什么是-“微”"><a href="#什么是-“微”" class="headerlink" title="什么是 “微”"></a>什么是 “微”</h3><blockquote><p>“微” (“Micro”) 并不是意味着把整个 <code>Web</code> 应用放入到一个 <code>Python</code> 文件，尽管确实可以这么做。当然“微” (“Micro”) 也不是意味 <code>Flask</code> 的功能上是不足的。微框架中的 “微” (“Micro”) 是指 <code>Flask</code> 旨在保持代码简洁且易于扩展。<code>Flask</code> 不会替你做出太多决策——比如使用何种数据库。而那些 <code>Flask</code> 所选择的——比如使用何种模板引擎——则很容易替换。除此之外的一切都可由你掌握。如此，<code>Flask</code> 可以与您珠联璧合。<br>默认情况下，<code>Flask</code> 并不包含数据库抽象层，表单验证或者任何其他现有的库( <code>Django</code> )能够处理的。相反，<code>Flask</code> 支持扩展，这些扩展能够添加功能到你的应用，像是 <code>Flask</code> 本身实现的一样。众多的扩展提供了数据库集成，表单验证，上传处理，多种开放的认证技术等功能。<code>Flask</code> 可能是“微”型的，但它可以游刃有余地应付需求繁杂的生产环境的使用。</p></blockquote><p>① 在 <code>Web</code> 应用中，我们经常需要保护我们的 <code>api</code>，以避免非法访问。比如，只允许登录成功的用户发表评论等。<code>Flask-HTTPAuth</code> 扩展可以很好地对 <code>HTTP</code> 的请求进行认证，不依赖于 <code>Cookie</code> 和 <code>Session</code>。而是基于密码和基于令牌 (<code>token</code>)。</p><h2 id="Web-py-框架"><a href="#Web-py-框架" class="headerlink" title="Web.py 框架"></a><code>Web.py</code> 框架</h2><blockquote><p>Web.py is a web framework for Python that is as simple as it is powerful.<br>Web.py 是一个简单且功能强大的用于 Python 语言的 web 框架。</p></blockquote><h3 id="Web-py设计哲学"><a href="#Web-py设计哲学" class="headerlink" title="Web.py设计哲学"></a><code>Web.py</code>设计哲学</h3><p><code>Web.py</code>的口号是<code>Think about the ideal way to write a web app. Write the code to make it happen.</code>（思考编写<code>web</code>应用程序的理想方式，然后去编写代码实现它。）<br>在用<code>Python</code>编写<code>web</code>应用程序的时候，我想象自己想要<code>API</code>的方式。它始于导入<code>web</code>，然后有一个定义<code>URL</code>的地方，处理<code>GET</code>和<code>POST</code>的简单函数和一些处理输入变量的东西。一旦代码对我来说看起来是正确的， 我就会想尽办法使它在不更改应用程序代码的情况下执行——结果就是 <code>Web.py</code>。<br>有人抱怨说我“搞了另一套模板语言”（yet another template language），我写了更多文字关于我的设计理念：<a href="http://groups.google.com/group/webpy/msg/f266701d97e7ceb1">参阅</a></p><p>你不必使用它——<code>Web.py</code>的每个部分都与其他部分完全分离。但你是对的， 它是“另一种模板语言”，而我不会为此道歉。<br><code>Web.py</code> 的目标是构建制作 <code>web</code> 应用程序的理想方法。如果为了实现这个目标需要有微小差异化的来重塑陈旧的东西， 我会捍卫自己对它们进行改造的权利。<code>理想的方式</code>和<code>几乎理想的方式</code>之间的区别， 正如马克·吐温所言：是闪电和萤火虫之间的区别。（The difference between the right word and the almost right word is the difference between lightning and the lightning Bug.）<br>但这些不仅仅是细微的差异。<code>Web.py</code> 允许您构建 <code>http</code> 响应， 而不暴露 <code>Python</code> 对象。<code>Web.py</code> 使数据库更易使用，而不试图使数据库看起来像一个对象。 <code>Web.py</code> 模板系统试图把 <code>Python</code> 纳入 <code>HTML</code>而不是想出另一种方法来编写 <code>HTML</code>。没多少人真正尝试过这么做的可能性。<br>你可以不同意这些方法更好并给出原因，但仅仅批评它们与众不同是浪费时间。是的， 它们天生骄傲。我的话讲完了。<br>文字来源：<a href="http://webpy.org/philosophy">The Web.py Philosophy</a></p><h2 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h2><h3 id="Web-py"><a href="#Web-py" class="headerlink" title="Web.py"></a>Web.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line">urls = (</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;Index&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># def POST(self):</span></span><br><span class="line">    <span class="comment">#     pass    # TODO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    web.config.debug = <span class="literal">False</span></span><br><span class="line">    app = web.application(urls, <span class="built_in">globals</span>())</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><ol><li>导入<code>web</code>模块；</li><li>组装<code>url</code>结构；<ul><li>第一部分为匹配<code>URL</code>的正则表达式，第二部分是接受请求的类名称</li></ul></li><li>定义类<ul><li>定义处理<code>GET</code>请求的方法；</li><li>定义（可选的）处理<code>POST</code>请求的方法；</li></ul></li><li><code>debug</code>模式<br> 当应用在内建的服务器中运行时，它会以<code>debug</code>模式启动程序。在<code>debug</code>模式下，任何代码、模板的修改，都会让服务器重新加载它们，然后还会输出有用的错误消息。<br> 只有在生产环境中<code>debug</code>模式是关闭的，如果你想禁用<code>debug</code>模式，你可以在创建程序/模板前添加置为<code>False</code>。</li><li>创建应用，这个<code>application</code>会在这个文件的全局命名空间中查找<code>urls</code>中定义的对应类。</li><li>启动应用。</li></ol><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打开调试模式的另一种设置方式</span></span><br><span class="line"><span class="string">    app.debug = True</span></span><br><span class="line"><span class="string">    app.run()</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>运行之后，浏览<code>http://IP_ADDR:5000/</code>即可访问。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python app.py</span><br><span class="line"> * Running on http://0.0.0.0:5000/</span><br></pre></td></tr></table></figure><br>代码解释</p><ol><li>导入<code>Flask</code>类；</li><li>实例化，即生成我们的 <code>WSGI</code> 应用，第一个参数是应用模块的名称。 如果你使用的是单一的模块（就如本例），第一个参数应该使用 <code>__name__</code>。我们还可以传递给它模块或包的名称。这样 <code>Flask</code> 才会知道去哪里寻找模板、静态文件等等。</li><li>使用装饰器 <code>route()</code> 告诉 <code>Flask</code> 哪个 <code>URL</code> 才能触发我们的函数。<ul><li>默认情况下，路由只会响应 <code>GET</code> 请求， 但是能够通过给 <code>route()</code> 装饰器提供 <code>methods</code> 参数改变。</li></ul></li><li>定义函数，该函数名也是用来给特定函数生成 <code>URLs</code>，并且返回我们想要显示在用户浏览器上的信息。</li><li>最后我们用函数 <code>run()</code> 启动本地服务器来运行我们的应用。<ul><li><code>host=&#39;0.0.0.0&#39;</code>你可以让你的服务器对外可见。</li><li><code>debug=True</code>开启调式模式，仅适用于开发阶段，在代码修改的时候服务器能够自动加载，发生错误之后可以更好追踪调试； <strong>生产模式时，一定要关闭该选项。</strong></li></ul></li></ol><p><strong>注意</strong><br>可能有人想要使用<code>Flask</code>实现<code>Web.py</code>类似的<code>RESTful</code>的代码设计风格，借助<code>Flask-RESTful</code>可以实现像<code>Web.py</code>一样的<code>RESTful</code>设计。示例如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource, Api</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span>(<span class="params">Resource</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;hello&#x27;</span>: <span class="string">&#x27;world&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">api.add_resource(HelloWorld, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><h2 id="关于-Flask-的蓝本-蓝图（Blueprint）"><a href="#关于-Flask-的蓝本-蓝图（Blueprint）" class="headerlink" title="关于 Flask 的蓝本/蓝图（Blueprint）"></a>关于 Flask 的蓝本/蓝图（Blueprint）</h2><p>在<code>Flask</code>中可以用<code>Blueprint</code> (蓝图) 实现应用的<strong>模块化</strong>，应用层次清晰，蓝图可以极大地<strong>简化大型应用</strong>并为扩展提供集中的注册入口。<br>蓝图通常作用于相同的<code>URL</code>前缀，如<code>/user/:id</code>、<code>/user/profile</code>这样的地址，都以<code>/user</code>开头，它们是一组用户相关的操作，那么就可以放在一个模块中。<br>在大型项目中，一般都是协同开发各共同进行的，使用蓝图可以避免互相干扰，开发人员一看路由就能很快的找到对应的视图，可以更容易地<strong>开发和维护</strong>项目。</p><p>一个典型的使用蓝图组织应用的项目结构：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">app/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin/</span><br><span class="line">        __init__.py</span><br><span class="line">        views.py</span><br><span class="line">        static/</span><br><span class="line">        templates/</span><br><span class="line">    home/</span><br><span class="line">        __init__.py</span><br><span class="line">        views.py</span><br><span class="line">        static/</span><br><span class="line">        templates/</span><br><span class="line">    control_panel/</span><br><span class="line">        __init__.py</span><br><span class="line">        views.py</span><br><span class="line">        static/</span><br><span class="line">        templates/</span><br><span class="line">    models.py</span><br><span class="line">    runserver.py</span><br></pre></td></tr></table></figure><br>参阅：<a href="https://www.zhihu.com/question/31748237">如何理解 Flask 中的蓝本？</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>需求驱动，没有最好的框架，只有适合你的框架。<br>两者都是轻量级<code>web</code>开发框架（相较于<code>Django</code>而言），都具有良好的扩展性并遵循<code>Pythonic</code>设计，非常适合初学者学习与使用。<br><code>Web.py</code>坚持小而美的设计理念。简单直接，学习成本更低，对于新手理解 web 处理流程很有帮助，更适合敏捷开发和定制化，当然也就意味着可能需要自己造更多的轮子。<br>而<code>Flask</code>拥有庞杂的第三方扩展可以参考使用，具备良好的扩展性，遇到问题更好向社区寻求答案。当然，随着开发的深入，可能伴随一系列扩展的了解和学习，会消耗较多时间。但是相比<code>Django</code>这种<code>完美主义者用来赶期限的选择</code>，你不必一开始就学所有的东西（session、ORM、CSRF、Form、Template、Middleware 等），可以自主搭配，渐进开发。<br>所以，对于全新项目，为了后续的可持续迭代和维护，相比<code>Web.py</code>更建议选择<code>Flask</code>。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><h3 id="框架对比"><a href="#框架对比" class="headerlink" title="框架对比"></a>框架对比</h3><ul><li><a href="https://kite.com/blog/python/flask-vs-django-python">Flask vs Django</a></li><li><a href="https://www.douban.com/group/topic/29598761/">Web.py,web2py,django 三者间到底是什么关系？有什么不同呢？- 豆瓣</a></li><li><a href="https://www.zhihu.com/question/20708601">Flask 框架怎么样，比起 Web.py 有哪些不同？- 知乎</a></li><li><a href="https://stackoverflow.com/questions/5695689/web-py-and-flask">Web.py-and-flask- StackOverflow</a></li><li><a href="https://www.quora.com/Which-is-better-Flask-vs-web-py-Why">Which is better: Flask vs Web.py? Why?-Quora</a></li><li><a href="https://www.reddit.com/r/Python/comments/28qr7c/can_anyone_explain_the_differences_between_web2py/">Can anyone explain the differences between web2py, Django, Flask, etc, and when I should use one or the other and what the benefits and drawbacks of each?-Reddit</a></li></ul><h3 id="Flask学习资源"><a href="#Flask学习资源" class="headerlink" title="Flask学习资源"></a><code>Flask</code>学习资源</h3><ul><li><a href="http://flask.pocoo.org/">Welcome | Flask (A Python Microframework)</a></li><li><a href="http://docs.jinkan.org/docs/flask/index.html">Flask 中文文档</a></li><li><a href="https://www.ctolib.com/docs/sfile/head-first-flask/">Flask Web 开发入门</a></li><li><a href="http://www.pythondoc.com/flask-mega-tutorial/index.html">欢迎进入 Flask 大型项目教程</a></li><li><a href="https://book.douban.com/subject/26274202/">Flask Web 开发：基于 Python 的 Web 应用开发实战 -（狗书）</a></li><li><a href="https://book.douban.com/subject/30310340/">Flask Web 开发实战 -（狼书）</a></li></ul><h3 id="Flask扩展"><a href="#Flask扩展" class="headerlink" title="Flask扩展"></a><code>Flask</code>扩展</h3><ul><li><a href="https://github.com/humiaozuzu/awesome-flask">Awesome Flask(Flask 资源和插件的精选列表)</a></li><li><a href="http://www.pythondoc.com/">Flask 文档和主流第三方扩展文档</a></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="https://www.zhihu.com/question/20711220">亚伦·斯沃茨 (Aaron Swartz) 是怎么样一个人？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Web.py </tag>
            
            <tag> Web 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 中存储 IP 地址应该选用何种数据类型？</title>
      <link href="blog/2019-05-11/which-mysql-datatype-use-for-store-an-ip-address/"/>
      <url>blog/2019-05-11/which-mysql-datatype-use-for-store-an-ip-address/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天在项目开发时，遇到需要在数据库中存储 ip 地址，那么应该选用何种数据类型更加高效呢？<br>如果存储的是<code>IPV4</code>地址，可以选择使用<code>INT UNSIGNED</code>，然后借助 <code>MySQL</code> 自带的 <code>INET_ATON()</code> 和  <code>INET_NTOA()</code>来存取数据；<br>如果存储的是<code>IPV6</code>地址，可以选择使用<code>VARBINARY()</code>，然后借助 <code>INET6_ATON()</code>和<code>INET6_NTOA()</code> (<code>MySQL5.6+</code>支持)方法存取数据。</p><a id="more"></a><h2 id="针对IPv4地址"><a href="#针对IPv4地址" class="headerlink" title="针对IPv4地址"></a>针对<code>IPv4</code>地址</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> inet_aton(<span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span> inet_aton(<span class="string">&#x27;127.0.0.1&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">2130706433</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> inet_ntoa(<span class="number">2130706433</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> inet_ntoa(<span class="number">2130706433</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h3><ul><li><p>存数据</p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ip_addresses` (`ip_address`)</span><br><span class="line"><span class="keyword">VALUES</span> (INET_ATON(<span class="string">&#x27;127.0.0.1&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>取数据</p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, INET_NTOA(`ip_address`) <span class="keyword">AS</span> ip</span><br><span class="line"><span class="keyword">FROM</span> `ip_addresses`;</span><br></pre></td></tr></table></figure><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a><code>Python</code>实现</h3></li></ul><p>对于上面的代码，如果我们不想使用内置的<code>MySQL</code>方法，也可以在应用层使用自己封装的方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket, struct</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip2long</span>(<span class="params">ip</span>):</span>  </span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&quot;!L&quot;</span>,socket.inet_aton(ip))[<span class="number">0</span>]  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long2ip</span>(<span class="params">longip</span>):</span>  </span><br><span class="line">    <span class="keyword">return</span> socket.inet_ntoa(struct.pack(<span class="string">&#x27;!L&#x27;</span>, longip))  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    print(<span class="string">&#x27;local ip address to long is %s&#x27;</span>%ip2long(<span class="string">&#x27;127.0.0.1&#x27;</span>))  </span><br><span class="line">    print(<span class="string">&#x27;local ip address to long is %s&#x27;</span>%ip2long(<span class="string">&#x27;255.255.255.255&#x27;</span>))  </span><br><span class="line">    print(<span class="string">&#x27;local ip address long to ip is %s&#x27;</span>%long2ip(<span class="number">2130706433</span>))  </span><br><span class="line">    print(<span class="string">&#x27;local ip address long to ip is %s&#x27;</span>%long2ip(<span class="number">4294967295</span>)) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>我们还可以使用 ipaddress 库对 ip 地址进行 int 和 str 之间的互转。代码如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> ipaddress</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(ipaddress.ip_address(<span class="string">&#x27;127.0.0.1&#x27;</span>))</span><br><span class="line"><span class="number">2130706433</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(ipaddress.ip_address(<span class="number">2130706433</span>))</span><br><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span></span><br></pre></td></tr></table></figure></p><h2 id="针对IPv6地址"><a href="#针对IPv6地址" class="headerlink" title="针对IPv6地址"></a>针对<code>IPv6</code>地址</h2><p>MySQL 提供内置函数<code>inet6_aton()</code>来存储和检索<code>IPv6</code>地址。敲黑板，不要把<code>IPv6</code>地址存储为整数，因为数字格式的<code>IPv6</code>地址需要比<code>UNSIGNED BIGINT</code>更多的字节。所以下面的函数返回<code>VARBINARY(16)</code>数据类型。让我们看一个例子。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> hex(inet6_aton(<span class="string">&#x27;127.0.0.1&#x27;</span>));</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> hex(inet6_aton(<span class="string">&#x27;127.0.0.1&#x27;</span>))    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">7</span>F000001                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> hex(inet6_aton(<span class="string">&#x27;2001:0db8:85a3:0000:0000:8a2e:0370:7334&#x27;</span>));</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> hex(inet6_aton(<span class="string">&#x27;2001:0db8:85a3:0000:0000:8a2e:0370:7334&#x27;</span>))                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20010</span>DB885A3000000008A2E03707334                                          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> inet6_ntoa(unhex(<span class="string">&#x27;20010DB885A3000000008A2E03707334&#x27;</span>));</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> inet6_ntoa(unhex(<span class="string">&#x27;20010DB885A3000000008A2E03707334&#x27;</span>))                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2001</span>:db8:<span class="number">85</span>a3::<span class="number">8</span>a2e:<span class="number">370</span>:<span class="number">7334</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong></p><p>假设你正在编写查找以<code>ip</code>地址为<code>127.0.0.1</code>连接的用户，可能写出如下的查询语句：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> inet_ntoa(ipaddress)<span class="operator">=</span><span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>请注意，此查询不会使用在<code>ipaddress</code>列上创建的索引，因为我们在<code>SQL</code>执行期间修改了索引列，它也会逐行将整数转换为真实的<code>IP</code>地址。所以要想让索引生效应该：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@ip</span> <span class="operator">=</span> inet_aton(<span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> ipaddress <span class="operator">=</span> <span class="variable">@ip</span>;</span><br></pre></td></tr></table></figure><br>或者<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> ipaddress <span class="operator">=</span> inet_aton(<span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.rathishkumar.in/2017/08/how-to-store-ip-address-in-mysql.html">How to store IP (internet protocol) address in MySQL?</a></li><li><a href="https://itsolutionstuff.com/post/which-mysql-datatype-use-for-store-an-ip-address">Which MySQL datatype use for store an IP address?</a></li><li><a href="https://stackoverflow.com/questions/2542011/most-efficient-way-to-store-ip-address-in-mysql">Most efficient way to store IP Address in MySQL</a></li><li><a href="https://dev.mysql.com/doc/refman/5.6/en/miscellaneous-functions.html#function_inet6-aton">MySQL doc-function_inet6-aton</a></li><li><a href="https://www.cnblogs.com/gomysql/p/4595621.html">IP 地址在数据库里面的存储方式</a></li><li><a href="https://www.cnblogs.com/skynet/archive/2011/01/09/1931044.html">论 IP 地址在数据库中应该用何种形式存储？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何配置 PyCharm 使用远程的 Flask 虚拟开发环境？</title>
      <link href="blog/2019-05-06/pycharm-with-remote-flask-venv/"/>
      <url>blog/2019-05-06/pycharm-with-remote-flask-venv/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>学习<code>Flask</code>开发的时候，因为主机是<code>Windows</code>环境，而日常跑服务的是<code>Linux</code>环境，所以需要通过配置<code>pycharm</code>使之使用远端的虚拟环境。</p><a id="more"></a><h2 id="创建虚拟机Flask环境"><a href="#创建虚拟机Flask环境" class="headerlink" title="创建虚拟机Flask环境"></a>创建虚拟机<code>Flask</code>环境</h2><p>略</p><p>此处在网上可以找到很多写好的教程，不需要我再次叠床架屋了。</p><h2 id="配置Pycharm环境"><a href="#配置Pycharm环境" class="headerlink" title="配置Pycharm环境"></a>配置<code>Pycharm</code>环境</h2><p>打开 Pycharm 的 setting 对话框，按照如下配置  </p><p><img src= "/img/loading.svg" data-lazy-src="/images/snipaste_20190506_141224.jpg" alt="setting_start"></p><p>依次输入真实远端信息之后，点击下一步，直到出现下方对话框</p><p><img src= "/img/loading.svg" data-lazy-src="/images/snipaste_20190506_142141.jpg" alt="setting_end"></p><p>依次修改将要使用的解释器和主机与远端需要保持同步的目录；</p><p><img src= "/img/loading.svg" data-lazy-src="/images/snipaste_20190506_143428.jpg" alt="setting_flask"></p><p>如图设置之后运行，<code>Run</code>出现如下结果<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FLASK_APP = app</span><br><span class="line">FLASK_ENV = development</span><br><span class="line">FLASK_DEBUG = 1</span><br><span class="line">In folder D:/MYcode/flk</span><br><span class="line">ssh://root@192.168.116.21:22/home/imoyao/envs/flk/bin/python -u -m flask run --host=0.0.0.0</span><br><span class="line"> * Serving Flask app &quot;app&quot; (lazy loading)</span><br><span class="line"> * Environment: development</span><br><span class="line"> * Debug mode: on</span><br><span class="line"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><br><span class="line"> * Restarting with stat</span><br><span class="line"> * Debugger is active!</span><br><span class="line"> * Debugger PIN: 820-491-228</span><br></pre></td></tr></table></figure><br>之后在本机访问虚拟机<code>ip</code>，比如本例中的<code>192.168.116.21:5000</code>，即可进入<code>app</code>首页。</p><h2 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h2><p>在配置好上述选项之后，运行可能会提示 <code>NoAppException: Could not import &quot;app&quot;.</code>。这个问题暂时不知道是什么原因引起，可能是<code>Pycharm</code>识别路径有误导致，暂时没有找到很好的解决办法。大家可以参考下图尝试配置（递归手动设置目录，可能有用）。</p><p><img src= "/img/loading.svg" data-lazy-src="/images/snipaste_20190507_133810.jpg" alt="can&#39;t_import_app"></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>今天突然出现不能访问的问题，使用<code>netstat nap|grep 5000(flask 运行端口)</code>查看端口状态：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:5000            0.0.0.0:*               LISTEN      8195/python</span><br></pre></td></tr></table></figure><br>说明端口正常开放，怀疑是防火墙的原因<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><br>关闭之后可以正常访问，确认是其问题。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=5000/tcp --permanent</span><br><span class="line">Warning: ALREADY_ENABLED: 5000:tcp</span><br><span class="line">success</span><br></pre></td></tr></table></figure><br>重启防火墙之后可以正常访问：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172 ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line"></span><br><span class="line">[root@172 ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">FirewallD is not running</span><br><span class="line"></span><br><span class="line">[root@172 ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">running</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jetbrains.com/help/pycharm/run-debug-configuration-flask-server.html">配置<code>flask</code>服务进行调试</a></li><li><a href="https://www.jetbrains.com/help/pycharm/configuring-python-interpreter.html">配置<code>Python</code>解释器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> PyCharm </tag>
            
            <tag> HOWTO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 传值还是传引用？| 通过对象引用传递</title>
      <link href="blog/2019-04-13/python-pass-by-object-reference/"/>
      <url>blog/2019-04-13/python-pass-by-object-reference/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>本文译自 <a href="https://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/">Is Python pass-by-reference or pass-by-value?</a></p><blockquote><p>“假设我对 Fat 说，或 Kevin 对 Fat 说，“你没有经历过上帝。你只不过经历了一些与上帝的品质、方面、性质、力量、智慧和善良有关的事情。”这就像是关于德国人讲的一个双重抽象倾向的笑话；德国英国文学权威宣称，“哈姆雷特不是莎士比亚写的；它只是由一个名叫莎士比亚的人写的。”在英语语境中，这句话的区别只是口头的，没有实际意义，尽管德语中这种表达存在差异（这解释了德国思想的一些奇怪特征）。”<br>  <p align="right"> –Valis，p71（Book-of-the-Month-Club Edition）</p></p></blockquote><p>Philip K. Dick 并不以其轻松或易懂的散文而闻名。绝大多数角色都很高。就像，真的，真的，真的很高。然而，在 Valis 的上述引文（1981 年出版）中，他对臭名昭着的<code>Python</code>参数传递范式给出了非常有远见的解释。越是变化，越是全能。（Plus ça change, plus c’est omnomnomnom drugs.）</p><p>在编程语言中参数传递的两种最广为人知且易于理解的方法是按引用传递( pass-by-reference )和按值传递 ( pass-by-value )。不幸的是，<code>Python</code>是“传递对象引用”( pass-by-object-reference )，经常说：</p><p>“对象引用按值传递。”(Object references are passed by value.)</p><p>当我第一次看到这个沾沾自喜和过于精辟的定义时，我想捶人。在从手上取下玻璃碎片并被护送出脱衣舞俱乐部后，我意识到，可以通过以下两个函数的行为方式来理解以上这三种范式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reassign</span>(<span class="params">alist</span>):</span></span><br><span class="line">    alist = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">alist</span>):</span>  <span class="comment"># 该函数命名不规范</span></span><br><span class="line">    alist.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">alist = [<span class="number">0</span>]</span><br><span class="line">reassign(alist)</span><br><span class="line">append(alist)</span><br></pre></td></tr></table></figure><p>让我们来一探究竟。</p><h2 id="变量不是对象"><a href="#变量不是对象" class="headerlink" title="变量不是对象"></a>变量不是对象</h2><p>“哈姆雷特不是莎士比亚写的；它只是由一个名叫莎士比亚的人写的。” Python 和 PKD（ Philip K. Dick）都在一个东西的本质与我们用来指代那个东西的标签之间做出了至关重要的区分。 “这个名叫莎士比亚的男人”是一个具体的人。 而“莎士比亚”只是一个名字。如果我们这样做：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = []</span><br></pre></td></tr></table></figure><br><code>[]</code>是一个空列表。 a 是指向空列表的变量，但其本身并不是空列表。我画图并将变量称为包含对象的“盒子”；但无论如何你构想它，这种差异是关键。<br><img src= "/img/loading.svg" data-lazy-src="https://robertheaton.com/images/Intro.jpg" alt="Pass-by-reference"></p><h2 id="通过引用传递"><a href="#通过引用传递" class="headerlink" title="通过引用传递"></a>通过引用传递</h2><p>在 pass-by-reference 中，box（变量）直接传递给函数，其内容（由变量表示的对象）隐性地随之而来。在函数上下文中，参数本质上是调用者传入的变量的完整别名。它们都是完全相同的盒子，因此也指向内存中完全相同的对象。<br><img src= "/img/loading.svg" data-lazy-src="https://robertheaton.com/images/PBRIntro.jpg" alt=""></p><p>因此，函数对变量或它所代表的对象所做的任何操作都将对调用者可见。例如，该函数可以完全更改变量的内容，并将其指向完全不同的对象：</p><p><img src= "/img/loading.svg" data-lazy-src="https://robertheaton.com/images/PBRReassign.jpg" alt=""></p><p>该函数还可以在不重新分配对象的情况下操作对象，效果相同：<br><img src= "/img/loading.svg" data-lazy-src="https://robertheaton.com/images/PBRAppend.jpg" alt=""></p><p>重申一下，在<code>pass-by-reference</code>中，函数和调用者都使用完全相同的变量和对象。</p><h2 id="通过值传递"><a href="#通过值传递" class="headerlink" title="通过值传递"></a>通过值传递</h2><p>在<code>pass-by-value</code>中，函数接收调用者传递给它的参数对象的副本，并在内存中开辟新的空间保存。</p><p><img src= "/img/loading.svg" data-lazy-src="https://robertheaton.com/images/PBVIntro.jpg" alt=""></p><p>然后，该函数有效地提供其自己的盒子以将值放入，并且函数和调用者引用的变量或对象之间不再存在任何关系。这些对象碰巧具有相同的值，但它们完全是分开的，一个对象不会影响到另一个。如果我们再次尝试重新分配：</p><p><img src= "/img/loading.svg" data-lazy-src="https://robertheaton.com/images/PBVReassign.jpg" alt=""></p><p>在函数之外，没有任何反应。同理：</p><p><img src= "/img/loading.svg" data-lazy-src="https://robertheaton.com/images/PBVAppend.jpg" alt=""></p><p>调用者上下文中的变量和对象的副本是完全隔离的。</p><h2 id="通过对象引用传递"><a href="#通过对象引用传递" class="headerlink" title="通过对象引用传递"></a>通过对象引用传递</h2><p>在<code>Python</code>是不同的。众所周知，在<code>Python</code>中，“对象引用按值传递”（<code>Object references are passed by value</code>）。</p><p>函数接收对（并将访问）内存中与调用者使用的相同对象的引用。但是，它不会收到调用者正在存储此对象的盒子；在<code>pass-by-value</code>中，函数提供自己的筐并为自己创建一个新变量。让我们再次执行<code>append</code>：</p><p><img src= "/img/loading.svg" data-lazy-src="https://robertheaton.com/images/PBORAppend.jpg" alt=""></p><p>函数和调用者都引用内存中的同一个对象，所以当<code>append</code>函数向列表中添加一个额外的项时，我们也会在调用者中看到这个！它们是同一个东西的不同名称；包含相同对象的不同筐。这意味着是通过值传递对象引用的——函数和调用者在内存中使用相同的对象，但是通过不同的变量访问。这意味着同一个对象被存储在多个不同的筐中，而这种隐喻会被打破。<del>假定它是量子或其他东西。</del></p><p>但关键是它们真的是不同的名字和不同的盒子。在<code>pass-by-reference</code>中，它们是相同的盒子。当你试图重新分配一个变量，并将一些不同的东西放入函数的盒子中时，你也将它放入调用者的盒子中，因为它们是同一个盒子。但是，在<code>pass-by-object-reference</code>中：</p><p><img src= "/img/loading.svg" data-lazy-src="https://robertheaton.com/images/PBORReassign.jpg" alt=""></p><p>调用者不在乎你是否重新分配方法的盒子。不同的盒子，相同的内容。</p><p>现在我们看看菲利普·K·迪克试图告诉我们的事情。名字和人是不同的东西。变量和对象是不同的东西。有了这些知识，你或许可以开始推断当你做这样的事情时会发生什么</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listA = [<span class="number">0</span>]</span><br><span class="line">listB = listA</span><br><span class="line">listB.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> listA</span><br></pre></td></tr></table></figure><p>你可能还想了解这些概念与可变和不可变类型之间的有趣交互。但这些是另一回事了。现在，如果你能原谅我，我要去读《仿生人会梦见电子羊吗？》（《Dororoids Dream Of Electric Sheep？》）了。 ——我对元编程有点生疏。</p><h2 id="其他语言有’variables’，而-Python-有’names’"><a href="#其他语言有’variables’，而-Python-有’names’" class="headerlink" title="其他语言有’variables’，而 Python 有’names’"></a>其他语言有’variables’，而 Python 有’names’</h2><h3 id="其他语言"><a href="#其他语言" class="headerlink" title="其他语言"></a>其他语言</h3><p>在许多其他语言中，给变量赋值可以看做是把一个值放入一个盒子中。如：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><br><img src= "/img/loading.svg" data-lazy-src="https://david.goodger.org/projects/pycon/2007/idiomatic/a1box.png" alt=""></p><p>将另一个值赋值给同一个变量可以看成是盒子里面换了个内容，如：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span></span><br></pre></td></tr></table></figure><br><img src= "/img/loading.svg" data-lazy-src="https://david.goodger.org/projects/pycon/2007/idiomatic/a2box.png" alt=""></p><p>盒子“a”里面现在是整数 2。</p><p>将一个变量赋值给另一个变量会复制该值并将其放入新盒子中:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> b = a;</span><br></pre></td></tr></table></figure><br>“b”是第二个盒子，有一个整数 2 的副本。a 盒子有一份单独的副本。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>在 Python 中，“名称”或“标识符”就像附加到对象上的包裹标签（或名称标签）一样。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure><br><img src= "/img/loading.svg" data-lazy-src="https://david.goodger.org/projects/pycon/2007/idiomatic/a1tag.png" alt=""><br>如果我们给“a”重新赋值，我们只需要将标签移动到另一个对象:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br></pre></td></tr></table></figure><br><img src= "/img/loading.svg" data-lazy-src="https://david.goodger.org/projects/pycon/2007/idiomatic/a2tag.png" alt=""></p><p>现在名称“a”被附加到一个整数 2 对象上。</p><p>原始的整数 1 对象不再有标记“a”。它可能会继续存在，但我们不能通过名字 a 找到它。(当一个对象没有更多的引用或标记时，它将从内存中删除。)</p><p>如果我们将一个名称赋给另一个名称，我们只是将另一个名称标签附加到一个现有的对象上:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = a</span><br></pre></td></tr></table></figure><br><img src= "/img/loading.svg" data-lazy-src="https://david.goodger.org/projects/pycon/2007/idiomatic/ab2tag.png" alt=""><br>名称“b”只是绑定到与“a”相同的对象的第二个标签。</p><p>尽管我们甚至在 Python 中也经常使用“变量”（因为这是通用术语），但实际上我们的意思是“名称”或“标识符”。 在 Python 中，“变量”是值的名称标签，而不是带标签的盒子。</p><p>参阅 <a href="https://david.goodger.org/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables">Code Like a Pythonista: Idiomatic Python</a></p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://eev.ee/blog/2012/05/23/python-faq-passing/">Does Python pass by reference or value?</a></li><li><a href="http://foobarnbaz.com/2012/07/08/understanding-python-variables/">foobarnbaz.com - Understanding Python variables and Memory Management</a></li><li><a href="https://zkqiang.cn/posts/1273f6f1/">一道快速考察 Python 基础的面试题 - 张凯强的技术分享</a></li><li><a href="http://www.javadude.com/articles/passbyvalue.htm">Java is Pass-by-Value, Dammit! | JavaDude.com</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何把当前改动追加到某次指定 commit 上（非上次）</title>
      <link href="blog/2019-03-05/how-to-append-the-current-change-to-specified-commit/"/>
      <url>blog/2019-03-05/how-to-append-the-current-change-to-specified-commit/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>注意：本例中使用<code>Gerrit</code>进行演示。</p><ol start="0"><li>暂存目前修改的代码 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git stash list <span class="comment"># 可以验证暂存是否成功</span></span><br></pre></td></tr></table></figure></li><li>查找到需要指定的<code>commit</code>的编号； <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure> <img src= "/img/loading.svg" data-lazy-src="/images/snipaste_20190305_123504.jpg" alt="rebase"> </li><li>找到<code>git rebase</code>编号，即要修改的<code>commit</code>之前那个<code>commit</code>； <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase --interactive a6f372877d26xxx0690aedf6dc6b6e7c</span><br></pre></td></tr></table></figure> <img src= "/img/loading.svg" data-lazy-src="/images/InsertPic_C032-11-05-09-52-53.jpg" alt="rebase">   </li><li>找到要更改的<code>commit</code>, 将行首的<code>pick</code>更改为<code>edit</code>, 保存退出；<br> <img src= "/img/loading.svg" data-lazy-src="/images/InsertPic_36EE-11-05-09-52-53.jpg" alt="pick2edit">    </li><li><p>本地修改需要修改的代码</p></li><li><p>恢复暂存的修改</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash pop </span><br></pre></td></tr></table></figure><p> <strong>注意</strong>：如果此时有冲突，需要自己手动解决冲突</p></li><li>解决冲突后，添加修改文件 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add xxx    <span class="comment"># 文件名称</span></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></li><li>回退到当前状态； <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure> <img src= "/img/loading.svg" data-lazy-src="/images/Catch-11-05-09-52-53.jpg" alt="pick2edit"><br> <strong>注意</strong>：如果<code>rebase</code>版本较多，可能需要多次重复上述步骤，且每<code>rebase</code>一步，可能都要解决与其他组员<code>commit</code>的冲突；</li><li>rebase 到 master 之后，push 当前版本到远程 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin 0d163929c240xxx745b520d07b854c207 ① :refs/changes/8xxx4 ②</span><br></pre></td></tr></table></figure> ①：此处为你自己需要<code>amend</code>的<code>commit</code>版本号；<br> ②：此处为远端你的<code>change</code>的编号，如果远端版本已经<code>closed</code>，<del>则无法进行<code>amend</code>，只能 <code>git reset</code>；</del><br> 如果上游提交已经合并并关闭，则参考此处<a href="https://stackoverflow.com/questions/11972384/git-push-remote-rejected-change-closed">gerrit - Git push remote rejected {change ### closed} - Stack Overflow</a><br> 需要将之前 rebase 的 commit 信息中的 change-Id 删除，让 Gerrit 重新生成 change-Id ，之后可以继续提交。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>git</code>非常智能化，每一次操作应该根据提示进行问题分析、逐步操作则可顺利达到预期效果。</p>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本控制 </tag>
            
            <tag> Gerrit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获取 Ztree 的所有叶子节点？</title>
      <link href="blog/2019-01-30/how-to-get-leaf-nodes-of-Ztree/"/>
      <url>blog/2019-01-30/how-to-get-leaf-nodes-of-Ztree/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>使用<code>Ztree</code>时，<code>treeNode.children</code>只能获取到子节点，该如何拿到节点的叶子节点呢？</p><a id="more"></a><h2 id="创建初始化设置"><a href="#创建初始化设置" class="headerlink" title="创建初始化设置"></a>创建初始化设置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> setting = &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        simpleData: &#123;</span><br><span class="line">            enable: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    callback: &#123;</span><br><span class="line">        onCheck:onCheck,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="创建点击响应事件"><a href="#创建点击响应事件" class="headerlink" title="创建点击响应事件"></a>创建点击响应事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onCheck</span>(<span class="params">event, treeId, treeNode, clickFlag</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> treeObj = $(ELT).fn.zTree.getZTreeObj(<span class="string">&quot;datarecdirs&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        str = getAllChildNodes(treeNode,str);</span><br><span class="line">        <span class="comment">// // 加上被选择节点自身</span></span><br><span class="line">        <span class="comment">// str = str + &#x27;,&#x27; + treeNode.id;</span></span><br><span class="line">        <span class="comment">// 去掉最前面的逗号</span></span><br><span class="line">        <span class="keyword">var</span> ids = str.substring(<span class="number">1</span>, str.length);</span><br><span class="line">        <span class="comment">// 得到所有节点ID 的数组</span></span><br><span class="line">        <span class="keyword">var</span> idsArray = ids.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="comment">// 过滤掉序列中的空元素 [1,2,&#x27;3&#x27;,&quot;&quot;, &#x27;&#x27;] &gt;&gt;&gt; [1,2,&#x27;3&#x27;]   (javascript 1.6 and above)</span></span><br><span class="line">        <span class="keyword">var</span> filterArr = idsArray.filter(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> n&#125;);       </span><br><span class="line">        <span class="comment">// 得到节点总数量</span></span><br><span class="line">        <span class="keyword">var</span> leafNodesLen = filterArr.length;</span><br><span class="line">        <span class="keyword">if</span>(filterArr)&#123;</span><br><span class="line">            <span class="keyword">var</span> nodeChecked = treeNode.checked;</span><br><span class="line">            <span class="keyword">if</span>(nodeChecked)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; leafNodesLen; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> idVal = filterArr[i];</span><br><span class="line">                    <span class="keyword">var</span> node = treeObj.getNodeByParam(<span class="string">&quot;id&quot;</span>, idVal, <span class="literal">null</span>);</span><br><span class="line">                    treeObj.setChkDisabled(node,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; leafNodesLen; j++) &#123;</span><br><span class="line">                    idVal = filterArr[j];</span><br><span class="line">                    <span class="comment">// 按照id获取节点，see:https://www.oschina.net/question/222309_131001</span></span><br><span class="line">                    node = treeObj.getNodeByParam(<span class="string">&quot;id&quot;</span>, idVal, <span class="literal">null</span>);       <span class="comment">// 注意：此处不可使用getNodeByTId()方法</span></span><br><span class="line">                    treeObj.setChkDisabled(node,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">true</span>);  <span class="comment">//取消禁用时，影响到子节点</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> nodes = treeObj.getCheckedNodes();</span><br><span class="line">                <span class="built_in">console</span>.log(nodes);</span><br><span class="line">                <span class="keyword">if</span> (nodes.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> c=<span class="number">0</span>;c&lt;nodes.length;c++)&#123;</span><br><span class="line">                        treeObj.checkNode(nodes[c],<span class="literal">false</span>,<span class="literal">true</span>);     <span class="comment">//注意，此处不可使用cancelSelectedNode()</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 递归，获取所有子节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllChildNodes</span>(<span class="params">treeNode,result</span>)</span>&#123;     <span class="comment">// 获取节点的所有叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (treeNode.isParent) &#123;</span><br><span class="line">        <span class="keyword">var</span> childrenNodes = treeNode.children;</span><br><span class="line">        <span class="keyword">if</span> (childrenNodes) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; childrenNodes.length; i++) &#123;</span><br><span class="line">                result += <span class="string">&#x27;,&#x27;</span> + childrenNodes[i].id;</span><br><span class="line">                result = getAllChildNodes(childrenNodes[i], result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span class="label label-danger">注意</span><blockquote><p>zTree 里严格区分了选中和勾选这两个概念，选中是指节点被选择背景颜色有变化，因此 cancelSelectedNode()只是把你选择的节点，变成不选择状态，也就是节点的背景色发生变化。<br>而勾选是指节点的勾选框被选中，你要将节点的勾选状态由勾选变为不勾选，就不能使用 cancelSelectedNode()方法，只能使用 checknode()方法！</p></blockquote><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul><li><a href="https://blog.csdn.net/qq_15071263/article/details/82797734">zTree 插件 - 获取当前选择节点下的全部子节点</a> </li><li><a href="https://tieba.baidu.com/p/4157358359?red_tag=3393089686">为什么 cancelSelectedNode()取消不了节点的选中状态？</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> zTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次 MySQL 错误 —— mysqld-dead-but-subsys-locked</title>
      <link href="blog/2019-01-25/mysqld-dead-but-subsys-locked/"/>
      <url>blog/2019-01-25/mysqld-dead-but-subsys-locked/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>记一次<code>MySQL</code>服务出错排查过程。</p><a id="more"></a><p>今天登录管理系统的时候输入账户信息没有反应，后台查看系统日志发现报错信息：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span></span></span><br><span class="line">tailf /var/log/ODSP.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> out(部分有用信息)</span></span><br><span class="line">2019-01-25 11:30:07 database [line:263]: Can&#x27;t connect to local MySQL server through socket &#x27;/var/lib/mysql/mysql.sock&#x27; (2)</span><br></pre></td></tr></table></figure></p><h2 id="查看MySQL服务状态"><a href="#查看MySQL服务状态" class="headerlink" title="查看MySQL服务状态"></a>查看<code>MySQL</code>服务状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span></span></span><br><span class="line">/etc/init.d/mysqld status</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> out</span></span><br><span class="line">mysqld dead but subsys locked</span><br></pre></td></tr></table></figure><h2 id="查看MySQL的log信息"><a href="#查看MySQL的log信息" class="headerlink" title="查看MySQL的log信息"></a>查看<code>MySQL</code>的<code>log</code>信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span></span></span><br><span class="line">tailf /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> out（截取部分有用信息）</span></span><br><span class="line">700101 00:28:38 mysqld_safe mysqld from pid file /var/run/mysqld/mysqld.pid ended</span><br><span class="line">700101 00:28:42 mysqld_safe Starting mysqld daemon with databases from /secbox/var/db</span><br><span class="line">700101  0:28:42 [ERROR] This MySQL server doesn&#x27;t support dates later then 2038</span><br><span class="line">700101  0:28:42 [ERROR] Aborting</span><br></pre></td></tr></table></figure><h2 id="查看系统时间"><a href="#查看系统时间" class="headerlink" title="查看系统时间"></a>查看系统时间</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master digitools]# date</span><br><span class="line">Wed Jan  1 00:31:52 CST 2070</span><br></pre></td></tr></table></figure><h2 id="重新设置系统时间"><a href="#重新设置系统时间" class="headerlink" title="重新设置系统时间"></a>重新设置系统时间</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master digitools]# date -s &quot;20190125 11:28:50&quot;</span><br><span class="line">Fri Jan 25 11:28:50 CST 2019</span><br></pre></td></tr></table></figure><h2 id="重新启动MySQL服务"><a href="#重新启动MySQL服务" class="headerlink" title="重新启动MySQL服务"></a>重新启动<code>MySQL</code>服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master digitools]# /etc/init.d/mysqld status</span><br><span class="line">mysqld dead but subsys locked</span><br><span class="line"></span><br><span class="line">[root@master digitools]# /etc/init.d/mysqld stop</span><br><span class="line">Stopping mysqld:                                           [  OK  ]</span><br><span class="line">[root@master digitools]# /etc/init.d/mysqld start</span><br><span class="line">Starting mysqld:                                           [  OK  ]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上面两步命令也可以直接合并为执行 `/etc/init.d/mysqld restart`</span></span><br><span class="line">[root@master digitools]# /etc/init.d/mysqld status</span><br><span class="line">mysqld (pid  19402) is running...</span><br></pre></td></tr></table></figure><h2 id="日志恢复正常"><a href="#日志恢复正常" class="headerlink" title="日志恢复正常"></a>日志恢复正常</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">190125 11:30:10  InnoDB: Initializing buffer pool, size = 8.0M</span><br><span class="line">190125 11:30:10  InnoDB: Completed initialization of buffer pool</span><br><span class="line">190125 11:30:10  InnoDB: Started; log sequence number 0 398010</span><br><span class="line">190125 11:30:10 [Note] Event Scheduler: Loaded 0 events</span><br><span class="line">190125 11:30:10 [Note] /usr/libexec/mysqld: ready for connections.</span><br><span class="line">Version: &#x27;5.1.71&#x27;  socket: &#x27;/var/lib/mysql/mysql.sock&#x27;  port: 3306  Source distribution</span><br></pre></td></tr></table></figure><p>至此，数据库异常问题修复，前台登录系统恢复正常。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><ul><li><a href="https://en.wikipedia.org/wiki/Year_2038_problem">Year 2038 problem</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 小老弟，你怎么肥四？</title>
      <link href="blog/2018-09-21/get-some-trouble-with-pip/"/>
      <url>blog/2018-09-21/get-some-trouble-with-pip/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天用<code>pip</code>的时候突然不能正常使用，在这里简单记录一下。<br><a id="more"></a></p><h2 id="提示pip版本不对"><a href="#提示pip版本不对" class="headerlink" title="提示pip版本不对"></a>提示<code>pip</code>版本不对</h2><h3 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You are using pip version 9.0.3, however version 18.0.1 is available.</span><br><span class="line">You should consider upgrading via the &#39;python -m pip install --upgrade pip&#39; command. </span><br></pre></td></tr></table></figure><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><p>去<a href="https://pypi.org/project/pip/">官网</a>下载最新版的包，直接解压安装即可；</p><h3 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h3><p><a href="https://blog.csdn.net/XavierDarkness/article/details/81234066">Python2.7 自带的 pip9.0 升级到 pip18.0</a></p><h2 id="明确已经安装pip，但是系统提示找不到pip"><a href="#明确已经安装pip，但是系统提示找不到pip" class="headerlink" title="明确已经安装pip，但是系统提示找不到pip"></a>明确已经安装<code>pip</code>，但是系统提示找不到<code>pip</code></h2><h3 id="错误提示-1"><a href="#错误提示-1" class="headerlink" title="错误提示"></a>错误提示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-bash: &#x2F;home&#x2F;imoyao&#x2F;.local&#x2F;bin&#x2F;pip: No such file or directory</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.which pip </span><br><span class="line">/usr/local/bin/pip</span><br><span class="line"></span><br><span class="line">2.pip </span><br><span class="line">-su: /usr/bin/pip: No such file or directory</span><br><span class="line"></span><br><span class="line">3.type pip </span><br><span class="line">pip is hashed (/usr/bin/pip) </span><br><span class="line">So pip is definintely in /usr/local/bin/pip but it is been cached as in /usr/bin/pip, thanks to the Stackoverflow question, the solution is very simple:</span><br><span class="line"></span><br><span class="line">4.hash -r </span><br><span class="line">When the cache is clear, pip is working again.</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="参考来源-1"><a href="#参考来源-1" class="headerlink" title="参考来源"></a>参考来源</h3><p><a href="https://blog.csdn.net/qq_32755575/article/details/80443714">/usr/bin/pip: No such file or directory</a></p><h2 id="安装或升级pip时提示SSLError"><a href="#安装或升级pip时提示SSLError" class="headerlink" title="安装或升级pip时提示SSLError"></a>安装或升级<code>pip</code>时提示<code>SSLError</code></h2><h3 id="错误提示-2"><a href="#错误提示-2" class="headerlink" title="错误提示"></a>错误提示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Retrying (Retry(total&#x3D;4, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;SSLError(SSLError(1, &#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)&#39;),)&#39;: &#x2F;simple&#x2F;pip&#x2F;</span><br><span class="line">Retrying (Retry(total&#x3D;3, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;SSLError(SSLError(1, &#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)&#39;),)&#39;: &#x2F;simple&#x2F;pip&#x2F;</span><br><span class="line">Retrying (Retry(total&#x3D;2, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;SSLError(SSLError(1, &#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)&#39;),)&#39;: &#x2F;simple&#x2F;pip&#x2F;</span><br><span class="line">Retrying (Retry(total&#x3D;1, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;SSLError(SSLError(1, &#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)&#39;),)&#39;: &#x2F;simple&#x2F;pip&#x2F;</span><br><span class="line">Retrying (Retry(total&#x3D;0, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;SSLError(SSLError(1, &#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)&#39;),)&#39;: &#x2F;simple&#x2F;pip&#x2F;</span><br><span class="line">Could not fetch URL https:&#x2F;&#x2F;pypi.python.org&#x2F;simple&#x2F;pip&#x2F;: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host&#x3D;&#39;pypi.python.org&#39;, port&#x3D;443): Max retries exceeded with url: &#x2F;simple&#x2F;pip&#x2F; (Caused by SSLError(SSLError(1, &#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)&#39;),)) - skipping</span><br><span class="line">#其实本人遇到的错误是</span><br><span class="line">(Caused by SSLError(SSLError(1, u&#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:726)&#39;),))</span><br></pre></td></tr></table></figure><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>临时方案</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装时添加参数：</span><br><span class="line">--trusted-host pypi.python.org</span><br><span class="line">此方式表示信任该域名，但是每一次安装包的时候都需要该操作，比较麻烦；</span><br></pre></td></tr></table></figure><ul><li>永久方案</li></ul><p>修改<code>pip.conf</code> 配置文件，该文件在<code>Linux</code>系统中的可能位置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;pip.conf</span><br><span class="line"></span><br><span class="line">~&#x2F;.pip&#x2F;pip.conf</span><br><span class="line"></span><br><span class="line">~&#x2F;.config&#x2F;pip&#x2F;pip.conf </span><br></pre></td></tr></table></figure><br>如果都没有的话，可以手动创建之后添加以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;      # 本机使用阿里源代理</span><br><span class="line">[install]</span><br><span class="line">trusted-host&#x3D;mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line"># global字段还看到其他写法：</span><br><span class="line">[global]</span><br><span class="line">trusted-host &#x3D; pypi.python.org</span><br><span class="line">               pypi.org</span><br><span class="line">               files.pythonhosted.org</span><br></pre></td></tr></table></figure><h3 id="参考来源-2"><a href="#参考来源-2" class="headerlink" title="参考来源"></a>参考来源</h3><p><a href="https://stackoverflow.com/questions/16370583/pip-issue-installing-almost-any-library">pip issue installing almost any library</a><br><a href="https://www.cnblogs.com/yudar/p/4657511.html">Linux 设置 pip 镜像 Pip Warning：–trusted-host 问题解决方案</a></p><h2 id="安装MySQL-python时提示"><a href="#安装MySQL-python时提示" class="headerlink" title="安装MySQL-python时提示"></a>安装<code>MySQL-python</code>时提示</h2><h3 id="错误提示-3"><a href="#错误提示-3" class="headerlink" title="错误提示"></a>错误提示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EnvironmentError: mysql_config not found</span><br></pre></td></tr></table></figure><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>CentOS</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install libffi-devel </span><br><span class="line">pip install mysql-connector-python</span><br></pre></td></tr></table></figure><ul><li>Ubuntu</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install default-libmysqlclient-dev</span><br></pre></td></tr></table></figure><h3 id="参考来源-3"><a href="#参考来源-3" class="headerlink" title="参考来源"></a>参考来源</h3><p><a href="https://stackoverflow.com/questions/5178292/pip-install-mysql-python-fails-with-environmenterror-mysql-config-not-found">pip install mysql-python fails with EnvironmentError: mysql_config not found</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRBD 备忘记录</title>
      <link href="blog/2018-09-11/record-of-drbd/"/>
      <url>blog/2018-09-11/record-of-drbd/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>这是一个关于 <code>DRBD</code> 的使用备忘录。<br><a id="more"></a></p><p><img src= "/img/loading.svg" data-lazy-src="/images/DRBD-Diagram.png" alt="DRBD在Linux内核I/O栈的位置"></p><p>开始阅读之前，请先注意示例中使用的 DRBD 版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm -V</span><br><span class="line"><span class="meta">#</span><span class="bash"> DRBDADM_VERSION=8.4.3</span></span><br></pre></td></tr></table></figure><p>注意：安装的 kernel-devel 的内核源码（内核源码路径/usr/src/kernel/）和当前系统的 kernel 版本(uname -r)不一致的话需要把当前内核更新一下。<br>在<code>2.6.33</code>及以上版本的内核默认中有<code>DRBD</code>,之前在用的<code>DRBD</code>主要<code>8.0</code>、<code>8.2</code>、<code>8.3</code> 三个版本,对应的<code>rpm</code>包是<code>drbd</code>,<code>drbd82</code>和<code>drbd83</code>，因此需要安装对应的内核模块，对应的名字为<code>kmod-drbd</code>,<code>kmod-drbd82</code>,<code>kmod-drbd83</code>。<br>由于<code>drbd</code>是作为内核模块进行工作的，故建议使用与内核对应的版本，对应关系如下表。</p><table><thead><tr><th style="text-align:left">Linux releases</th><th style="text-align:left">DRBD releases</th></tr></thead><tbody><tr><td style="text-align:left">2.6.33</td><td style="text-align:left">8.3.7</td></tr><tr><td style="text-align:left">2.6.34</td><td style="text-align:left">8.3.7</td></tr><tr><td style="text-align:left">2.6.35</td><td style="text-align:left">8.3.8</td></tr><tr><td style="text-align:left">2.6.36</td><td style="text-align:left">8.3.8.1</td></tr><tr><td style="text-align:left">2.6.37</td><td style="text-align:left">8.3.9</td></tr><tr><td style="text-align:left">2.6.38</td><td style="text-align:left">8.3.9</td></tr><tr><td style="text-align:left">2.6.39</td><td style="text-align:left">8.3.10</td></tr><tr><td style="text-align:left">3.0 - 3.4</td><td style="text-align:left">8.3.11</td></tr><tr><td style="text-align:left">3.5 - 3.7</td><td style="text-align:left">8.3.13</td></tr></tbody></table><p><strong>注意:</strong>目前官网上面 8.0 – 8.3.x 已标注为<code>Deprecated</code>即不建议使用状态。</p><h2 id="drbd-状态记录"><a href="#drbd-状态记录" class="headerlink" title="drbd 状态记录"></a>drbd 状态记录</h2><p>本部分内容详见<a href="/blog/2018-08-29/state-of-drbd/">此处</a></p><h2 id="清除单个-DRBD-资源配置：-以-drbd10-为例"><a href="#清除单个-DRBD-资源配置：-以-drbd10-为例" class="headerlink" title="清除单个 DRBD 资源配置：(以 drbd10 为例)"></a>清除单个 <code>DRBD</code> 资源配置：(以 drbd10 为例)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbd-overview       # drbd概览</span><br><span class="line">drbdadm down drbd10         #down drbd</span><br><span class="line">echo yes|drbdadm wipe-md drbd10     #清除metadata</span><br><span class="line">cd /etc/drbd.d/         # 注意，此处根据drbd版本不同也可能在/usr/local/etc/drbd.d/</span><br><span class="line">rm drbd10.res           #删除resource文件</span><br></pre></td></tr></table></figure><h2 id="重启-DRBD-服务"><a href="#重启-DRBD-服务" class="headerlink" title="重启 DRBD 服务"></a>重启 <code>DRBD</code> 服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service drbd stop </span><br><span class="line">service drbd start </span><br></pre></td></tr></table></figure><h2 id="DRBD扩容"><a href="#DRBD扩容" class="headerlink" title="DRBD扩容"></a><code>DRBD</code>扩容</h2><p>当遇到我们的<code>drbd resource</code>设备容量不够的时候，而且我们的底层设备支持在线增大容量的时候（比如 lvm），我们可以先增大底层设备的大小，然后再通过<code>drbdadm resize resource_name</code>来实现对<code>resource</code>的扩容。<br>这里有需要注意的是：<br>只有在单主模式下可以这样做，而且需要先在两节点上都增大底层设备的容量，然后仅在主节点上执行<code>resize</code>命令。</p><p>在执行了<code>resize</code>命令后，将自动触发一次当前主节点到其他所有从节点的 re-synchronization；</p><p>如果我们在<code>drbd</code>非工作状态下对底层设备进行了扩容，然后再启动<code>drbd</code>，将不需要执行<code>resize</code>命令（当然前提是在配置文件中没有对 disk 参数项指定大小），<code>drbd</code>自己会知道已经增大了容量；</p><p>在进行底层设备的增容操作的时候千万不要修改到原设备上面的数据，尤其是<code>drbd</code>的<code>meta</code>信息，否则有可能毁掉所有数据。</p><h3 id="流程简单示例"><a href="#流程简单示例" class="headerlink" title="流程简单示例"></a>流程简单示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先在两端扩展Lun（需要相同大小）</span>     </span><br><span class="line">lvextend -Ll(50G) lvpath</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> drbd从端：（双主模式切换为主从模式）</span></span><br><span class="line">drbdadm secondary drbd[Num]     </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> drbd主端：</span></span><br><span class="line">drbdadm resize drbd[Num]</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="global-common-conf-配置（示例）"><a href="#global-common-conf-配置（示例）" class="headerlink" title="global_common.conf 配置（示例）"></a>global_common.conf 配置（示例）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">global &#123;</span><br><span class="line">    usage-count no;     # 是否向官方发送统计报告（影响性能）</span><br><span class="line">&#125;</span><br><span class="line">common &#123;            # 定义drbd设备共享的属性信息</span><br><span class="line">    handlers &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    startup &#123;       # 启动时候的相关设置</span><br><span class="line">        wfc-timeout 50;</span><br><span class="line">        become-primary-on both;     # 允许双主</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    disk &#123;</span><br><span class="line">        on-io-error detach;     # 配置I/O错误处理策略为分离</span><br><span class="line">        no-disk-flushes ;</span><br><span class="line">        no-disk-barrier;</span><br><span class="line">        c-plan-ahead 0;</span><br><span class="line">        c-fill-target 24M;</span><br><span class="line">        c-min-rate 80M;</span><br><span class="line">        c-max-rate 720M;</span><br><span class="line">    &#125; </span><br><span class="line">    net &#123;               # 网络配置相关</span><br><span class="line">        protocol C;     # 同步异步控制（见下方介绍）</span><br><span class="line">        after-sb-0pri discard-younger-primary;  # 脑裂修复</span><br><span class="line">        after-sb-1pri discard-secondary;</span><br><span class="line">        after-sb-2pri call-pri-lost-after-sb;</span><br><span class="line">        allow-two-primaries yes;        # 允许双主</span><br><span class="line">        max-buffers        36k;</span><br><span class="line">        sndbuf-size         1024k ;</span><br><span class="line">        rcvbuf-size      2048k;</span><br><span class="line">    &#125;</span><br><span class="line">    syncer &#123;    # 同步相关的设置</span><br><span class="line">            rate                   4194304k;    # bytes/second</span><br><span class="line">            al-extents              6433;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Read_More:http://tech.sina.com.cn/smb/2008-12-22/1050926302.shtml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据同步协议"><a href="#数据同步协议" class="headerlink" title="数据同步协议"></a>数据同步协议</h3><p><code>DRBD</code>有三种数据同步模式:同步，异步，半同步</p><ol><li>异步：指的是当数据写到磁盘上，并且复制的数据已经被放到我们的<code>tcp</code>缓冲区并等待发送以后，就认为写入完成；</li><li>半同步：指的是数据已经写到磁盘上，并且这些数据已经发送到对方内存缓冲区，对方的<code>tcp</code>已经收到数据，并宣布写入；</li><li>同步：指的是主节点已写入，从节点磁盘也写入；</li></ol><p><code>DRBD</code>的复制模型是靠<code>protocol</code>关键字来定义的：<code>protocol A</code>表示异步；<code>protocol B</code>表示半同步；<code>protocol C</code>表示同步，默认为<code>protocol C</code>。</p><p>在同步模式下只有主、从节点上两块磁盘同时损害才会导致数据丢失。在半同步模式下只有主节点宕机，同时从节点异常停电才会导致数据丢失。</p><p><strong>注意:</strong></p><ol><li>主从所在的磁盘分区最好大小相等,<code>DRBD</code>磁盘镜像相当于网络<code>RAID1</code>；（本人使用时强制相等，但网上没有关于分区大小是否一定要相同的确切说法）</li><li>网络同步时需要一定的时间，在同步完成之前最好不要重启，否则会重新同步；</li><li><code>DRBD</code>的主节点不会监控从节点的状态，所以有可能会造成数据重传；</li><li>格式化只需要在<code>primary</code>节点上进行,且只能在主节点上挂载；若主节点下线,从节点上线,则从节点可以直接挂载,不需要再次格式化。集群中只有 primary 服务器可以挂载设备，secondary 挂载会报错。只有在进行故障迁移升级为主时才需要挂载。</li><li>如果<code>DRBD</code>状态下关机双控恢复不过来，尝试删除<code>DRBD</code>配置信息，然后停掉<code>DRBD</code>端 ODSP 和<code>mysql</code>重启之后即可；(此条仅针对公司项目)</li></ol><h3 id="单个drbd配置文件（以-drbd10-res-为例）"><a href="#单个drbd配置文件（以-drbd10-res-为例）" class="headerlink" title="单个drbd配置文件（以 drbd10.res 为例）"></a>单个<code>drbd</code>配置文件（以 drbd10.res 为例）</h3><ul><li><p>项目中的配置方案</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resource drbd11 &#123;</span><br><span class="line">    on controller-1 &#123;</span><br><span class="line">        device /dev/drbd11;</span><br><span class="line">        disk /dev/StorPool11/SANLun11;</span><br><span class="line">        address 192.168.2.10:57811;</span><br><span class="line">        meta-disk internal;</span><br><span class="line">    &#125;</span><br><span class="line">    on controller-2 &#123;</span><br><span class="line">        device /dev/drbd11;</span><br><span class="line">        disk /dev/StorPool11/SANLun11;</span><br><span class="line">        address 192.168.2.18:57811;</span><br><span class="line">        meta-disk internal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另外一种配置方案<br>来自<a href="https://documentation.suse.com/zh-cn/sle-ha/15-GA/html/SLE-HA-all/cha-ha-drbd.html#pro-drbd-configure">这里</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resource r0 &#123;   # ①</span><br><span class="line">  device /dev/drbd0; # ②</span><br><span class="line">  disk /dev/sda1;   # ③</span><br><span class="line">  meta-disk internal;   # ④</span><br><span class="line">  on alice &#123;    # ⑤</span><br><span class="line">    address  192.168.1.10:7788;     # ⑥</span><br><span class="line">  &#125;</span><br><span class="line">  on bob &#123; </span><br><span class="line">    address 192.168.1.11:7788; </span><br><span class="line">  &#125;</span><br><span class="line">  syncer &#123;</span><br><span class="line">    rate  7M;   # ⑦</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻译以看懂为目的：   </p></li></ul><ol><li>允许某些系统服务项关联的名称，如：nfs, http, mysql_0, postgres_wal 等；<br>Name that allows some association to the service that needs them. For example, nfs, http, mysql_0, postgres_wal, etc.</li><li><code>DRBD</code>设备名称及编号；<br>The device name for DRBD and its minor number.<br>在上面的例子中，<code>drbd</code>的编号是<code>0</code>。udev 集成脚本提供符号链接<code>/dev/drbd/by-res/nfs/0</code>。或者，也可以省略配置中的设备节点名称，然后使用下面这种形式代替：<br><code>drbd0 minor 0</code>（/dev/可选）或<code>/dev/drbd0</code>；<br>In the example above, the minor number 0 is used for DRBD. The udev integration scripts will give you a symbolic link /dev/drbd/by-res/nfs/0. Alternatively, omit the device node name in the configuration and use the following line instead:<br>drbd0 minor 0 (/dev/ is optional) or /dev/drbd0</li><li>节点之间进行复制的原始设备。注意：在本例中，两个节点上面的设备是相同的。若使用不同设备，请将磁盘参数移动到状态为<code>on</code>节点上。（？）<br>The raw device that is replicated between nodes. Note, in this example the devices are the same on both nodes. If you need different devices, move the disk parameter into the on host.</li><li><code>meta-disk</code>参数通常包含隐式值<code>internal</code>，但是你也可以指定一个显式设备保存元数据。详情参见：<a href="http://www.drbd.org/users-guide-emb/ch-internals.html#s-metadata">这里&gt;&gt;&gt;</a><br>The meta-disk parameter usually contains the value internal, but it is possible to specify an explicit device to hold the meta data. See <a href="http://www.drbd.org/users-guide-emb/ch-internals.html#s-metadata">http://www.drbd.org/users-guide-emb/ch-internals.html#s-metadata</a> for more information.</li><li><code>on</code>节配置指明改配置应用于具体哪个<code>host</code>主机。<br>The on section states which host this configuration statement applies to.</li><li>各节点的<code>IP</code>地址和端口号。每个资源需要一个单独的端口，通常从<code>7788</code>开始。DRBD 资源的两个端口必须相同。<br>The IP address and port number of the respective node. Each resource needs an individual port, usually starting with 7788.</li><li>同步率。将其设置为磁盘读写和网络带宽的三分之一。仅限制重新同步，而不是复制。<br>The synchronization rate. Set it to one third of the lower of the disk- and network bandwidth. It only limits the resynchronization, not the replication.</li></ol><h2 id="主从切换"><a href="#主从切换" class="headerlink" title="主从切换"></a>主从切换</h2><p>主备节点切换有两种方式，分别是停止<code>DRBD</code>服务切换和正常切换。</p><h3 id="正常切换"><a href="#正常切换" class="headerlink" title="正常切换"></a>正常切换</h3><p>主切换成从，需要先卸载文件系统，再执行降级为从的命令</p><h4 id="主端"><a href="#主端" class="headerlink" title="主端"></a>主端</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">umount /data/</span><br><span class="line">drbdadm secondary all</span><br></pre></td></tr></table></figure><h4 id="从端"><a href="#从端" class="headerlink" title="从端"></a>从端</h4><p>从切换成主，要先执行升主的命令，然后挂载文件系统</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm  primary all</span><br><span class="line">mount /dev/drbd0 /data/</span><br></pre></td></tr></table></figure><h3 id="停止-drbd-服务切换"><a href="#停止-drbd-服务切换" class="headerlink" title="停止 drbd 服务切换"></a>停止 drbd 服务切换</h3><p>基本思路：关闭主节点服务，此时挂载的<code>DRBD</code>分区就自动在主节点卸载了，然后在备用节点执行切换命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@drbd2 ~]#drbdadm primary all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时报错：</span></span><br><span class="line">2: State change failed: (-7) Refusing to be Primary while peer is not outdated</span><br><span class="line">Command &#x27;drbdsetup 2 primary&#x27; terminated with exit code 11</span><br><span class="line"><span class="meta">#</span><span class="bash"> 因此，必须在备用节点执行如下命令：</span></span><br><span class="line">[root@drbd2 ~]#drbdsetup /dev/drbd0 primary –o</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">[root@drbd2~]#</span><span class="bash">drbdadm -- --overwrite-data-of-peer primary all</span></span><br></pre></td></tr></table></figure><p>当在备用节点执行切换到主节点命令后，原来的主用节点自动变为备用节点。无需在主用节点再次执行切换到备用节点的命令。</p><h2 id="脑裂修复"><a href="#脑裂修复" class="headerlink" title="脑裂修复"></a>脑裂修复</h2><p>当<code>DRBD</code>出现脑裂后，会导致<code>DRBD</code>两边的磁盘数据不一致，在确定要作为从的节点上切换成<code>secondary</code>，并放弃该资源的数据:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm secondary r0</span><br><span class="line">drbdadm -- --discard-my-data connect r0</span><br></pre></td></tr></table></figure><p>然后作为<code>primary</code>的节点重新连接<code>secondary</code>（如果这个节点当前的连接状态为<code>WFConnection</code>的话，可以省略），使用如下命令连接：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm connect r0</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="双控配置互信（假定在控-1-执行）"><a href="#双控配置互信（假定在控-1-执行）" class="headerlink" title="双控配置互信（假定在控 1 执行）"></a>双控配置互信（假定在控 1 执行）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo y|ssh-keygen -t dsa -f ~/.ssh/id_dsa -N &quot;&quot;</span><br><span class="line">cp ~/.ssh/id_dsa.pub ~/.ssh/authorized_keys</span><br><span class="line">scp -r ~/.ssh controller-2:         #双控对端hostname</span><br></pre></td></tr></table></figure><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><ul><li><p><a href="https://docs.linbit.com/docs/users-guide-8.4/">官方手册</a></p></li><li><p><a href="https://www.suse.com/documentation/sle_ha/book_sleha/data/cha_ha_drbd.html">SUSE 高可用配置</a></p></li><li><p><a href="http://clusterlabs.org/doc/en-US/Pacemaker/1.1/html/Clusters_from_Scratch/ch07.html">使用 DRBD 实现复制存储</a></p></li><li><p><a href="http://www.cnblogs.com/wxl-dede/p/5114696.html">drbd 配置 - Rikewang - 博客园</a></p></li><li><p><a href="http://www.3mu.me/centos%E4%B8%8B%E5%AE%9E%E7%8E%B0heartbeatdrbdmysql%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E7%A1%AC%E4%BB%B6%E6%95%85%E9%9A%9C%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E9%AB%98%E5%8F%AF%E7%94%A8ha/#respond">CentOS 下实现 Heartbeat+DRBD+MySQL 双机热备硬件故障自动切换高可用(HA)方案 | 三木的人生——3mu.me</a></p></li><li><p><a href="https://www.ibm.com/developerworks/library/l-drbd/index.html">High availability with the Distributed Replicated Block Device</a></p></li><li><p><a href="https://yq.aliyun.com/articles/52043">记一次 DRBD Unknown 故障处理过程</a></p></li><li><p><a href="https://www.linuxidc.com/wap.aspx?nid=93422&amp;cid=9&amp;sp=654">DRBD 管理、故障处理部分</a>(<a href="https://www.linuxidc.com/Linux/2013-12/93422.htm">https://www.linuxidc.com/Linux/2013-12/93422.htm</a>)</p></li><li><p><a href="http://blog.csdn.net/t1anyuan/article/details/52143789">DRBD 编译安装中出现的问题及解决小结 - CSDN 博客</a></p></li><li><p><a href="https://www.linuxidc.com/Linux/2012-01/51661.htm">DRBD 配置参数</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRBD </tag>
            
            <tag> 存储 </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRBD 状态指标记录</title>
      <link href="blog/2018-08-29/state-of-drbd/"/>
      <url>blog/2018-08-29/state-of-drbd/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>在管理<code>DRBD</code>的时候，需要关注<code>drbd</code>相关的各种状态指标，本文主要记录相关的指令及显示含义。<br><a id="more"></a></p><h2 id="DRBD状态概览"><a href="#DRBD状态概览" class="headerlink" title="DRBD状态概览"></a><code>DRBD</code>状态概览</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbd-overview</span><br><span class="line">drbd status</span><br><span class="line">cat /proc/drbd      # 9.0废止在drbd9中，更多的是使用drbdadm或drbdsetup来获取节点的状态信息。</span><br></pre></td></tr></table></figure><p>以上命令略有不同，可自行对照</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@Storage drbd]# pwd</span><br><span class="line">/usr/lib/drbd</span><br><span class="line">[root@Storage drbd]# ./drbd status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出示例</span></span><br><span class="line">drbd driver loaded OK; device status:</span><br><span class="line">version: 8.4.3 (api:1/proto:86-101)</span><br><span class="line">GIT-hash: 89a2942***221f964d3ee515 build by root@third, 2017-07-20 10:58:42</span><br><span class="line">m:res          cs            ro                 ds                 p       mounted       fstype</span><br><span class="line">0:drbd0        Connected     Primary/Secondary  UpToDate/UpToDate  C</span><br><span class="line">1:drbd1^^0     StandAlone    Primary/Unknown    UpToDate/DUnknown  r----s</span><br><span class="line">……</span><br><span class="line">6:drbd6        Connected     Primary/Secondary  UpToDate/UpToDate  C       /xxx  ext4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>缩写解释</p><ul><li>res：资源名称</li><li>cs：connect state,资源连接状态</li><li>ro：role，表示节点角色信息<br>第一次启动 drbd 时，两个 drbd 节点默认都处于 Secondary 状态，<br>Primary/Secondary（代表这个是主节点）<br>Secondary/Primary（代表这个是副节点）</li><li>ds：disk state,磁盘状态信息<br>Inconsistent/Inconsisten，即为“不一致/不一致”状态，表示两个节点的磁盘数据处于不一致状态。<br>UpToDate/Inconsistent（正在同步，数据还没有一致）<br>UpToDate/UpToDate （同步完成，数据一致）</li><li>C drbd 的复制协议，即 A、B、C 协议。</li><li>r—–是 IO 标记，反映的是该资源的 IO 状态信息。共有 6 种 IO 状态标记符号。</li></ul><h2 id="连接状态"><a href="#连接状态" class="headerlink" title="连接状态"></a>连接状态</h2><p>节点间通过 TCP 连接进行通信，在建立连接、断开连接、特殊情况下有很多种连接状态。</p><p>DRBD 连接建立完成，表示元数据区、数据区等一切都已准备好，可以进行任何数据同步的操作。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# drbdadm cstate drbd20</span><br><span class="line">Connected</span><br></pre></td></tr></table></figure><br>一个资源可能有以下连接状态中的一种</p><ul><li>Unconfigured：设备在等待配置</li><li><strong>WFConnection</strong>：当前节点正在等待对端节点出现。例如对方节点<code>drbdadm down</code>后，本节点将处于本状态。</li><li><strong>StandAlone</strong>：无连接。出现这种状态可能是因为：未连接过、使用<code>drbdadm disconnect</code>断开连接、节点由于身份验证的原因未成功加入 drbd 集群使得连接被删除、脑裂后断开连接。</li><li>Disconnecting：断开连接的一个临时过渡状态。它很快就会切入下一状态就是<code>StandAlone</code>。</li><li>Unconnected：尝试再次发起<code>TCP</code>连接时的一个临时连接状态(是连接超时后再次发送连接请求产生的状态)，它的下一个状态可能是<code>WFConnection</code>，也可能是<code>WFReportParams</code>。</li><li>Timeout：和对端通信超时时的临时状态。下一个状态就是<code>Unconnection</code>。</li><li>BrokenPipe：和对端连接丢失时的临时状态。下一个状态是<code>Unconnection</code>。</li><li>NetworkFailure：和对端连接丢失时的临时状态。下一个状态是<code>Unconnection</code>。(没错，和上面的一样)</li><li>ProtocolError：和对端连接丢失时的临时状态。下一个状态是<code>Unconnection</code>。(没错，还是和上面的一样)</li><li>TearDown：对端关闭 TCP 连接时的临时状态。下一个状态是<code>Unconnection</code>。</li><li><strong>Connected</strong>：DRBD 连接已经建立完成，数据镜像已经激活成功。这个状态是<code>drbd</code>正常运行时的状态。</li><li>WFReportParams：TCP 连接已经建立完成，该节点正在等待对端的第一个数据包。</li><li>StartingSyncS：全盘数据同步中。只有在初始化时才应该全盘同步。下一个状态是：<code>SyncSource</code>或<code>PauseSyncS</code>。</li><li>StartingSyncT：全盘数据同步中。只有在初始化时才应该全盘同步。下一个状态是：<code>WFSyncUUID</code>。</li><li>WFBitMapS：部分数据正在同步。下一个状态是：<code>SyncSource</code>或<code>PauseSyncS</code>。</li><li>WFBitMapT：部分数据正在同步。下一个状态是：<code>WFSyncUUID</code>。</li><li>WFSyncUUID：同步马上就要开始了。下一个状态：<code>SyncTarget</code>或<code>PauseSyncT</code>。</li><li><strong>SyncSource</strong>：正在同步，且本节点是数据同步的源端。</li><li><strong>SyncTartget</strong>：正在同步，且本节点是数据同步的目标端。</li><li>PauseSyncS：本节点是同步的源端节点，但同步过程当前被暂停。出现这种状态的原因可能是当前同步进程依赖于另一个同步进程完成，或者使用<code>drbdadm pause-sync</code>手动中断了同步操作。</li><li>PauseSyncT：本节点是同步的目标端，但同步过程当前被暂停。出现这种状态的原因可能是当前同步进程依赖于另一个同步进程完成，或者使用<code>drbdadm pause-sync</code>手动中断了同步操作。</li><li>VerifyS：正在进行在线设备验证，且本节点将成为验证的源端。</li><li>VerifyT：正在进行在线设备验证，且本节点将成为验证的目标端。</li></ul><p>在 drbd9 中，<code>WFConnection</code>状态改为<code>connecting</code>状态。删除了<code>WFReportParams</code>状态。添加了以下几个同步相关的状态：</p><ul><li>Off：该卷组还未同步，因为连接未建立。</li><li><strong>Established</strong>：所有对该卷组的写操作已经在线完成同步。这是<code>drbd</code>正常运行时的状态。</li><li>Ahead：数据同步操作被挂起，因为网络套接字中达到了一定的堵塞程度，无法应付更多的负载。该状态需要配置<code>on-congestion</code>选项来启用。</li><li>Behind：对端将数据同步操作挂起，因为网络套接字中达到了一定的堵塞程度，无法应付更多的负载。该状态需要在对端节点上配置<code>on-congestion</code>选项来启用。</li></ul><h2 id="角色状态"><a href="#角色状态" class="headerlink" title="角色状态"></a>角色状态</h2><p>资源的角色状态既可以从/proc/drbd 文件中获取，也可以使用下面的命令来获取。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@drbd1 ~]# drbdadm role data1</span><br><span class="line">Primary/Unknown</span><br></pre></td></tr></table></figure><br>在角色状态信息中，本地节点总是标记在第一位，远程节点标记在结尾。</p><p>可能的节点角色状态有：</p><ul><li>Primary：资源的 primary 角色，该角色状态下的 drbd 设备可以进行挂载、读、写等。在没有启用多主复制模型(dual-primary mode)，只能有一个 primary 节点。</li><li>Secondary：资源的 secondary 角色。该角色状态下的 drbd 设备会接收来自 primary 端的数据更新(除非和对端不是 primary)。且该角色的 drbd 设备不可挂载、不可读、不可写。</li><li>Unknown：资源的角色未知。本地节点的角色状态绝对不可能会是这种状态。只有对端节点断开连接时对端节点才处于 Unknown 状态。</li></ul><h2 id="硬盘状态"><a href="#硬盘状态" class="headerlink" title="硬盘状态"></a>硬盘状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# drbdadm dstate drbd20</span><br><span class="line">UpToDate/UpToDate</span><br></pre></td></tr></table></figure><p>在磁盘状态信息中，本地节点的磁盘状态总是标记在第一位，远程节点标记在结尾。本地和对等节点的硬盘有可能为下列状态之一：</p><ul><li>Diskless 无盘：本地没有块设备分配给<code>DRBD</code>使用，这意味着资源可能从没有和它的底层块设备进行关联绑定(attach)，也可能是手动 detach 解除了关联，还可能是出现了底层 I/O 错误时自动分离（detach）。</li><li>Attaching：读取无数据时候的瞬间状态</li><li>Failed：失败，本地块设备报告<code>I/O</code>错误的下一个状态，其下一个状态为<code>Diskless</code>无盘</li><li>Negotiating：在已经连接的 DRBD 设置进行<code>Attach</code>读取无数据前的瞬间状态</li><li>Inconsistent：数据不一致，在两个节点上（初始的完全同步前）这种状态出现后立即创建一个新的资源。此外，在同步期间（同步目标端）正接收同步数据时，也会进入不一致状态。</li><li>Outdated：数据资源是一致的，但是已经过时。(例如，已经同步后 secondary 下线了，之后又上线了，在还没开始重新同步的时候就是 Outdated 状态)</li><li>DUnknown：当对等节点网络连接不可用时出现这种状态</li><li>Consistent：连接断开时的数据处于一致性状态，当连接建立后，将决定数据是<code>UpToDate</code>还是<code>Outdated</code>状态</li><li>UpToDate：一致的、最新的数据状态，这个状态为正常状态</li></ul><h2 id="IO-状态标记"><a href="#IO-状态标记" class="headerlink" title="IO 状态标记"></a>IO 状态标记</h2><p>IO 状态标记表示的是当前资源的 IO 操作状态。共有 6 种状态：</p><ul><li>IO 挂起：r 或 s 都可能表示 IO 挂起，一般是 r。r=running，s=suspended。</li><li>串行重新同步：资源正在等待进行重新同步，但被 resync-after 选项延迟了同步进度。该状态标记为”a”，通常该状态栏应该处于”-“。</li><li>对端初始化同步挂起：资源正在等待进行重新同步，但对端节点因为某些原因而 IO 挂起。该状态标记为”p”，通常该状态栏应该处于”-“。</li><li>本地初始化同步挂起：资源正在等待进行重新同步，但本节点因为某些原因而 IO 挂起。该状态标记为”u”，通常该状态栏应该处于”-“。</li><li>本地 IO 阻塞：通常该状态栏应该处于”-“。可能有以下几种标记：<ul><li>d：因为 DRBD 内部原因导致的 IO 阻塞。</li><li>b：后端设备正处于 IO 阻塞。</li><li>n：网络套接字阻塞。</li><li>a：网络套接字和后端块设备同时处于阻塞状态。</li></ul></li><li>Activity Log 更新挂起：当 al 更新被挂起时，处于该状态，标记为”s”，通常该状态栏应该处于”-“。(如果不知道什么是 Active Log，请无视本标记)</li></ul><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><p>习惯上，我们使用<code>cat /proc/drbd</code>获取<code>drbd</code>状态信息。主要是一些计数器和计量器的值。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@Storage ~]# cat /proc/drbd </span><br><span class="line">version: 8.4.3 (api:1/proto:86-101)</span><br><span class="line">srcversion: 9D811F04CD6DC2C9A9A608F </span><br><span class="line"></span><br><span class="line"> 3: cs:Connected ro:Secondary/Secondary ds:UpToDate/UpToDate C r-----</span><br><span class="line">    ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:0</span><br><span class="line"></span><br><span class="line">301: cs:Connected ro:Secondary/Secondary ds:UpToDate/UpToDate C r-----</span><br><span class="line">    ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:0</span><br></pre></td></tr></table></figure><br>drbd84 中使用缩写符号来标记性能指标，而 drbd9 中使用全称来表示。例如 drbd84 中的 ns 和 drbd9 中的 send 是同一个意思。</p><ul><li>ns/send (network send)：通过网络连接发送给对端的数据量，单位为 Kb。</li><li>nr/receive (network receive)：通过网络连接接收到对端发送来的数据量，单位为 Kb。</li><li>dw/written (disk write)：该卷(volume)写入本地磁盘的数据量，单位为 Kb。</li><li>dr/read (disk read)：该卷(volume)从本地磁盘读取的数据量，单位为 Kb。</li><li>al/al-writes (activity log)：元数据区中 al 更新的次数。</li><li>bm/bm-writes (bit map)：元数据区中 bitmap 更新的次数。</li><li>lo/lower-pending (local count)：DRBD 发起的打开本地 IO 子系统的请求次数。</li><li>pe/pending (pending)：本地发送给对端但却没有回复的次数。</li><li>ua/unacked (unacknowledged)：接收到对端发送的请求但却没有给予回复的请求数量。</li><li>ap/upper-pending (application pending)：转发给 DRBD 的 IO 块的请求，但 DRBD 还没给予回复的请求数量。</li><li>ep (epochs):epoch 对象的数量。通常为 1。drbd9 中没有该指标。</li><li>wo/write-ordering (write order):当前正在使用的 write order 方法：b(barrier), f(flush), d(drain)或 n(none)。</li><li>oos/out-of-sync (out of sync):当前不同步的数据量，单位为 Kb。</li></ul><p>上面所有”未给予回复”的指标数量都表示动作还未完成，需要回复后才表示操作完成。这些未回复数值不能太大。</p><p>此外，drbd9 中添加了以下几个指标：</p><ul><li>resync-suspended：重新同步操作当前是否被挂起。可能的值为 no/user/peer/dependency。</li><li>blocked：本地 IO 的拥挤情况。<ul><li>no：本地 IO 不拥挤。</li><li>upper：DRBD 层之上的 IO 被阻塞。例如到文件系统上的 IO 阻塞。可能有以下几种原因：<ul><li>管理员使用 drbdadm suspend-io 命令挂起了 I/O 操作。</li><li>短暂的 IO 阻塞，例如 attach/detach 导致的。</li><li>删除了缓冲区。</li><li>bitmap 的 IO 等待。</li></ul></li><li>lower：底层设备处于拥挤状态。</li></ul></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.linbit.com/drbd-user-guide/users-guide-drbd-8-4/#s-check-status">DRBD 8.4 en » LINBIT</a></li><li><a href="http://www.cnblogs.com/f-ck-need-u/p/8684648.html">drbd(三)：drbd 的状态说明 - 骏马金龙 - 博客园</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRBD </tag>
            
            <tag> Linux </tag>
            
            <tag> 高可用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRBD 使用外部元数据</title>
      <link href="blog/2018-08-28/drbd-with-external-disk/"/>
      <url>blog/2018-08-28/drbd-with-external-disk/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>裂脑一旦发生，需要及时排查问题所在，最大限度保护数据完整性。<br><a id="more"></a></p><h2 id="meta-data存放位置优缺点比较"><a href="#meta-data存放位置优缺点比较" class="headerlink" title="meta data存放位置优缺点比较"></a><code>meta data</code>存放位置优缺点比较</h2><h3 id="internal-meta-data"><a href="#internal-meta-data" class="headerlink" title="internal meta-data"></a>internal meta-data</h3><p>meta-data 和数据存放在同一个底层设备之上，它通过在设备末端预留一个区域以存储元数据做到这一点。</p><ul><li>优点：</li></ul><p>一旦 meta-data 创建之后，就和实际数据绑在了一起，在维护上会更简单方便，不用担心 meta-data 会因为某些操作而丢失。另外在硬盘损坏丢失数据的同时，meta-data 也跟着一起丢失，当更换硬盘之后，只需要执行重建 meta-data 的命令即可，丢失的数据会很容易的从其他节点同步过来。</p><ul><li>缺点：</li></ul><p>如果底层设备是单一的磁盘，没有做 raid，也不是 lvm 等，那么可能会对写入吞吐量产生负面影响。因为每一次写 io 都需要更新 meta-data 里面的信息，那么每次写 io 都会有两次，而且肯定会有磁头的较大寻道移动，因为 meta-data 都是记录在设备的最末端的，这样就会造成写 io 的性能降低。</p><h3 id="external-meta-data"><a href="#external-meta-data" class="headerlink" title="external meta data"></a>external meta data</h3><p><code>meta-data</code>存放在独立的，与存放数据的设备分开的设备之上。</p><ul><li>优点：</li></ul><p>与 internal meta-data 的缺点完全相对。对于某些写操作, 使用外部元数据会稍微改进延迟行为。</p><ul><li>缺点：</li></ul><p>由于 meta-data 存放在与数据设备分开的地方，就意味着如果磁盘故障且仅破坏生产数据 (而不是 DRBD 元数据), 则可以通过手动干预, 以使发起从幸存的节点到后续更换的磁盘上的完整数据同步。也就是管理维护会稍微麻烦一点，很小的一点点。</p><p><strong>注意：</strong> 如果我们希望在已经存在数据的设备上面建立 drbd 的资源，并且不希望丢失该设备上面的数据，又没办法增大底层设备的容量，而且上层文件系统不支持收缩，我们就只能将 meta data 创建成 external 方式。</p><h2 id="估算元数据大小"><a href="#估算元数据大小" class="headerlink" title="估算元数据大小"></a>估算元数据大小</h2><p>注意：如果公式渲染出错，可以去<a href="https://zohooo.github.io/jaxedit/">这里</a>预览</p><p>你可以使用以下公式计算 DRBD 元数据的精确空间要求:</p><p><img src= "/img/loading.svg" data-lazy-src="https://docs.linbit.com/ug-src/users-guide-8.4/images/metadata-size-exact.png" alt="精确计算元数据大小"></p><p>$$M_{S}= \lceil\frac{C_{s}}{2^{18}} \rceil \ast 8 \ast N + 72$$</p><p>Cs 是存储设备扇区大小。N 是对端的数量，一般情况下 drbd 实现的是双节点，因此 N=1，可以不用考虑。</p><p>您可以通过发出 blockdev –getsz <device>来检索设备大小。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@Storage ~]# blockdev --getsz /dev/StorPool1/SANLun2</span><br><span class="line">2097152</span><br></pre></td></tr></table></figure><p>结果中的 Ms 的大小也是用扇区表示的,要转换为 MB, 请除以 2048。(对于 512 字节的扇区大小, 这是除 s390 之外的所有 Linux 平台上的默认值)。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">23</span>]: (math.ceil(<span class="number">2097152</span>/<span class="number">2</span>**<span class="number">18</span>)*<span class="number">8</span>+<span class="number">72</span>)/<span class="built_in">float</span>(<span class="number">2048</span>)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="number">0.06640625</span></span><br></pre></td></tr></table></figure><br>在实践中, 你可以使用一个合理的好的近似, 下面给出。请注意, 在此公式中, 单位为兆字节(megabytes), 而非扇区:</p><p><img src= "/img/loading.svg" data-lazy-src="https://docs.linbit.com/ug-src/users-guide-8.4/images/metadata-size-approx.png" alt="预估计算元数据大小"></p><p>$$M_{MB} \lt \frac{C_{MB}}{32768} \ast N + 1$$</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取块设备大小</span></span><br><span class="line">[root@Storage ~]# lsblk /dev/StorPool1/SANLun2</span><br><span class="line">NAME              MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">StorPool1-SANLun2 253:3    0   1G  0 lvm  </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预估元数据设备大小</span></span><br><span class="line">In [<span class="number">30</span>]: <span class="number">1024</span>/<span class="built_in">float</span>(<span class="number">32768</span>)+<span class="number">1</span></span><br><span class="line">Out[<span class="number">30</span>]: <span class="number">1.03125</span></span><br></pre></td></tr></table></figure><p>此处插播一个小的知识点,来源参考<a href="https://blog.csdn.net/starshine/article/details/8226320">这里</a>（解释）和<a href="http://www.maixj.net/ict/kbkib-mbmib-gbgib-15095">这里</a>（区别）。</p><table><thead><tr><th style="text-align:left">名字</th><th style="text-align:left">缩写</th><th style="text-align:left">次方</th><th style="text-align:left">名字</th><th style="text-align:left">缩写</th><th style="text-align:left">次方</th></tr></thead><tbody><tr><td style="text-align:left">kilobyte</td><td style="text-align:left">KB</td><td style="text-align:left">10^3</td><td style="text-align:left">kibibyte</td><td style="text-align:left">KiB</td><td style="text-align:left">2^10</td></tr><tr><td style="text-align:left">megabyte</td><td style="text-align:left">MB</td><td style="text-align:left">10^6</td><td style="text-align:left">mebibyte</td><td style="text-align:left">MiB</td><td style="text-align:left">2^20</td></tr><tr><td style="text-align:left">gigabyte</td><td style="text-align:left">GB</td><td style="text-align:left">10^9</td><td style="text-align:left">gibibyte</td><td style="text-align:left">GiB</td><td style="text-align:left">2^30</td></tr><tr><td style="text-align:left">terabyte</td><td style="text-align:left">TB</td><td style="text-align:left">10^12</td><td style="text-align:left">tebibyte</td><td style="text-align:left">TiB</td><td style="text-align:left">2^40</td></tr><tr><td style="text-align:left">petabyte</td><td style="text-align:left">PB</td><td style="text-align:left">10^15</td><td style="text-align:left">pebibyte</td><td style="text-align:left">PiB</td><td style="text-align:left">2^50</td></tr><tr><td style="text-align:left">exabyte</td><td style="text-align:left">EB</td><td style="text-align:left">10^18</td><td style="text-align:left">exbibyte</td><td style="text-align:left">EiB</td><td style="text-align:left">2^60</td></tr><tr><td style="text-align:left">zettabyte</td><td style="text-align:left">ZB</td><td style="text-align:left">10^21</td><td style="text-align:left">zebibyte</td><td style="text-align:left">ZiB</td><td style="text-align:left">2^70</td></tr><tr><td style="text-align:left">yottabyte</td><td style="text-align:left">YB</td><td style="text-align:left">10^24</td><td style="text-align:left">yobibyte</td><td style="text-align:left">YiB</td><td style="text-align:left">2^80</td></tr></tbody></table><h2 id="重置资源的大小"><a href="#重置资源的大小" class="headerlink" title="重置资源的大小"></a>重置资源的大小</h2><h3 id="在线增加"><a href="#在线增加" class="headerlink" title="在线增加"></a>在线增加</h3><p>需要满足两个条件：</p><ol><li><p>支持设备必须是逻辑卷</p></li><li><p>当前的资源必须处于<code>connected</code>的连接状态。</p></li></ol><p>在两个节点给设备增加大小后，再确认只有一个节点处于<code>primary</code>状态。然后输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm resize &lt;resource&gt;</span><br></pre></td></tr></table></figure><p>此命令会触发新扇区的同步，完成主节点到备用节点间的同步。</p><p>如果你添加的空间是干净没有数据的，你可以使用<code>--assume-clean</code>选项：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm -- --assume-clean resize &lt;resource&gt;</span><br></pre></td></tr></table></figure><p>来跳过额外的空间同步。</p><h3 id="离线增加"><a href="#离线增加" class="headerlink" title="离线增加"></a>离线增加</h3><p>（此为高级功能，请自审之后使用。）</p><ol><li>资源被配置为 external meta data 时</li></ol><p>当 DRBD 在处于非活动情况下，在两个节点的支持设备被扩展时，且 DRBD 资源使用的是 external meta data，那么新的大小会自动被识别，不需要管理员干预。DRBD 设备将在下次两个节点活动并且成功建立网络连接之后，显示增加后的新容量。</p><ol start="2"><li>资源被配置为 internal meta data 时</li></ol><p>当 DRBD 资源被配置为使用 internal meta data 时，在新大小变为可用之前, 则必须将此元数据移动到已扩容设备的末尾。为此, 请完成以下步骤:</p><ul><li>down 掉 DRBD 资源:</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm down &lt;resource&gt;</span><br></pre></td></tr></table></figure><ul><li>在收缩之前将元数据保存在文本文件中</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm dump-md &lt;resource&gt; &gt; /tmp/metadata</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 以上步骤必须在两个节点上分别运行。不能在一个节点上保存了元数据然后在拷贝到另外一个节点上。否则就无法正常工作。</p><ul><li><p>在两个节点上给支持的块设备增加容量</p></li><li><p>分别在两个节点上调整/tmp/metadata 文件中<code>la-size-sect</code>的大小信息。注：这里 la-size-sect 指定的是扇区数量</p></li><li><p>重新初始化元数据区域</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm create-md &lt;resource&gt;</span><br></pre></td></tr></table></figure><ul><li>分别在两个节点上重新导入修正的元数据</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 此处使用bash脚本，需要确认可用性</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> drbdmeta_cmd=$(drbdadm -d dump-md &lt;resource&gt;)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123;drbdmeta_cmd/dump-md/restore-md&#125;</span> /tmp/metadata</span></span><br><span class="line">Valid meta-data in place, overwrite? [need to type &#x27;yes&#x27; to confirm]</span><br><span class="line">yes</span><br><span class="line">Successfully restored meta data</span><br></pre></td></tr></table></figure><ul><li>重新启用 DRBD 资源</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm up &lt;resource&gt;</span><br></pre></td></tr></table></figure><ul><li>在一个节点上，设置 DRBD 为 primary</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm primary &lt;resource&gt;</span><br></pre></td></tr></table></figure><p>至此，已完成 DRBD 设备大小的扩容。</p><h3 id="在线缩小容量"><a href="#在线缩小容量" class="headerlink" title="在线缩小容量"></a>在线缩小容量</h3><p>注：在线缩小容量，仅支持<code>external metadata</code></p><p>在缩小 DRBD 设备时必须首先缩小 DRBD 的上层块设备。例如文件系统。由于 DRBD 无法获知文件系统到底使用了多少空间，所以在缩小文件系统时需要格外小心防止数据丢失！文件系统是否可以被缩小取决于所使用的文件系统。大多数文件系统不支持在线缩减。XFS 也不支持在线缩减。</p><p>因此，在缩小文件系统后，可以使用以下命令在线缩小 DRBD 设备容量。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm resize --size=&lt;new-size&gt;  &lt;resource&gt;</span><br></pre></td></tr></table></figure><h3 id="离线收缩容量"><a href="#离线收缩容量" class="headerlink" title="离线收缩容量"></a>离线收缩容量</h3><p>（此为高级功能，请自审之后使用。）</p><p>如果在 DRBD 处于非活动状态时收缩后备块设备, DRBD 将拒绝在下次尝试<code>attach</code>期间<code>attach</code>到此块设备, 因为它现在太小 (external meta-data), 或者它将无法找到其元数据 (internal meta-data)。要变通解决这些问题, 请使用此过程 (如果不能使用上面的在线收缩):</p><ul><li><p>在 DRBD 还处于配置运行状态时，在一个节点上缩小文件系统</p></li><li><p>down 掉 DRBD 资源</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm down &lt;resource&gt;</span><br></pre></td></tr></table></figure><ul><li>在缩小前保存元数据到一个文件中：</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm dump-md &lt;resource&gt; &gt; /tmp/metadata</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 以上步骤必须在两个节点上分别运行。不能在一个节点上保存了元数据然后在拷贝到另外一个节点上。否则就无法正常工作。</p><ul><li><p>在两个节点上给支持的块设备缩小容量</p></li><li><p>分别在两个节点上调整/tmp/metadata 文件中<code>la-size-sect</code>的大小信息。注：这里 la-size-sect 指定的是扇区数量</p></li><li><p>重新初始化元数据区域</p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm create-md &lt;resource&gt;</span><br></pre></td></tr></table></figure><ul><li>分别在两个节点上重新导入修正的元数据</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 此处使用bash脚本，需要确认可用性</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> drbdmeta_cmd=$(drbdadm -d dump-md &lt;resource&gt;)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123;drbdmeta_cmd/dump-md/restore-md&#125;</span> /tmp/metadata</span></span><br><span class="line">Valid meta-data in place, overwrite? [need to type &#x27;yes&#x27; to confirm]</span><br><span class="line">yes</span><br><span class="line">Successfully restored meta data</span><br></pre></td></tr></table></figure><ul><li>重新启用 DRBD 资源</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm up &lt;resource&gt;</span><br></pre></td></tr></table></figure><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><h3 id="查看元数据"><a href="#查看元数据" class="headerlink" title="查看元数据"></a>查看元数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> down 掉drbd</span></span><br><span class="line">[root@Storage ~]# drbdadm down drbds2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看元数据出错</span></span><br><span class="line">[root@Storage ~]# drbdadm dump-md drbds2</span><br><span class="line">Found meta data is &quot;unclean&quot;, please apply-al first</span><br><span class="line">Command &#x27;drbdmeta 2 v08 /dev/StorPool1/SANLun2 internal dump-md&#x27; terminated with exit code 255</span><br><span class="line"><span class="meta">#</span><span class="bash"> 暂时不明白这句操作的含义，待查</span></span><br><span class="line">[root@Storage ~]# drbdadm apply-al drbds2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看meata-data</span></span><br><span class="line">[root@Storage ~]# drbdadm dump-md drbds2</span><br><span class="line"><span class="meta">#</span><span class="bash"> DRBD meta data dump</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2018-08-29 01:48:20 +0800 [1535478500]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Storage&gt; drbdmeta 2 v08 /dev/StorPool1/SANLun2 internal dump-md</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="bash">version <span class="string">&quot;v08&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> md_size_sect 136</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> md_offset 1073737728</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> al_offset 1073704960</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bm_offset 1073672192</span></span><br><span class="line"></span><br><span class="line">uuid &#123;</span><br><span class="line">    0xDDB03F0DAF07DEDC; 0x0000000000000000; 0xE4689A94FBB0E78B; 0xE4679A94FBB0E78B;</span><br><span class="line">    flags 0x00000000;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> al-extents 1237;</span></span><br><span class="line">la-size-sect 2097016;</span><br><span class="line">bm-byte-per-bit 4096;</span><br><span class="line">device-uuid 0x625F486D2CB120D1;</span><br><span class="line">la-peer-max-bio-size 1048576;</span><br><span class="line">al-stripes 1;</span><br><span class="line">al-stripe-size-4k 8;</span><br><span class="line"><span class="meta">#</span><span class="bash"> bm-bytes 32768;</span></span><br><span class="line">bm &#123;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> at 0kB</span></span><br><span class="line">    4096 times 0x0000000000000000;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> bits-set 0;</span></span><br></pre></td></tr></table></figure><p>从此命令中可以获知不同标记代数的 uuid 值，以及 metadata 的元数据信息，例如 md_size_sect=1951744 表示元数据所在分区占用了 1951744 个扇区。注意，该命令不要在 drbd 设备已启动的情况下执行。</p><p>知道这两个命令可以获取一些信息后，现在我们要做的是计算 metadata 部分的数据大小。这个大小在”修改 drbd 设备空间大小”时有用。</p><p>首先获取元数据所在分区的扇区数。即上面结果中的”md_size_sect”。不过也可以使用块设备工具 blockdev 来获取。</p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul><li><a href="https://docs.linbit.com/docs/users-guide-8.4/#s-metadata">16.1. DRBD meta data</a></li><li><a href="https://www.wenzizone.cn/2009/10/29/drbd%E4%B8%ADmetadata%E7%9A%84%E7%90%86%E8%A7%A3%E5%8E%9F%E5%88%9B.html">原创 | drbd 中 metadata 的理解</a></li><li><a href="https://blog.csdn.net/yuanhangq220/article/details/46634249">drbd 配置简述</a></li><li><a href="http://www.cnblogs.com/f-ck-need-u/p/8678883.html">drbd(二)：配置和使用 - 骏马金龙 - 博客园</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DRBD </tag>
            
            <tag> meta-data </tag>
            
            <tag> 元数据 </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 DRBD 脑裂问题的总结</title>
      <link href="blog/2018-05-27/split-brain-of-drbd/"/>
      <url>blog/2018-05-27/split-brain-of-drbd/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><div class="note info modern"><p>本文在编写时基于<a href="https://www.linbit.com/drbd-user-guide/users-guide-drbd-8-4/">官网 8.4 英文版本</a>。由于英语水平和当时认知所限，翻译中难免有聱牙诘屈甚至误导别人之处。今天翻阅官网发现已经出现了基于 9.0 版本的中文文档，所以大家可以直接去浏览<a href="https://www.linbit.com/drbd-user-guide/drbd-guide-9_0-cn/#about">官方文档</a>。</p></div><h2 id="什么是DRBD脑裂"><a href="#什么是DRBD脑裂" class="headerlink" title="什么是DRBD脑裂"></a>什么是<code>DRBD</code>脑裂</h2><p>脑裂(<code>split brain</code>)是指由于集群节点之间的所有网络链路的临时故障，以及可能由于集群管理软件的干预或人为错误，导致两个节点在断开连接时都切换到主节点（<code>primary</code>）角色的情况。这是一种潜在的有害状态，因为它意味着对数据的修改可能是在任一节点上进行的，而没有复制到对等节点。因此，在这种情况下，很可能已经创建了两个不同的数据集，这些数据集不能简单地合并。</p><h2 id="怎么判定脑裂"><a href="#怎么判定脑裂" class="headerlink" title="怎么判定脑裂"></a>怎么判定脑裂</h2><h3 id="查看日志信息"><a href="#查看日志信息" class="headerlink" title="查看日志信息"></a>查看日志信息</h3><p>如果<code>DRBD</code>出现脑裂，会在 <code>/var/log/message</code> 出现一条日志：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Split-Brain detected but unresolved, dropping connection!</span><br></pre></td></tr></table></figure><p>当发生<code>split brain</code>之后，如果查看连接状态，其中至少会有一个是<code>StandAlone</code>状态，另外一个可能也是<code>StandAlone</code>（如果是同时发现<code>split brain</code>状态），也有可能是 <code>WFConnection</code> 状态。</p><h3 id="脑裂自动通知"><a href="#脑裂自动通知" class="headerlink" title="脑裂自动通知"></a>脑裂自动通知</h3><p>如果进行配置，DRBD 会调用脑裂处理程序，当脑裂发生时就会被探测到。要配置这个程序，需要对资源<code>/etc/drbd.d/global_common.conf</code>添加如下配置：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resource &lt;resource&gt;</span><br><span class="line"></span><br><span class="line">  handlers &#123;</span><br><span class="line"></span><br><span class="line">    split-brain &lt;handler&gt;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>&lt;handler&gt;</code>可能是目前系统中一个可执行的文件。</p><p><code>Drbd</code>自带一个脑裂处理程序脚本<code>/usr/lib/drbd/notify-split-brain.sh</code>。它可以通过电子邮件的方式发送到指定的地址。要配合程序发送信息到 root@localhost（这假设是设置的系统管理员的邮件地址），配置如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resource &lt;resource&gt;</span><br><span class="line"></span><br><span class="line">  handlers &#123;</span><br><span class="line"></span><br><span class="line">    split-brain &quot;/usr/lib/drbd/notify-split-brain.sh root&quot;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当配置已经在资源上进行修改（同步到两个节点上），就不需要添加其他的处理就可以启动处理程序。<code>DRBD</code>会在下一次检测到脑裂时直接调用该处理程序。</p><p>如果要配置真实可用的报警邮箱地址，则除了将上面的通知地址改为真实邮件地址:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">split-brain &quot;/usr/lib/drbd/notify-split-brain.sh foo@bar.com</span><br></pre></td></tr></table></figure><br>还需要修改一下<code>ssmtp</code>配置文件：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ssmtp/ssmtp.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 填写真实收件服务器信息</span></span><br><span class="line">mailhub=mail.masantu.com:25</span><br></pre></td></tr></table></figure><br>更多配置参见 <a href="https://wiki.archlinux.org/index.php/SSMTP">这里 SSMTP - ArchWiki</a></p><h3 id="世代标识符元组（GI）"><a href="#世代标识符元组（GI）" class="headerlink" title="世代标识符元组（GI）"></a>世代标识符元组（GI）</h3><p>参见<a href="https://docs.linbit.com/docs/users-guide-8.4/#s-gi">16.2. Generation Identifiers</a></p><p>DRBD 将其备份的数据的更新变化过程比拟成人类世代繁衍的过程。每个时点同一个双机的 DRBD 的两个节点上的数据都来自于同一份原始数据，我们可认为这个时点上两份数据源于同一祖先。主备节点的 DRBD 都会用一个叫作 GI(Generation ID)的标识符来标识当前的数据是哪个世代的，同样也会记录最近两个数据祖先的 GI 用于追朔当前数据的历史来源。DRBD 可以据此来判断两个节点是否是属于同一个双机,因为同一个双机的两份数据应该是从同一个祖先而来。<br>GI 作为 DRBD 的内部机制主要被用来：</p><ol><li>确定这两个节点是否是事实上的同一个集群的成员（而不是意外连接的两个节点）；</li><li>确定触发全盘同步（<code>full re-synchronization</code>）还是只触发部分同步（<code>partial re-synchronization</code>）。</li><li>确定后台重新同步的方向（如果需要全盘同步）；</li><li>确定脑裂。</li></ol><h4 id="数据迭代"><a href="#数据迭代" class="headerlink" title="数据迭代"></a>数据迭代</h4><p>当出现下列情形里<code>DRBD</code>会生成一个新的<code>GI</code>，用来标识新一代的数据：</p><ol><li>第一次全盘同步时；</li><li>一个<code>Disconnected</code>的资源转换为<code>Primary</code>时；</li><li>一个<code>Primary</code>的资源转换为<code>Disconnected</code>时。</li></ol><p>因此,我们可以总结出：只要一个<code>DRBD</code>资源处于<code>Connected</code>的状态，并且两边磁盘的状态为<code>UpToDate</code>，那么此<code>DRBD</code>资源在两个节点上的<code>GI</code>一定是一样的。此结论反过来也同样成立。请注意，<strong>当前实现使用最低位来编码节点的角色(<code>Primary/Secondary</code>)。 因此，即使它们被认为具有相同的数据生成，最低位在不同节点上也可能不同。</strong></p><p>每个新的数据生成都由一个<code>8</code>字节的通用唯一标识符（<code>UUID</code>）来标识。</p><h4 id="GI元祖"><a href="#GI元祖" class="headerlink" title="GI元祖"></a><code>GI</code>元祖</h4><p><code>DRBD</code>在本地资源元数据中保存有关当前和历史数据生成的四条信息：</p><ul><li><p>当前<code>UUID(C-UUID)</code><br>从本地节点的角度来看，这是当前数据生成的生成标识符。 当资源被连接并完全同步时，当前<code>UUID</code>在节点之间是相同的。</p></li><li><p>位图<code>UUID(B-UUID)</code><br>这是磁盘上同步位图跟踪的生成的<code>UUID</code>更改。 作为磁盘上的同步位图本身，此标识符仅在断开模式下才有用。 如果资源已连接，则此<code>UUID</code>始终为空（零）。</p></li><li><p>两个<code>历史UUID</code></p></li></ul><p>这些是当前之前两个数据世代的标识符。</p><ol><li>上一代数据的<code>UUID(H1-UUID)</code>；</li><li>最近第二代数据的<code>UUID(H2-UUID)</code>，即上一代数据的上一代数据的<code>UUID</code>。</li></ol><p>总的来说，这四个项目被称为代码标识符元组，或简称为<code>GI元组</code>。</p><h4 id="GI如何变化"><a href="#GI如何变化" class="headerlink" title="GI如何变化"></a><code>GI</code>如何变化</h4><ul><li>开始新的数据生成代</li></ul><p>当节点与其对等方失去连接时（网络故障或人工干预都有可能），DRBD 将按照以下方式修改其本地生成标识符：</p><p><img src= "/img/loading.svg" data-lazy-src="/images/gi-changes-newgen.png" alt="图1 GI元祖在生成新的数据代时改变"></p><ol><li>为新的数据代生成新的<code>UUID</code>，变为主节点的<code>C-UUID</code>；</li><li>之前的 UUID 现在指向位图（<code>B-UUID</code>）以跟踪数据变化，因此它成为主节点的新位图<code>UUID</code>；</li><li>备节点 GI 元祖保持不变。</li></ol><ul><li>开始重新同步</li></ul><p>在开始重新同步时，<code>DRBD</code>在本地代标识符上执行如下修改：</p><p><img src= "/img/loading.svg" data-lazy-src="/images/gi-changes-syncstart.png" alt="图2 GI元祖在重新开始同步时改变"></p><ol><li>在同步源端的<code>当前UUID</code>（C-UUID）保持不变；</li><li>同步源端的<code>位图UUID</code>轮转为<code>第一历史UUID</code>（H1-UUID）；</li><li>同步源端生成新的<code>位图UUID</code>（B-UUID）;</li><li>该 UUID（<em>应指同步源端生成的<code>B-UUID</code></em>）变为同步目标端的新的<code>当前UUID</code>（C-UUID）；</li><li>同步目标端的<code>位图UUID</code>（B-UUID）和<code>历史UUID</code>（H1-UUID,H2-UUID）保持不变。</li></ol><ul><li>重新同步结束</li></ul><p>当重新同步结束后，将执行以下更改：</p><p><img src= "/img/loading.svg" data-lazy-src="/images/gi-changes-synccomplete.png" alt="图3 当重新同步结束后，GI元祖发生改变"></p><ol><li>同步源端<code>当前UUID</code>(C-UUID)保持不变；</li><li>同步源端的<code>位图UUID</code>(B-UUID)轮转为<code>第一历史UUID</code>（H1-UUID），同时该 UUID(指<code>H1-UUID</code>)轮转为<code>第二历史UUID</code>(现有的第二历史 uuid 被丢弃)；</li><li>同步源端的<code>位图UUID</code>(B-UUID)清空（置零）；</li><li>同步目标端采用同步源端整个<code>GI元祖</code>。</li></ol><p>当节点之间建立连接之后，两个节点之间会交换当前可用的代标识符,然后根据比对的结果采取相应的操作。以下是可能的几种结果：</p><ul><li>两个节点上的当前<code>UUID(C-UUID)</code>都为空<br>本地节点检测到它的当前<code>UUID</code>和对方的当前<code>UUID</code>都是空的。这通常是发生于尚未启动初始完全同步的新配置资源的正常情况。此时没有同步发生;须手动人为触发启动。</li><li>单一节点上的当前<code>UUID(C-UUID)</code>为空<br>本地节点检测到对方的当前<code>UUID</code>为空，而其本身非空。这是新配置资源的正常情况，此时初始全盘同步刚刚触发，本地节点被选为初始同步源（<code>sync source</code>）。 <code>DRBD</code>将磁盘上的同步位图(<code>sync bitmap</code>)中的所有位全部置位（意味着它认为整个设备不同步），并开始将其作为同步源同步。相反，（即本地当前<code>UUID</code>为空，对等节点非空），除了本地节点成为同步目标（<code>sync target</code>）之外，<code>DRBD</code>执行相同的步骤。</li><li>当前<code>UUID(C-UUID)</code>相等<br>本地节点检测到它的当前<code>UUID</code>和对等节点的当前<code>UUID</code>非空且相等时。这是资源在<code>secondary</code>状态进入断开连接（<code>disconnected</code>）模式时的正常情况，并且在断开连接时并未在任一节点上升为 <code>primary</code> 状态。此时不会触发同步，因为两边的数据一致，没有必要。</li><li>位图<code>UUID（B-UUID）</code>匹配对等节点的当前<code>UUID（`C-UUID`）</code><br>本地节点检测到其位图<code>UUID</code>匹配对等节点的当前<code>UUID</code>，且对等节点的位图<code>UUID</code>为空。这是本地节点处于 <code>primary</code> 状态，次要节点故障后正常且预期的情况。这意味着对端在此期间永远不会变为<code>primary</code>状态，并始终以相同的数据生成为前提运行。 <code>DRBD</code>此时以本地节点作为同步源（<code>sync source</code>）启动正常的后台重新同步（<code>re-sync</code>）。相反，如果本地节点检测到其位图<code>UUID</code>为空，且对等节点的位图与本地节点的当前<code>UUID</code>匹配，那么这是本地节点失败后的正常和预期情况。同样地，<code>DRBD</code>此时启动正常的后台重新同步，只不过本地节点成为同步目标（<code>sync target</code>）。</li><li>当前<code>UUID(C-UUID)</code>匹配对等节点的历史<code>UUID（h-UUID）</code><br>本地节点检测到其当前<code>UUID</code>与对等节点的历史<code>UUID</code>之一(<code>h1/h2</code>)匹配。这意味着尽管两个数据集共享一个共同的祖先且对等节点具有最新的数据，但保存在对等节点的位图中的信息已过时并且不可用。因此，简单的正常同步不够的。 <code>DRBD</code>此时将整个设备标记为未同步（<code>out-of-sync</code>）并启动以本地节点作为同步目标（<code>sync target</code>）的全盘后台重新同步。在相反的情况下（本地节点的某个历史<code>UUID</code>与对等节点的当前<code>UUID</code>相匹配），除了本地节点成为同步源（<code>sync source</code>）之外，<code>DRBD</code>执行相同的步骤。</li><li>位图<code>UUID（B-UUID）</code>匹配，当前 <code>UUID(C-UUID)</code>不匹配<br>本地节点检测到其当前<code>UUID</code>与对等节点的当前<code>UUID</code>不同且位图<code>UUID</code>匹配。这是脑裂（<code>split brain</code>）的一种情况，两份数据有相同的父代。这意味着<code>DRBD</code>可以调用脑裂自动恢复策略进行数据恢复（如果已配置）。否则，<code>DRBD</code>断开连接并等待手动恢复。</li><li>当前<code>UUID（C-UUID）</code>和位图<code>UUID(B-UUID)</code>都不匹配<br>本地节点检测到它的当前<code>UUID</code>与对等节点的当前<code>UUID</code>不同，并且位图<code>UUID</code>不匹配。这是两份数据与无关父代产生的一种脑裂，因此即使配置了自动恢复策略也没有意义。 <code>DRBD</code>处于断开连接并等待手动恢复状态。</li><li>没有<code>UUID</code>匹配<br>最后，如果<code>DRBD</code>未能检测到两个节点之间的<code>GI</code>元组中的单个元素匹配，则会记录关于无关数据（<code>unrelated data</code>）的警告并断开连接。这是<code>DRBD</code>的防范措施，可防止之前无关联的两个集群节点的意外连接导致数据破坏。</li></ul><p>以上逻辑使用代码表示如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">empty_uuid = <span class="string">&#x27;0000000000000000&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slice_seq</span>(<span class="params">seq</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对GI元祖内元素进行切片操作</span></span><br><span class="line"><span class="string">    :param seq: GI元祖</span></span><br><span class="line"><span class="string">    :return:type:list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> empty_uuid</span><br><span class="line">    sliced_seq = [item[:-<span class="number">1</span>] <span class="keyword">if</span> item != empty_uuid <span class="keyword">else</span> item <span class="keyword">for</span> item <span class="keyword">in</span> seq]</span><br><span class="line">    <span class="keyword">return</span> sliced_seq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmp_both</span>(<span class="params">seqa,seqb</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> seqa:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> seqb:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gi_action</span>(<span class="params">drbdname</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    调用&#x27;drbdadm get-gi DRBDNAME&#x27;命令获取drbd的 GI(Generation ID) 信息</span></span><br><span class="line"><span class="string">    :param drbdname:type:str,drbd名称 like:&#x27;drbds1/drbdn301&#x27;</span></span><br><span class="line"><span class="string">    :return:获取正常返回元祖(c_uuid, b_uuid, h1_uuid, h2_uuid)，获取失败返回None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    get_gi_cmd = <span class="string">&quot;drbdadm get-gi %s |awk -F: &#x27;&#123;print $1,$2,$3,$4&#125;&#x27;&quot;</span>%(drbdname)</span><br><span class="line">    retcode,proc = utils.cust_popen(get_gi_cmd)</span><br><span class="line">    message = proc.stderr.read(), proc.stdout.read()</span><br><span class="line">    retstr = message[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> retstr:</span><br><span class="line">        c_uuid,b_uuid,h1_uuid,h2_uuid = <span class="built_in">tuple</span>(retstr.split())</span><br><span class="line">        <span class="keyword">return</span> c_uuid,b_uuid,h1_uuid,h2_uuid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        debug.write_debug(debug.LINE(), <span class="string">&quot;peradrbd&quot;</span>, message)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">  </span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_remote_gi</span>(<span class="params">params</span>):</span></span><br><span class="line">    rtndata = &#123;&#125;</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    drbdname = <span class="string">&#x27;drbdname&#x27;</span> <span class="keyword">in</span> params <span class="keyword">and</span> params[<span class="string">&#x27;drbdname&#x27;</span>] <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> drbdname:</span><br><span class="line">        <span class="keyword">if</span> hasthedrbd(drbdname):</span><br><span class="line">            gi_uuids = get_gi_action(drbdname)</span><br><span class="line">            <span class="keyword">if</span> gi_uuids <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                rtndata[<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">                result[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                result[<span class="string">&#x27;gi_id&#x27;</span>] = gi_uuids</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rtndata[<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">                result[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&#x27;11069&#x27;</span>     <span class="comment"># 获取 gi_id 出错</span></span><br><span class="line">                result[<span class="string">&#x27;gi_id&#x27;</span>] = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rtndata[<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            result[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&#x27;11060&#x27;</span>  <span class="comment"># the drbd not found</span></span><br><span class="line"></span><br><span class="line">        rtndata[<span class="string">&#x27;result&#x27;</span>] = result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rtndata = &#123;<span class="string">&#x27;state&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;result&#x27;</span>: &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;11059&#x27;</span>&#125;&#125;  <span class="comment"># drbdname error</span></span><br><span class="line">    <span class="keyword">return</span> rtndata</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exchange_gi_process</span>(<span class="params">drbdname</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    see:https://docs.linbit.com/docs/users-guide-8.4/#s-gi (16.2.4. How DRBD uses generation identifiers)</span></span><br><span class="line"><span class="string">    :param drbdname:</span></span><br><span class="line"><span class="string">    :return:type:str</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    local_gis = get_gi_action(drbdname)</span><br><span class="line">    remote_gis = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">global</span> remoteip</span><br><span class="line">    retresult = hautils.socketclient(ip=remoteip,</span><br><span class="line">                                     **&#123;<span class="string">&#x27;target&#x27;</span>: <span class="string">&#x27;drbd&#x27;</span>, <span class="string">&#x27;op&#x27;</span>: <span class="string">&#x27;getremotegi&#x27;</span>, <span class="string">&#x27;params&#x27;</span>: &#123;<span class="string">&#x27;drbdname&#x27;</span>:drbdname&#125;&#125;)</span><br><span class="line">    <span class="keyword">if</span> retresult:</span><br><span class="line">        <span class="keyword">if</span> retresult[<span class="string">&#x27;state&#x27;</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            remote_gis = retresult[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;gi_id&#x27;</span>]</span><br><span class="line">        drbd_next = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> local_gis <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> remote_gis <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            local_gis_sliced = slice_seq(local_gis)</span><br><span class="line">            remote_gis_sliced = slice_seq(remote_gis)</span><br><span class="line">            <span class="keyword">global</span> empty_uuid</span><br><span class="line">            print(<span class="string">&#x27;sliced&#x27;</span>, local_gis_sliced, remote_gis_sliced)</span><br><span class="line">            <span class="keyword">if</span> local_gis_sliced[<span class="number">0</span>] == empty_uuid <span class="keyword">and</span> remote_gis_sliced[<span class="number">0</span>] == empty_uuid:</span><br><span class="line">                drbd_next = <span class="string">&#x27;no_sync:(manual_sync)&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> local_gis_sliced[<span class="number">0</span>] == empty_uuid <span class="keyword">or</span> remote_gis_sliced[<span class="number">0</span>] == empty_uuid:</span><br><span class="line">                <span class="keyword">if</span> remote_gis_sliced[<span class="number">0</span>] == empty_uuid <span class="keyword">and</span> local_gis_sliced[<span class="number">0</span>] != empty_uuid:</span><br><span class="line">                    drbd_next = <span class="string">&#x27;full_re_sync:(local_source)&#x27;</span></span><br><span class="line">                <span class="keyword">elif</span> local_gis_sliced[<span class="number">0</span>] == empty_uuid <span class="keyword">and</span> remote_gis_sliced[<span class="number">0</span>] != empty_uuid:</span><br><span class="line">                    drbd_next = <span class="string">&#x27;full_re_sync:(local_target)&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> local_gis_sliced[<span class="number">0</span>] != empty_uuid <span class="keyword">and</span> remote_gis_sliced[<span class="number">0</span>] != empty_uuid <span class="keyword">and</span> local_gis_sliced[<span class="number">0</span>] == remote_gis_sliced[<span class="number">0</span>]:</span><br><span class="line">                drbd_next = <span class="string">&#x27;consistent:(both_secondary)&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> local_gis_sliced[<span class="number">1</span>] == remote_gis_sliced[<span class="number">0</span>] <span class="keyword">and</span> remote_gis_sliced[<span class="number">1</span>] == empty_uuid:</span><br><span class="line">                drbd_next = <span class="string">&#x27;partial_re_sync:(local_source)&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> local_gis_sliced[<span class="number">1</span>] == empty_uuid <span class="keyword">and</span> remote_gis_sliced[<span class="number">1</span>] == local_gis_sliced[<span class="number">0</span>]:</span><br><span class="line">                drbd_next = <span class="string">&#x27;partial_re_sync:(local_target)&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> local_gis_sliced[<span class="number">0</span>] <span class="keyword">in</span> [remote_gis_sliced[<span class="number">2</span>], remote_gis_sliced[<span class="number">3</span>]]:</span><br><span class="line">                drbd_next = <span class="string">&#x27;full_re_sync:(local_target)&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> remote_gis_sliced[<span class="number">0</span>] <span class="keyword">in</span> [local_gis_sliced[<span class="number">2</span>], local_gis_sliced[<span class="number">3</span>]]:</span><br><span class="line">                drbd_next = <span class="string">&#x27;full_re_sync:(local_source)&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> local_gis_sliced[<span class="number">0</span>] != remote_gis_sliced[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">if</span> local_gis_sliced[<span class="number">1</span>] == remote_gis_sliced[<span class="number">1</span>]:</span><br><span class="line">                    drbd_next = <span class="string">&#x27;split_brain:(auto_recover_able)&#x27;</span></span><br><span class="line">                <span class="keyword">elif</span> local_gis_sliced[<span class="number">1</span>] != remote_gis_sliced[<span class="number">1</span>]:</span><br><span class="line">                    drbd_next = <span class="string">&#x27;split_brain:(wait_for_manual_recover)&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> cmp_both(local_gis_sliced,remote_gis_sliced):</span><br><span class="line">                drbd_next = <span class="string">&#x27;unrelated_data:(wait_for_manual_recover)&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                debug.write_debug(debug.LINE(), <span class="string">&quot;peradrbd&quot;</span>, (local_gis_sliced, remote_gis_sliced))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            debug.write_debug(debug.LINE(), <span class="string">&quot;peradrbd&quot;</span>, (local_gis,remote_gis))</span><br><span class="line">        <span class="keyword">return</span> drbd_next</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info modern"><p><strong>注意</strong><br>经分析官方文档中的<code>matches</code>并不是完全相等，而 <code>UUID is always empty (zero)</code> 是指 “‘0’*16” 的字符串！</p></div><h2 id="如何模拟一个-Split-Brain状态"><a href="#如何模拟一个-Split-Brain状态" class="headerlink" title="如何模拟一个 Split-Brain状态"></a>如何模拟一个 <code>Split-Brain</code>状态</h2><ol><li>往主节点写入大文件，在未写入完前停止备节点的<code>DRBD</code>；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># on secondary</span><br><span class="line">drbdadm down drbdxx</span><br></pre></td></tr></table></figure></li><li>停止主节点的<code>DRBD</code>；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># on primary</span><br><span class="line">drbdadm down drbdxx</span><br></pre></td></tr></table></figure></li><li>启动备节点的<code>DRBD</code>，设置为主节点；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># on secondary</span><br><span class="line">drbdadm up drbdxx</span><br><span class="line">drbdadm primary drbdxx</span><br></pre></td></tr></table></figure></li><li>启动原主节点的<code>DRBD</code>，这时发现它的状态就是<code>StandAlone Secondary/Unknown UpToDate/DUnknown</code>，<code>Split-Brain</code> 情况出现。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># on primary</span><br><span class="line">drbdadm up drbdxx</span><br></pre></td></tr></table></figure><h2 id="解决-DRBD-脑裂状态"><a href="#解决-DRBD-脑裂状态" class="headerlink" title="解决 DRBD 脑裂状态"></a>解决 DRBD 脑裂状态</h2></li></ol><h3 id="设置自动修复"><a href="#设置自动修复" class="headerlink" title="设置自动修复"></a>设置自动修复</h3><p>参见<a href="https://docs.linbit.com/docs/users-guide-8.4/#s-configure-split-brain-behavior">5.17.2. Automatic split brain recovery policies</a></p><div class="note warning modern"><p><strong>警告</strong><br>配置<code>DRBD</code>自动修复脑裂（或其他状况）导致的数据分歧情况可能使正在配置的数据丢失，如果你不知道你在干什么，那最好别干。（NO ZUO NO DIE）</p></div><div class="note info modern"><p><strong>提示</strong><br>您更应该查看系统防护策略，集群管理集成和冗余集群管理器通信连接状态，以避免出现数据分歧。（防患于未然而不是亡羊补牢）</p></div><p>在启用和配置<code>DRBD</code>的自动脑裂恢复策略之前，您必须了解<code>DRBD</code>为此提供了多种配置选项。 <code>DRBD</code> 根据检测到脑裂时主节点（<code>Primary role</code>）的数量应用其脑裂恢复程序。为此，<code>DRBD</code> 检查以下关键字，这些关键字均可在资源的网络配置部分中找到：</p><h4 id="after-sb-0pri"><a href="#after-sb-0pri" class="headerlink" title="after-sb-0pri"></a>after-sb-0pri</h4><p>脑裂被检测到的同时该资源在任一节点不是主节点。对于这种状况，<code>DRBD</code>可以理解以下关键字：</p><ul><li>disconnect: 不自动恢复，只调用脑裂通知程序（如果已配置），断开连接并保持断开；</li><li>discard-younger-primary: 丢弃并回滚最后升主节点的改动；</li><li>discard-least-changes: 丢弃并回滚修改更少节点的修改；</li><li>discard-zero-changes: 如果有某一节点一点未改动，只需应用对另一主机所做的修改并继续；</li></ul><h4 id="after-sb-1pri"><a href="#after-sb-1pri" class="headerlink" title="after-sb-1pri"></a>after-sb-1pri</h4><p>脑裂刚被检测到的同时该资源在一个节点上是主节点。对于这种状况，<code>DRBD</code>理解以下关键字：</p><ul><li>disconnect:同上</li><li>consensus：应用上一步的策略之后，如果脑裂受害者可以选择拆分则会自动解决。否则，与<code>disconnect</code>指令相同。</li><li>call-pri-lost-after-sb：应用上一步的策略之后，如果脑裂受害者节点可以选择拆分则调用<code>pri-lost-after-sb</code>处理程序，该处理程序必须在处理程序中进行配置，并且需要强制从集群中删除该节点。</li><li>discard-secondary：将从端（<code>Secondary role</code>）节点视为脑裂受害者。</li></ul><h4 id="after-sb-2pri"><a href="#after-sb-2pri" class="headerlink" title="after-sb-2pri"></a>after-sb-2pri</h4><p>脑裂刚被检测到时该资源在两个节点都处于主端。该选项接受与除<code>discard-secondary</code> 和 <code>consensus</code> 之外与 <code>after-sb-1pri</code> 相同的关键字。<br><div class="note info modern"><p><strong>提示</strong><br><code>DRBD</code>还可以理解这三个选项下额外的关键字，这些关键字在这里被省略，因为它们很少被使用。请参阅<code>drbd.conf</code>的手册页以获取有关脑裂恢复关键字的详细信息，此处不再讨论。</p></div><br>例如，用作双主模式下<code>GFS</code>或<code>OCFS2</code>文件系统的块设备的资源可能会将其恢复策略定义如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resource &lt;resource&gt; &#123;</span><br><span class="line">  handlers &#123;</span><br><span class="line">    split-brain &quot;/usr/lib/drbd/notify-split-brain.sh root&quot;      # 脚本通知root用户，此处可以使用邮件提醒</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  net &#123;</span><br><span class="line">    after-sb-0pri discard-zero-changes;</span><br><span class="line">    after-sb-1pri discard-secondary;</span><br><span class="line">    after-sb-2pri disconnect;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手动恢复"><a href="#手动恢复" class="headerlink" title="手动恢复"></a>手动恢复</h3><p><a href="https://docs.linbit.com/docs/users-guide-8.4/#s-resolve-split-brain">6.3. Manual split brain recovery</a></p><p>在检测到脑裂后，一个节点将始终使资源处于<code>StandAlone</code>连接状态。另一个可能也处于<code>StandAlone</code>状态（如果两个节点同时检测到脑裂）或<code>WFConnection</code>（如果某方节点在另一节点检测到脑裂之前断开连接）。</p><p>此时，除非已将<code>DRBD</code>配置为自动从脑裂状态中恢复，否则必须通过选择一个节点进行手动干预，该节点的修改将被丢弃（此节点称为脑裂受害者）。这个干预使用下面步骤完成：</p><p>脑裂受害者需要处于<code>StandAlone</code>的连接状态，否则以下命令将返回错误。您可以通过发出以下内容确保它是<code>StandAlone</code>的：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm disconnect &lt;resource&gt;</span><br><span class="line">drbdadm secondary &lt;resource&gt;</span><br><span class="line">drbdadm connect --discard-my-data &lt;resource&gt;    # 8.4+  if 8.3,use &#x27;drbdadm -- --discard-my-data connect &lt;resource&gt;&#x27; instead</span><br></pre></td></tr></table></figure><br>在另一个节点（脑裂幸存者）上，如果它的连接状态也是<code>StandAlone</code>，你可以输入：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm connect &lt;resource&gt;</span><br></pre></td></tr></table></figure><br>如果节点已处于<code>WFConnection</code>状态，则可以省略此步骤;它会自动重新连接。</p><p>如果受脑裂影响的资源是<strong>堆叠</strong>资源，请使用<code>drbdadm --stacked</code>而不是<code>drbdadm</code>。</p><p>连接后，脑裂受害者立即将其连接状态更改为<code>SyncTarget</code>，并将其导致脑裂的修改由其余主节点的数据覆盖。</p><p>脑裂受害者不会引发全盘同步。相反，它的局部修改已经被回滚，对脑裂幸存者的任何修改都会传递给受害者。<br>重新同步完成后，脑裂被视为已解决（<code>resolved</code>），两个节点再次形成完全一致的冗余复制存储系统（<code>DRBD</code>）。</p><h3 id="仲裁服务"><a href="#仲裁服务" class="headerlink" title="仲裁服务"></a>仲裁服务</h3><p>参见我的另一篇博文：<a href="/blog/2020-07-22/dual-active-with-drbd/">一种基于 DRBD 的双活解决方案 | 别院牧志</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.linbit.com/docs/users-guide-8.4/">User’s Guide 8.4.x</a></li><li><a href="http://blog.sina.com.cn/s/blog_a30f2be401016d04.html">关于 DRBD v8.3 的同步机制</a></li><li><a href="http://myhat.blog.51cto.com/391263/606318/">一次 DRBD 脑裂行为的模拟</a></li><li><a href="http://itindex.net/detail/50197-drbd">drbd 脑裂处理 | IT 瘾</a></li><li><a href="http://www.3mu.me/%E4%BB%80%E4%B9%88%E6%98%AFdrbd%E8%84%91%E8%A3%82%E5%8F%8A%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9Fdrbd%E8%84%91%E8%A3%82/">什么是 DRBD 脑裂及如何模拟 DRBD 脑裂</a></li><li><a href="http://www.wenzizone.cn/2009/10/29/drbd%e4%b8%admetadata%e7%9a%84%e7%90%86%e8%a7%a3%e5%8e%9f%e5%88%9b.html">drbd 中 metadata 的理解(原创) – 蚊子世界</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DRBD </tag>
            
            <tag> 存储 </tag>
            
            <tag> 脑裂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于在 Python 中 MySQL 的 WHERE 子句中执行 IN 操作（list，tuple）的问题</title>
      <link href="blog/2018-05-10/executing-select-where-in-using-mysqldb/"/>
      <url>blog/2018-05-10/executing-select-where-in-using-mysqldb/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>今天在写代码的时候，有一处查询语句需要执行 <code>IN</code> 操作，结果直接<code>join</code>操作会出错。<br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_of_datas = [<span class="string">u&#x27;sde&#x27;</span>, <span class="string">u&#x27;sdf&#x27;</span>, <span class="string">u&#x27;sdb&#x27;</span>, <span class="string">u&#x27;sdc&#x27;</span>]</span><br><span class="line">sql = <span class="string">&quot;SELECT DiskId,Name,Sg,PhyId,ExpanderId,EProduct FROM Disk WHERE Used=&#x27;2&#x27; AND Name IN (%s)&quot;</span> % <span class="string">&#x27;,&#x27;</span>.join(list_of_datas)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DiskId, Name, Sg, PhyId, ExpanderId</span><br><span class="line">, EProduct</span><br><span class="line"><span class="keyword">FROM</span> Disk</span><br><span class="line"><span class="keyword">WHERE</span> Used <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> Name <span class="keyword">IN</span> (sde, sdf, sdb, sdc)</span><br></pre></td></tr></table></figure><p>很明显与预期的结果是不一样的。因为 <code>IN</code> 操作中的选取字段应该是带引号的字符串，而不是直接显示的字符串。也就是说我们期望的<code>WHERE</code>子句中是<code>WHERE Used = &#39;2&#39; AND Name IN (&#39;sde&#39;, &#39;sdf&#39;, &#39;sdb&#39;, &#39;sdc&#39;)</code>形式。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql1 = <span class="string">&quot;SELECT DiskId,Name,Sg,PhyId,ExpanderId,EProduct FROM Disk WHERE Used=&#x27;2&#x27; AND Name IN (%s)&quot;</span> % <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&quot;&#x27;%s&#x27;&quot;</span> % item <span class="keyword">for</span> item <span class="keyword">in</span> list_of_datas])</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DiskId, Name, Sg, PhyId, ExpanderId</span><br><span class="line">, EProduct</span><br><span class="line"><span class="keyword">FROM</span> Disk</span><br><span class="line"><span class="keyword">WHERE</span> Used <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> Name <span class="keyword">IN</span> (<span class="string">&#x27;sde&#x27;</span>, <span class="string">&#x27;sdf&#x27;</span>, <span class="string">&#x27;sdb&#x27;</span>, <span class="string">&#x27;sdc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>至此，可以满足我们的要求。不过，由于上面字符化操作感觉有点暴力，我们可以稍微改进一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">format_strings= <span class="string">&#x27;,&#x27;</span>.join([<span class="built_in">repr</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> list_of_datas])</span><br><span class="line">print(format_strings)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">u&#x27;sde&#x27;</span>,<span class="string">u&#x27;sdf&#x27;</span>,<span class="string">u&#x27;sdb&#x27;</span>,<span class="string">u&#x27;sdc&#x27;</span></span><br></pre></td></tr></table></figure><p>此时 <code>SQL</code> 语句变成:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DiskId,Name,Sg,PhyId,ExpanderId,EProduct <span class="keyword">FROM</span> Disk <span class="keyword">WHERE</span> Used<span class="operator">=</span><span class="string">&#x27;2&#x27;</span> <span class="keyword">AND</span> Name <span class="keyword">IN</span> (u<span class="string">&#x27;sde&#x27;</span>,u<span class="string">&#x27;sdf&#x27;</span>,u<span class="string">&#x27;sdb&#x27;</span>,u<span class="string">&#x27;sdc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个是没办法正常查询出结果的，因为查询字段是 <code>unicode</code> 编码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">format_unicode_strings = <span class="string">&#x27;,&#x27;</span>.join([<span class="built_in">repr</span>(item.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="keyword">if</span> <span class="built_in">isinstance</span>(item,unicode) <span class="keyword">else</span> <span class="built_in">repr</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> list_of_datas])</span><br></pre></td></tr></table></figure><p>此时结果满足我们的要求：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DiskId, Name, Sg, PhyId, ExpanderId</span><br><span class="line">, EProduct</span><br><span class="line"><span class="keyword">FROM</span> Disk</span><br><span class="line"><span class="keyword">WHERE</span> Used <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> Name <span class="keyword">IN</span> (<span class="string">&#x27;sde&#x27;</span>, <span class="string">&#x27;sdf&#x27;</span>, <span class="string">&#x27;sdb&#x27;</span>, <span class="string">&#x27;sdc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>至此，收工。</p><p>因为公司的代码封装函数是只能执行真正的 <code>SQL</code> 语句的，所以只能用上面的方法，查询网络上别人的解决方案发现下面的写法，以备参考。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>alist = [<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="string">&#x27;2.2.2.2&#x27;</span>,<span class="string">&#x27;3.3.3.3&#x27;</span>]                                                    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>select_str = <span class="string">&#x27;select * from server where ip in (%s)&#x27;</span> % <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>] * <span class="built_in">len</span>(alist))       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>select_str  </span><br><span class="line"><span class="string">&#x27;select * from server where ip in (%s,%s,%s)&#x27;</span> </span><br><span class="line"> <span class="comment"># 执行sql查询</span></span><br><span class="line">cursor.execute(select_str,a)  </span><br></pre></td></tr></table></figure><p>后面的写法有很多种，比如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">args = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">in_p = <span class="string">&#x27;, &#x27;</span>.join((<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="string">&#x27;%s&#x27;</span>, args)))</span><br><span class="line">realsql = sql % in_p</span><br><span class="line">cursor.execute(realsql, args)</span><br></pre></td></tr></table></figure><p>再比如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">args = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">in_p = <span class="string">&#x27;, &#x27;</span>.join(itertools.repeat(<span class="string">&#x27;%s&#x27;</span>, <span class="built_in">len</span>(args)))</span><br><span class="line">cursor.execute(sql % in_p, args)</span><br></pre></td></tr></table></figure><p>完整示例代码:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created by imoyao at 2018/5/18 17:17</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">excute_sql</span>(<span class="params">sql</span>):</span></span><br><span class="line">    db = MySQLdb.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;imoyao&quot;</span>, passwd=<span class="string">&quot;111111&quot;</span>, db=<span class="string">&quot;ODSP&quot;</span>, charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    cr = db.cursor()</span><br><span class="line">    cr.execute(sql)</span><br><span class="line">    data = cr.fetchall()</span><br><span class="line">    cr.close()</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">excute_sql_datas</span>(<span class="params">sqlstr, tupledata</span>):</span></span><br><span class="line">    db = MySQLdb.connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;imoyao&quot;</span>, passwd=<span class="string">&quot;111111&quot;</span>, db=<span class="string">&quot;ODSP&quot;</span>, charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    cr = db.cursor()</span><br><span class="line">    cr.execute(sqlstr,tupledata)</span><br><span class="line">    data = cr.fetchall()</span><br><span class="line">    cr.close()</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    list_of_datas = [<span class="string">u&#x27;sde&#x27;</span>, <span class="string">u&#x27;sdf&#x27;</span>, <span class="string">u&#x27;sdb&#x27;</span>, <span class="string">u&#x27;sdc&#x27;</span>]</span><br><span class="line">    format_strings = <span class="string">&#x27;,&#x27;</span>.join(</span><br><span class="line">        [<span class="built_in">repr</span>(item.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, unicode) <span class="keyword">else</span> <span class="built_in">repr</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> list_of_datas])</span><br><span class="line">    sql = <span class="string">&quot;SELECT DiskId,Name,Sg,PhyId,ExpanderId,EProduct FROM Disk WHERE Used=&#x27;2&#x27; AND Name IN (%s)&quot;</span> % format_strings</span><br><span class="line">    print(excute_sql(sql))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span>*<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">    sql2 = <span class="string">&quot;SELECT DiskId,Name,Sg,PhyId,ExpanderId,EProduct FROM Disk WHERE Used=&#x27;2&#x27; AND Name IN (%s)&quot;</span></span><br><span class="line">    <span class="comment"># format_strings2 = &#x27;, &#x27;.join(map(lambda x: &#x27;%s&#x27;, list_of_datas))</span></span><br><span class="line">    <span class="comment"># format_strings2 = &#x27;, &#x27;.join([&#x27;%s&#x27;] * len(list_of_datas))</span></span><br><span class="line">    format_strings2 = <span class="string">&#x27;, &#x27;</span>.join(itertools.repeat(<span class="string">&#x27;%s&#x27;</span>, <span class="built_in">len</span>(list_of_datas)))</span><br><span class="line">    sqlstr = sql2 % format_strings2</span><br><span class="line">    print(excute_sql_datas(sqlstr, list_of_datas))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考链接：</p><ol><li><p><a href="https://blog.csdn.net/u011085172/article/details/79044490">python mysql where in 对列表（list,,array）问题 - CSDN 博客</a></p></li><li><p><a href="https://stackoverflow.com/questions/4574609/executing-select-where-in-using-mysqldb">python - Executing “SELECT … WHERE … IN …” using MySQLdb - Stack Overflow</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Python 中的下划线用法的记录</title>
      <link href="blog/2018-04-28/the-underline-of-Python/"/>
      <url>blog/2018-04-28/the-underline-of-Python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Py-乙己"><a href="#Py-乙己" class="headerlink" title="Py 乙己"></a>Py 乙己</h2><p>孔乙己自己知道不能和架构师谈天，便只好向实习生说话。</p><p>有一回对我说道，“你写过<code>Python</code>么？”我略略点一点头。</p><p>他说，“写过代码，……我便考你一考。<code>Python</code>中的下划线，怎样用的？”</p><p>我想，搬砖一样的人，也配考我么？便回过脸去，不再理会。</p><p>孔乙己等了许久，很恳切的说道，“不能写罢？……我教给你，记着！这些用法应该记着。将来做面试官的时候要用。”</p><p>我暗想我和面试官的等级还很远呢，而且我们面试官也从不将这些问题拿来考应聘者；又好笑，又不耐烦，懒懒的答他道，“谁要你教，不就是命名变量，增加代码的可读性吗？”</p><p>孔乙己显出极高兴的样子，将两个指头的长指甲敲着键盘，点头说，“对呀对呀！……下划线有 x 种写法，你知道么？”</p><p>我愈不耐烦了，努着嘴走远。孔乙己刚用纸巾擦了擦键盘上的咖啡渍，想在<code>IDE</code>里写代码，见我毫不热心，便又叹一口气，显出极惋惜的样子。<br><a id="more"></a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ul><li>在<code>交互式解释器</code>中获取上一个语句执行的结果；</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_ * <span class="number">5</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>用来在函数、模块、包、变量名中分隔单词，增加可读性；</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var_foo_bar = <span class="string">&#x27;hello,world!&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>内部使用的变量、属性、方法、函数、类或模块，（约定）又称为内部实现；</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假定存在foo.py中定义变量：</span></span><br><span class="line">_var = <span class="number">9527</span></span><br><span class="line"><span class="comment"># 在bar.py中导入</span></span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> *   <span class="comment"># 不会导入以下划线开头的对象</span></span><br><span class="line">print(_var)</span><br><span class="line"><span class="comment"># 返回：</span></span><br><span class="line">NameError: name <span class="string">&#x27;_var&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="comment"># 当然也可以强制导入（不推荐）</span></span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> _var        <span class="comment"># Access to a protected member _var of a module</span></span><br><span class="line">print(_var)</span><br><span class="line"><span class="comment"># 返回：</span></span><br><span class="line"><span class="number">9527</span></span><br></pre></td></tr></table></figure><ul><li>避免与 <code>Python</code> 保留的关键字冲突（约定）；</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Tkinter.Toplevel(master, class_=<span class="string">&#x27;ClassName&#x27;</span>)        <span class="comment"># 注意class为Python内置关键字</span></span><br></pre></td></tr></table></figure><ul><li>在类内的私有变量（<code>private</code>），类外部无法直接使用原名称访问，需要通过<code>instance._ClassName__var</code>的形式访问（<code>name mangling</code>）；</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    __say_hello = <span class="string">&#x27;Hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pi = Person(<span class="string">&#x27;Peter&#x27;</span>, <span class="number">26</span>)</span><br><span class="line">    <span class="comment"># print(pi.__say_hello)       # AttributeError: &#x27;Person&#x27; object has no attribute &#x27;__say_hello&#x27;</span></span><br><span class="line">    print(pi._Person__say_hello)</span><br><span class="line">    print(pi.get_age())</span><br></pre></td></tr></table></figure><p>我们可以使用<code>dir(pi)</code>看一下对象中的中的属性和方法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[&#x27;_Person__say_hello&#x27;, &#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__doc__&#x27;, &#x27;__format__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__module__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;age&#x27;, &#x27;get_age&#x27;, &#x27;get_name&#x27;, &#x27;name&#x27;]</span><br></pre></td></tr></table></figure><p>这里 <code>Python</code> 解释器触发名称修饰，它这样做是为了防止变量在子类中被重写。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个集成Person的AI类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AI</span>(<span class="params">Person</span>):</span></span><br><span class="line"></span><br><span class="line">    __say_hello = <span class="string">&#x27;ALL in AI&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    ai_attr = [<span class="string">&#x27;ALL in AI&#x27;</span>]*<span class="number">3</span></span><br><span class="line">    ai = AI(*ai_attr)</span><br><span class="line">    print(<span class="built_in">dir</span>(ai))</span><br></pre></td></tr></table></figure><p>我们可以看到继承关系：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回</span></span><br><span class="line">[<span class="string">&#x27;_AI__say_hello&#x27;</span>, <span class="string">&#x27;_Person__gender&#x27;</span>, <span class="string">&#x27;_Person__say_hello&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;_age&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这点在 <code>《Python Cookbook》- 8.5 在类中封装属性名</code> 中对于单下划线和双下划线的使用场景也有提及和解释：</p><blockquote><p>通常而言，你应该让你的非公共名称以单下划线开头。但是，如果你清楚你的代码会涉及到子类，并且有些内部属性应该在子类中隐藏起来，那么才考虑使用双下划线方案。</p></blockquote><ul><li><p>类里面的保护变量；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_var_</span><br></pre></td></tr></table></figure><div class="note info modern"><p>个人认为这个还是类内部使用变量的一种延伸用法，只不过在后面加下划线以做区分。但是，这个和双下划线会在一定程度上引起阅读混淆（如果眼神不好）。如果只是命名个别变量还是可以接受的。</p></div></li><li><p><code>Python</code> 内置的“魔法”方法或属性，你也可以自己定义，但 <strong>强烈不推荐</strong>。比如：</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__init__, __file__, __main__</span><br></pre></td></tr></table></figure><ul><li>作为内部使用的一次性变量；</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通常在循环里使用,比如：</span></span><br><span class="line">foo_list = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="comment"># 或是用作占位，不实际使用的变量,比如：</span></span><br><span class="line"><span class="keyword">for</span> _, a <span class="keyword">in</span> [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>)]:</span><br><span class="line">    <span class="built_in">print</span> a</span><br></pre></td></tr></table></figure><ul><li><code>i18n</code> 里作为 <code>gettext()</code> 的缩写；</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_()</span><br></pre></td></tr></table></figure><ul><li>用来分隔数值以增加可读性（<code>Python 3.6</code> 新增）；</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; num &#x3D; 1_000_000 </span><br><span class="line">&gt;&gt;&gt; num</span><br><span class="line">1000000</span><br><span class="line">1_000_000</span><br></pre></td></tr></table></figure><h3 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h3><ol><li><a href="https://pep8.org/#descriptive-naming-styles">PEP 8 – Descriptive: Naming Styles</a></li><li><a href="https://www.pythonsheets.com/notes/python-basic.html#python-naming-rule">Python basic cheatsheet</a></li><li><a href="https://dbader.org/blog/meaning-of-underscores-in-python">The Meaning of Underscores in Python – dbader.org</a></li><li><a href="https://www.zhihu.com/question/268940585/answer/344852737">Python 中的下划线_有多少个意思？- 知乎</a></li><li><a href="https://www.zhihu.com/question/19754941">Python 的类的下划线命名有什么不同？ - 知乎</a></li></ol><h2 id="派森多一点"><a href="#派森多一点" class="headerlink" title="派森多一点"></a>派森多一点</h2><p><code>Python</code>中的<code>dunder</code></p><p>参见<a href="https://nedbatchelder.com/blog/200605/dunder.html">这里</a></p><blockquote><p>关于<code>Python</code> 编程的一个尴尬的事情是：有很多种双下划线。 例如，语法糖下面的标准方法名称具有 <code>__getattr__</code> 这样的名称，构造函数是 <code>__init__</code> ，内置运算符可以用 <code>__add__</code> 重载，等等。 在 <code>Django</code> 框架中（至少在他们整合了 <code>magic-removal</code> 分支之前），对象关系映射器使用了名为 <code>user__id__exact</code> 的关键字参数。<br>双下划线的问题是很难向别人描述。 你怎么读 <code>__init__</code> ？ “下划线下划线 <code>init</code> 下划线下划线”？ “双下划线 <code>init</code> 双下划线”？ 简单的 “<code>init</code>” 似乎漏掉了一些重要的东西。<br>我有一个解决方案：双下划线应该发音为 “<code>dunder</code>” 。 所以 <code>__init__</code> 念成“<code>dunder init dunder</code>”，或者也可以简读为 “<code>dunder init</code>” 。<br>现在我期待某个人定义一下 “<code>dunderhead</code>” 是什么意思，haha……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析 Python 中的延迟绑定问题</title>
      <link href="blog/2018-04-10/late-binding-of-Python/"/>
      <url>blog/2018-04-10/late-binding-of-Python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><code>Python</code> 使用中一个常见的困惑是 <code>Python</code> 在闭包(或在周围全局作用域（<code>surrounding global scope</code>）)中绑定变量的方式。<br><a id="more"></a><br>你所写的函数：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_expression</span>():</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> n: n*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print([multi(<span class="number">10</span>) <span class="keyword">for</span> multi <span class="keyword">in</span> multi_expression()])</span><br></pre></td></tr></table></figure><br>你所期望的是：<br>一个包含 5 个函数返回值的列表，每个函数有它们自己的封闭变量 <code>i</code> 乘以它们的参数，得到:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure><br>而实际返回结果是：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure><br>创建了 5 个函数，它们全都是 <code>4</code> 乘以 <code>n</code> 。<br><code>Python</code> 的闭包是<em>迟绑定</em> 。这意味着闭包中用到的变量的值是在内部函数被调用时查询得到的。<br>在这里, 每当调用<em>任何</em>函数返回时, <code>i</code> 的值是调用时在周围作用域（ <code>surrounding scope</code>）中查询到的。而到那个时候，循环已经完成， <code>i</code> 的值最终变成 <code>4</code> 。</p><p>关于这个陷阱有一个普遍严重的误解，它很容易被甩锅给 <code>Python</code> 的 <a href="http://docs.python.org/reference/expressions.html#lambda">lambda</a>表达式。实际上， <code>lambda</code> 表达式是被冤枉滴。我们尝试把它改写成普通函数：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_func</span>():</span></span><br><span class="line">    foo = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">n</span>):</span></span><br><span class="line">            <span class="keyword">return</span> n * i</span><br><span class="line">        foo.append(func)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> foo</span><br></pre></td></tr></table></figure></p><h2 id="为了实现目标，你应该这样"><a href="#为了实现目标，你应该这样" class="headerlink" title="为了实现目标，你应该这样"></a>为了实现目标，你应该这样</h2><ol><li>最一般的解决方案可以说是有点取巧（ <code>hack</code> ）。由于 <code>Python</code> 拥有在前文提到的为函数的默认参数赋值的行为（参见 <a href="http://docs.python-guide.org/en/latest/writing/gotchas/#default-args">可变默认参数</a> ）,你可以像下面这样创建一个立即绑定参数的闭包：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_expression_hack</span>():</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> n, i=i: n * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]     <span class="comment"># 此处用法参见《Python Cookbook》7.7 匿名函数捕获变量值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print([func(<span class="number">10</span>) <span class="keyword">for</span> func <span class="keyword">in</span> multi_expression_hack()])</span><br></pre></td></tr></table></figure><p> 此处会在函数内部再次定义一个局部变量。</p><ol start="2"><li><p>或者，你可以使用 <code>functools.partial</code> 函数（偏函数）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial_func</span>():</span></span><br><span class="line">    <span class="keyword">return</span> [partial(mul, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print([func(<span class="number">10</span>) <span class="keyword">for</span> func <span class="keyword">in</span> partial_func()])</span><br></pre></td></tr></table></figure></li><li>优雅的写法，直接用生成器表达式：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_expression</span>():</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> n: n * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print([gen(<span class="number">10</span>) <span class="keyword">for</span> gen <span class="keyword">in</span> gen_expression()])</span><br></pre></td></tr></table></figure><ol start="4"><li><p>利用 <code>yield</code> 的惰性求值思想编写生成器函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_func</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">lambda</span> n: i * n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print([gen(<span class="number">10</span>) <span class="keyword">for</span> gen <span class="keyword">in</span> gen_func()])</span><br></pre></td></tr></table></figure><h2 id="当陷阱不是一个陷阱"><a href="#当陷阱不是一个陷阱" class="headerlink" title="当陷阱不是一个陷阱"></a>当陷阱不是一个陷阱</h2></li></ol><p>有时, 你预期闭包是这样的（迟绑定的表现形式）。延迟绑定在多数情况下是正常的。不幸的是, 循环创建独特的函数可能会导致未知的小问题。</p><h2 id="派森多一点"><a href="#派森多一点" class="headerlink" title="派森多一点"></a>派森多一点</h2><p>关于生成器的惰性求值，我们可以看个例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span>      <span class="comment"># ①</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">n</span>):</span>     <span class="comment"># ②</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">m_num, m_gen_num</span>):</span></span><br><span class="line">    base = gen(m_gen_num)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(m_num):              <span class="comment"># ③</span></span><br><span class="line">        base = (add(i, n) <span class="keyword">for</span> i <span class="keyword">in</span> base)</span><br><span class="line">    <span class="keyword">return</span> base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    gen_num = <span class="number">3</span></span><br><span class="line">    print(<span class="built_in">list</span>(main(num, gen_num)))</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[90, 91, 92]</span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>看懂这个函数的关键是看懂 for 循环中的<code>base = (add(i, n) for i in base)</code>表达式，其中 add 的求和运算是和<code>for i in base</code>生成器中的元素（0,1,2）进行的，<strong>而 n 在最终运算时实际上每次都是 9</strong>。所以最终求值时相当于 9 和 <code>gen()</code> 求和之后再自己连续累加 10 次，最终得到值为（90,91,92）的生成器，而 list 就很简单了，只是一个简单的将生成器转换为列表的操作。</p><p>注意：此处代码不记得在哪里看的原文了，时隔两年再去看居然看不懂了。🤕如果读了上面看不懂的话可以参考此处 👉 <a href="https://segmentfault.com/a/1190000004554823">python 迭代器与生成器小结 - shomy - SegmentFault 思否</a></p><p>如果我们对之前改写的<code>multi_func()</code>函数再稍微改写一下，让内部函数传值<code>*args</code>会怎么样？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_func_starred</span>():</span></span><br><span class="line">    foo = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*n</span>):</span></span><br><span class="line">            <span class="keyword">return</span> n * i</span><br><span class="line">        foo.append(func)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print([func(<span class="number">10</span>) <span class="keyword">for</span> func <span class="keyword">in</span> multi_func_starred()])</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(10, 10, 10, 10), (10, 10, 10, 10), (10, 10, 10, 10), (10, 10, 10, 10), (10, 10, 10, 10)]</span><br></pre></td></tr></table></figure><p>实际上，<code>*args</code>相当于一个生成器表达式，这点很容易验证：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_expression_starred</span>():</span></span><br><span class="line">    <span class="comment"># print(type(lambda *n: n*i for i in range(5)))     # 注释行打印 &gt;&gt;&gt;: &lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> *n: n * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print([func(<span class="number">10</span>) <span class="keyword">for</span> func <span class="keyword">in</span> multi_expression_starred()])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 延迟绑定 </tag>
            
            <tag> 生成器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 环境管理介绍</title>
      <link href="blog/2018-01-18/python-env-introduce/"/>
      <url>blog/2018-01-18/python-env-introduce/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>项目开发中可能需要用到不同版本的<code>Python</code>及相关的开发环境。比如<code>Python2</code>及<code>Python3</code>，或者有的项目需要 <code>Django1.5</code> ，有的需要<code>2.0</code>，这个时候借助一些工具，往往可以达到事半功倍的效果。</p><p><img src= "/img/loading.svg" data-lazy-src="https://farm5.staticflickr.com/4290/35294660055_42c02b2316_k_d.jpg" alt="Python"></p><h2 id="个人搭配"><a href="#个人搭配" class="headerlink" title="个人搭配"></a>个人搭配</h2><p>既然别人都说不够理想，那就暂时处于观望阶段吧。目前个人在用的 Python 虚拟环境和包管理组合：<br>虚拟环境管理：venv<br>包管理：pip</p><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m venv venvX    # 使用 venv 创建名为 venvX（可自定义） 的虚拟环境</span><br><span class="line">source venvX/bin/activate    # 激活虚拟环境venvX（上一步自定义虚拟环境名称）</span><br><span class="line">pip install -r requirements.txt # 使用pip安装依赖</span><br></pre></td></tr></table></figure><h3 id="值得关注的"><a href="#值得关注的" class="headerlink" title="值得关注的"></a>值得关注的</h3><ul><li><a href="https://www.python.org/dev/peps/pep-0582/">PEP 582 – Python local packages directory | Python.org</a></li><li><a href="https://asciinema.org/a/303535">pdm 0.2.4 live demo - asciinema</a></li></ul><div class="note info no-icon modern"><h2 id="更新"><a href="#更新" class="headerlink" title="@更新"></a>@更新</h2><ul><li>2020-1-8<br>今天看到一篇文章 <a href="https://frostming.com/2019/09-01/pipenv-problems">Pipenv 有什么问题</a>，作者是<code>Pipenv</code>的核心开发者，也对<code>Poetry</code>做了一点介绍，同时在 <a href="https://github.com/pypa/pipenv/issues/4058">这里</a> 看到对<code>pipenv</code>项目进度的询问与开发者的回应，有兴趣的可以一读。</li></ul></div><hr><h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><h3 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h3><p><code>virtualenv</code>是一个非常流行的工具，为<code>Python</code>库创建独立的<code>Python</code>环境。如果你不熟悉这个工具，我强烈建议你学习它，因为它是一个非常有用的工具，我将在这个答案的其余部分对此进行比较。</p><p>它通过在一个目录（例如：<code>env/</code>）中安装一堆文件，然后修改<code>PATH</code>环境变量来为自定义<code>bin</code>目录（例如：<code>env/bin/</code>）添加前缀。 <code>python</code>或<code>python3</code>二进制文件的精确拷贝会被放置在这个目录中，但<code>Python</code>被编程为首先在环境目录中查找相对于其路径的库。它不是<code>Python</code>标准库的一部分，但是获得<code>PyPA</code>（Python Packaging Authority）正式称赞。激活之后，你就可以使用<code>pip</code>在虚拟环境中安装软件包。</p><h4 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h4><p><code>virtualenvwrapper</code>是<code>virtualenv</code>的一组扩展（参见<a href="http://virtualenvwrapper.readthedocs.io/en/latest/">文档</a>）。它提供例如<code>mkvirtualenv</code>、<code>lssitepackages</code>这样的命令，特别是<code>workon</code>命令，它可以在不同的<code>virtualenv</code>目录之间切换。如果你想要多个<code>virtualenv</code>目录，这个工具特别有用。</p><h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h3><p><code>pyenv</code>是<code>Python</code>的<strong>版本</strong>管理器,用于隔离<code>Python</code>版本。例如，你可能想要针对<code>Python 2.6</code>,<code>2.7</code>,<code>3.3</code>,<code>3.4</code>和<code>3.5</code>测试你的代码，因此你需要在不同<code>Python</code>版本之间进行切换。一旦激活，它就会在<code>PATH</code>环境变量前加上<code>~/.pyenv/shims</code>，其中有一些与<code>Python</code>命令（<code>python</code>，<code>pip</code>）匹配的特殊文件。这些不是<code>Python</code>提供的命令的副本;它们是根据<code>PYENV_VERSION</code>环境变量或<code>.python-version</code>文件或<code>~/.pyenv/version</code>文件决定运行哪个版本的<code>Python</code>的特殊脚本。 <code>pyenv</code>也使下载和安装多个<code>Python</code>版本的过程变得更简单，使用命令<code>pyenv install</code>即可。</p><h4 id="pyenv-virtualenv"><a href="#pyenv-virtualenv" class="headerlink" title="pyenv-virtualenv"></a>pyenv-virtualenv</h4><p><code>pyenv-virtualenv</code>是<code>pyenv</code>的一个插件，和<code>pyenv</code>一样，允许你在同一时间方便地使用<code>pyenv</code>和<code>virtualenv</code>。但是，如果你使用<code>Python 3.3</code>或更高版本，则<code>pyenv-virtualenv</code>会尝试运行<code>python -m venv</code>（如果可用），而不是<code>virtualenv</code>。如果你不想使用便利功能，则可以搭配使用<code>virtualenv</code>和<code>pyenv</code>而不使用<code>pyenv-virtualenv</code>。</p><h4 id="pyenv-virtualenvwrapper"><a href="#pyenv-virtualenvwrapper" class="headerlink" title="pyenv-virtualenvwrapper"></a>pyenv-virtualenvwrapper</h4><p><code>pyenv-virtualenvwrapper</code>是<code>pyenv</code>的一个插件，可以很方便地将<code>virtualenvwrapper</code>集成到<code>pyenv</code>中。</p><h3 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h3><p><code>pipenv</code>是<code>Python</code>的<strong>包</strong>管理器。由<code>Kennetth Reitz</code>（<code>requests</code>的作者）编写维护，是我们上面提到的这些项目里面最新的。它的目标是在命令行中将<code>Pipfile</code>、<code>pip</code>和<code>virtualenv</code>合并为一个命令。</p><h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><h3 id="pyvenv"><a href="#pyvenv" class="headerlink" title="pyvenv"></a>pyvenv</h3><p><code>pyvenv</code>是一个<code>Python 3</code>附带的脚本，但在<strong>Python 3.6 中被弃用</strong>，（参见<a href="https://docs.python.org/dev/whatsnew/3.6.html#id8">这里</a>）因为它有问题（暂且不说名字还容易造成混淆）。在<code>Python 3.6+</code>中，实际上等价于命令<code>python3 -m venv</code>。</p><h3 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h3><p><code>venv</code>是<code>Python 3</code>附带的一个包，你可以使用<code>python3 -m venv</code>运行（虽然由于某些原因，一些发行版把它分离成一个单独的发行包，比如<code>Ubuntu / Debian</code>上的<code>python3-venv</code>）。它的作用与<code>virtualenv</code> 相似，工作方式也非常相似，但不需要复制<code>Python</code>二进制文件（<code>Windows</code>下除外）。如果你的代码不需要支持<code>Python 2</code>，可以使用它。在撰写本文时，<code>Python</code>社区似乎对<code>virtualenv</code>感到满意，<code>venv</code>相对来说比较小众。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe">Python - What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc? - Stack Overflow</a></li><li><a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/">Pipenv &amp; Virtual Environments — The Hitchhiker’s Guide to Python</a></li><li><a href="https://frostming.com/2019/11-18/python-setup">我的 Python 环境设置</a></li><li><a href="http://greyli.com/slides/pyconchina2019-venv/#/">Python 虚拟环境和依赖管理工具大乱斗</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pyenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 环境下配置 DRBD</title>
      <link href="blog/2018-01-11/how-to-configure-drbd-on-CentOS7/"/>
      <url>blog/2018-01-11/how-to-configure-drbd-on-CentOS7/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>本文主要记录<code>DRBD</code>的配置过程和功能验证。<br><a id="more"></a></p><p>本文使用<code>64</code>位<code>CentOS</code>，基本环境：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+-----------------------+              |               +----------------------+</span><br><span class="line">| [ DRBD_A (Server#1) ] | 10.10.17.18  |  10.10.17.19  | [DRBD_B (Server#2) ] |</span><br><span class="line">|       node01          +--------------+---------------+         node02       |</span><br><span class="line">|                       |                              |                      |</span><br><span class="line">+-----------------------+                              +----------------------+</span><br><span class="line"></span><br><span class="line">DRBD 服务器A ：ip:10.10.17.18，hostname：DRBD_A</span><br><span class="line">DRBD 服务器B ：ip:10.10.17.19，hostname：DRBD_B</span><br></pre></td></tr></table></figure><h2 id="建立磁盘分区"><a href="#建立磁盘分区" class="headerlink" title="建立磁盘分区"></a>建立磁盘分区</h2><ul><li>分区之前</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@DRBD_A ~]# lsblk      # 查询块设备信息</span><br><span class="line">NAME                  MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">fd0                     2:0    1    4K  0 disk</span><br><span class="line">sda                     8:0    0   16G  0 disk</span><br><span class="line">├─sda1                  8:1    0  500M  0 part /boot</span><br><span class="line">└─sda2                  8:2    0 15.5G  0 part</span><br><span class="line">  ├─centos_bogon-root 253:0    0 13.9G  0 lvm  /</span><br><span class="line">  └─centos_bogon-swap 253:1    0  1.6G  0 lvm  [SWAP]</span><br><span class="line">sdb                     8:16   0    5G  0 disk</span><br><span class="line">└─StorPool-SANLun10   253:2    0    2G  0 lvm</span><br><span class="line">sr0                    11:0    1 1024M  0 rom</span><br><span class="line">drbd0                 147:0    0    2G  1 disk</span><br></pre></td></tr></table></figure><ul><li>进行分区</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@DRBD_A ~]# fdisk /dev/sdb     # 在sdb上新建分区</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">Building a new DOS disklabel with disk identifier 0xb25d5d26.</span><br><span class="line"></span><br><span class="line">Command (m for help): n         #  新建</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p):</span><br><span class="line">Using default response p</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-10485759, default 2048):</span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-10485759, default 10485759): +1G</span><br><span class="line">Partition 1 of type Linux and of size 1 GiB is set</span><br><span class="line"></span><br><span class="line">Command (m for help): w         #  写入</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><ul><li>分区之后</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@DRBD_A ~]# lsblk</span><br><span class="line">NAME                  MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">fd0                     2:0    1    4K  0 disk</span><br><span class="line">sda                     8:0    0   16G  0 disk</span><br><span class="line">├─sda1                  8:1    0  500M  0 part /boot</span><br><span class="line">└─sda2                  8:2    0 15.5G  0 part</span><br><span class="line">  ├─centos_bogon-root 253:0    0 13.9G  0 lvm  /</span><br><span class="line">  └─centos_bogon-swap 253:1    0  1.6G  0 lvm  [SWAP]</span><br><span class="line">sdb                     8:16   0    5G  0 disk</span><br><span class="line">├─sdb1                  8:17   0    1G  0 part      # 新分区</span><br><span class="line">└─StorPool-SANLun10   253:2    0    2G  0 lvm</span><br><span class="line">sr0                    11:0    1 1024M  0 rom</span><br><span class="line">drbd0                 147:0    0    2G  0 disk /media</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h3 id="更改-DRBD-全局配置"><a href="#更改-DRBD-全局配置" class="headerlink" title="更改 DRBD 全局配置"></a>更改 DRBD 全局配置</h3><p>首先根据需求更改<code>DRBD</code>全局配置<code>/etc/drbd.d/global_common.conf</code>:</p><p>此处可参阅另一篇文章：<a href="/blog/2017-09-11/Record_of_drbd/#global-common-conf配置（示例）">DRBD 全局配置</a></p><h3 id="创建DRBD配置文件"><a href="#创建DRBD配置文件" class="headerlink" title="创建DRBD配置文件"></a>创建<code>DRBD</code>配置文件</h3><p>由于<code>DRBD</code>是基于块设备的存储复制解决方案，所以此处使用<code>Lun</code>作为演示。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi r0.res</span><br><span class="line">resource r0 &#123;</span><br><span class="line">    # DRBD device</span><br><span class="line">    device /dev/drbd0;</span><br><span class="line">    # block device</span><br><span class="line">    disk /dev/StorPool/SANLun10;    # 磁盘路径，若为disk则修改为/dev/sdb1</span><br><span class="line">    meta-disk internal;</span><br><span class="line">    on DRBD_A &#123;</span><br><span class="line">        # IP address:port</span><br><span class="line">        address 10.10.17.18:7788;</span><br><span class="line">    &#125;</span><br><span class="line">    on DRBD_B &#123;</span><br><span class="line">        address 10.10.17.19:7788;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code>本机主机名(<code>hostname</code>)和地址(<code>ip</code>)必须严格按照真实情况配置，两边<code>.res</code>文件内容尽量保持一致。</p><p>配置文件创建完成之后，在两个服务器上分别执行如下命令，创建<code>DRBD</code>资源，当然你也可以通过<code>scp</code>把配置文件拷过去，然后执行相关命令。</p><p>其中上述配置文件的 meta-disk 有三种记录方式：internal/device/device[index_num]。其中不管是哪种方式，metadata 存放的分区不能格式化，哪怕使用 internal 时 metadata 和一般 data 在同一个分区也不能格式化该分区。</p><p>internal 是将元数据也写入到数据分区的尾部，即数据和元数据同分区。如果指定的 device 没有给定 index 时，则表示元数据存储到该设备中。如果某节点指定 device[index_num]，那么指定几次元数据分区索引就必须大于 128M 的几倍，例如上述文件中 drbd1.longshuai.com 节点指定了/dev/sdb1[0]，那么 sdb1 就必须大于 128M，如果此时其他资源的节点也指定了同一台服务器的/dev/sdb1[1]，则指定了两次就必须大于 256M。指定为 internal 和 device 时，元数据区的大小是 drbd 自行计算的。<br>上面 index 的说法来自<a href="http://www.cnblogs.com/f-ck-need-u/p/8678883.html#1-drbd-">这里</a>，具体没有实际验证。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm create-md r0</span><br></pre></td></tr></table></figure><p>然后启动 DRBD：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm up r0</span><br></pre></td></tr></table></figure><p>我在测试时没有操作下一步操作，但是数据也可以完成同步。查询了一下，网上说<code>drbdadm up</code>这个命令相当于<code>attach</code>、<code>syncer</code>、<code>connect</code>的总集合。但是后台使用<code>systemctl status drbd</code>获取到的状态还是<code>inactive (dead)</code>，欢迎大家提出自己的看法。</p><hr><p>在两个服务器上分别启动<code>DRBD</code>服务：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/drbd start</span><br></pre></td></tr></table></figure><hr><p>把<code>DRBD_A</code>做为主服务器：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 无数据时</span></span><br><span class="line">drbdadm primary r0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 有数据时，把本端作为primary端，本地数据分发到其他节点。</span></span><br><span class="line">drbdadm -- --overwrite-data-of-peer primary r0</span><br></pre></td></tr></table></figure><p>使用如下命令查看<code>DRBD</code>服务的状态信息：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/drbd status</span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line">drbd-overview</span><br></pre></td></tr></table></figure><p>此时，写入<code>DRBD_A</code>端(<code>/dev/drbd1</code>)的数据都会同步到<code>DRBD_B</code>端。</p><h2 id="测试数据同步"><a href="#测试数据同步" class="headerlink" title="测试数据同步"></a>测试数据同步</h2><h3 id="Primary端"><a href="#Primary端" class="headerlink" title="Primary端"></a><code>Primary</code>端</h3><ul><li>格式化<code>drbd</code></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/drbd0</span><br></pre></td></tr></table></figure><ul><li>挂载设备</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/drbd0 /media</span><br></pre></td></tr></table></figure><ul><li>写入数据</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /media/</span><br><span class="line">mkdir drbd_test</span><br><span class="line">cd drbd_test/</span><br><span class="line">echo &quot;hello World&quot; &gt; hello.txt</span><br></pre></td></tr></table></figure><ul><li>卸载设备</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">umount /media</span><br></pre></td></tr></table></figure><ul><li>本端降级</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm secondary r0</span><br></pre></td></tr></table></figure><h3 id="Secondary端"><a href="#Secondary端" class="headerlink" title="Secondary端"></a><code>Secondary</code>端</h3><ul><li>从端升主</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drbdadm primary r0</span><br></pre></td></tr></table></figure><ul><li>挂载设备</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/drbd0 /media</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 此时从端不需要再次格式化，否则数据丢失。</p><ul><li>验证数据</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /media</span><br><span class="line">ls</span><br><span class="line">cat ./drbd_test/hello.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">hello World</span><br></pre></td></tr></table></figure><p>参考来源</p><ul><li><a href="https://www.server-world.info/en/note?os=CentOS_7&amp;p=drbd&amp;f=2">CentOS 7 : DRBD : Configure : Server World</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRBD </tag>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 下源码安装 DRBD</title>
      <link href="blog/2018-01-11/how-to-install-drbd-on-CentOS7/"/>
      <url>blog/2018-01-11/how-to-install-drbd-on-CentOS7/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>最近开发中又要用到<code>DRBD</code>做远程复制的功能，网上搜到很多都是<code>yum</code>安装的办法，这里记录一下源码安装的办法。<br><a id="more"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h3 id="关闭-SELinux"><a href="#关闭-SELinux" class="headerlink" title="关闭 SELinux"></a>关闭 SELinux</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i -e &quot;s/=enforcing/=disabled/g&quot; /etc/selinux/config</span><br><span class="line">setenforce 0 </span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y update </span><br><span class="line">yum -y install gcc make automake autoconf libxslt libxslt-devel flex rpm-build wget</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 安装<code>kernel-devel</code>一定要和<code>uname -r</code>获取结果一致。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q kernel-devel</span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.10.0-327.el7.x86_64</span></span><br></pre></td></tr></table></figure><p>返回的内核版本应当一致，否则建议用本地源安装<code>kernel-devel</code>。</p><h2 id="下载-解压源码"><a href="#下载-解压源码" class="headerlink" title="下载/解压源码"></a>下载/解压源码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">官方地址：https://www.linbit.com/en/drbd-community/drbd-download/</span><br><span class="line">旧版本：http://www.linbit.com/en/drbd-community/old-releases/</span><br><span class="line">MORE：http://www.linbit.com/www.linbit.com/downloads/drbd/</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在<code>DRBD 8.4.3</code>(?)以上版本，对<code>drbd</code>和<code>utils</code>做了拆分，需要分别进行下载。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://xxx.tar.gz</span><br></pre></td></tr></table></figure><p>当然，如果需要你也可以通过我的分享下载编译好的<code>rpm</code>包（示例版本）：</p><blockquote><p>链接:  <a href="https://pan.baidu.com/s/1huncgDI">https://pan.baidu.com/s/1huncgDI</a>       密码:  b41i</p></blockquote><h3 id="解压下载的两个tar包"><a href="#解压下载的两个tar包" class="headerlink" title="解压下载的两个tar包"></a>解压下载的两个<code>tar</code>包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf drbd-8.*.tar.gz</span><br><span class="line">tar -zxvf drbd-utils-*.tar.gz</span><br></pre></td></tr></table></figure><h2 id="编译rpm"><a href="#编译rpm" class="headerlink" title="编译rpm"></a>编译<code>rpm</code></h2><h3 id="创建构建DRBD需要的目录"><a href="#创建构建DRBD需要的目录" class="headerlink" title="创建构建DRBD需要的目录"></a>创建构建<code>DRBD</code>需要的目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p rpmbuild/&#123;BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS&#125;</span><br></pre></td></tr></table></figure><h3 id="编译DRBD"><a href="#编译DRBD" class="headerlink" title="编译DRBD"></a>编译<code>DRBD</code></h3><h4 id="制作-rpm-包"><a href="#制作-rpm-包" class="headerlink" title="制作 rpm 包"></a>制作 <code>rpm</code> 包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd drbd-8.4.5/</span><br><span class="line">make clean</span><br><span class="line">make km-rpm KDIR=/usr/src/kernels/`uname -r`/       # 启用内核模块 自动识别内核版本    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You have now:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /root/rpmbuild/RPMS/x86_64/drbd-km-3.10.0_693.11.6.el7.x86_64-8.4.5-1.x86_64.rpm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /root/rpmbuild/RPMS/x86_64/drbd-km-debuginfo-8.4.5-1.x86_64.rpmmakeinsta</span></span><br></pre></td></tr></table></figure><hr><h4 id="直接编译安装"><a href="#直接编译安装" class="headerlink" title="直接编译安装"></a>直接编译安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># drbd模块</span></span></span><br><span class="line"></span><br><span class="line">cd drbd</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">lsmod|grep drbd</span><br><span class="line">cp drbd.ko /lib/modules/`uname -r`/kernel/lib/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装模块</span></span></span><br><span class="line">modprobe drbd</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 验证drbd模块是否加载（部分系统默认有该模块）</span></span></span><br><span class="line">lsmod|grep drbd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> drbd                  364858  0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> libcrc32c              12644  4 xfs,drbd,nf_nat,nf_conntrack</span></span><br></pre></td></tr></table></figure><hr><h3 id="编译-drbd-utils-组件"><a href="#编译-drbd-utils-组件" class="headerlink" title="编译 drbd-utils 组件"></a>编译 drbd-utils 组件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ../../drbd-utils-8.9.0/   </span><br><span class="line">./configure</span><br><span class="line">make rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">+ exit 0</span><br><span class="line">You have now:</span><br><span class="line">/root/rpmbuild/RPMS/x86_64/drbd-km-3.10.0_693.11.6.el7.x86_64-8.4.5-1.x86_64.rpm</span><br><span class="line">/root/rpmbuild/RPMS/x86_64/drbd-km-debuginfo-8.4.5-1.x86_64.rpm</span><br><span class="line">/root/rpmbuild/RPMS/x86_64/drbd-8.9.0-1.el7.centos.x86_64.rpm</span><br><span class="line">/root/rpmbuild/RPMS/x86_64/drbd-utils-8.9.0-1.el7.centos.x86_64.rpm</span><br><span class="line">/root/rpmbuild/RPMS/x86_64/drbd-xen-8.9.0-1.el7.centos.x86_64.rpm</span><br><span class="line">/root/rpmbuild/RPMS/x86_64/drbd-udev-8.9.0-1.el7.centos.x86_64.rpm</span><br><span class="line">/root/rpmbuild/RPMS/x86_64/drbd-pacemaker-8.9.0-1.el7.centos.x86_64.rpm</span><br><span class="line">/root/rpmbuild/RPMS/x86_64/drbd-bash-completion-8.9.0-1.el7.centos.x86_64.rpm</span><br><span class="line">/root/rpmbuild/RPMS/x86_64/drbd-debuginfo-8.9.0-1.el7.centos.x86_64.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br></pre></td></tr></table></figure><p>此时有可能提示错误如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/xsltproc \</span><br><span class="line">        --xinclude \</span><br><span class="line">        http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl drbdsetup.xml</span><br><span class="line">error : Operation in progress</span><br><span class="line">warning: failed to load external entity &quot;http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl&quot;</span><br><span class="line">cannot parse http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl</span><br><span class="line">make[1]: *** [drbdsetup.8] Error 4</span><br></pre></td></tr></table></figure><p>提示有一个地址文件没能找到，解决方法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install docbook-style-xsl</span><br></pre></td></tr></table></figure><p>TODO: 此处暂未找到别的解决方法，欢迎读者留言。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装编译生成的文件"><a href="#安装编译生成的文件" class="headerlink" title="安装编译生成的文件"></a>安装编译生成的文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/rpmbuild/RPMS/x86_64/</span><br><span class="line">rpm -ivh drbd-* --force</span><br></pre></td></tr></table></figure><h3 id="加载模块（参见分割线部分）"><a href="#加载模块（参见分割线部分）" class="headerlink" title="加载模块（参见分割线部分）"></a>加载模块（参见分割线部分）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">modprobe drbd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsmod|grep drbd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回（`depends` 可能略有不同）：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> drbd                  373375  4</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> libcrc32c              12644  2 xfs,drbd</span></span><br><span class="line"></span><br><span class="line">drbd-overview  </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下两者返回稍有不同</span>    </span><br><span class="line">cat /proc/drbd</span><br><span class="line">drbdadm -V</span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line"></span><br><span class="line">DRBDADM_BUILDTAG=GIT-hash:\ 79677f4***7ca6b99929\ build\ by\ root@imoyao\,\ 2018-01-06\ 14:25:03</span><br><span class="line">DRBDADM_API_VERSION=1</span><br><span class="line">DRBD_KERNEL_VERSION_CODE=0x080405</span><br><span class="line">DRBDADM_VERSION_CODE=0x080900</span><br><span class="line">DRBDADM_VERSION=8.9.0</span><br></pre></td></tr></table></figure><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul><li><p><a href="https://www.server-world.info/en/note?os=CentOS_7&amp;p=drbd&amp;f=1">CentOS 7 : DRBD : Install : Server World</a></p></li><li><p><a href="http://blog.topspeedsnail.com/archives/8381">CentOS 安装配置 DRBD – WTF Daily Blog</a></p></li><li><p><a href="http://www.3mu.me/centos%E4%B8%8B%E5%AE%9E%E7%8E%B0heartbeatdrbdmysql%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87%E7%A1%AC%E4%BB%B6%E6%95%85%E9%9A%9C%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E9%AB%98%E5%8F%AF%E7%94%A8ha/#respond">CentOS 下实现 Heartbeat+DRBD+MySQL 双机热备硬件故障自动切换高可用(HA)方案 | 三木的人生——3mu.me</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DRBD </tag>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🐍PyTricks | Python 字典排序</title>
      <link href="blog/2018-01-02/how-to-sort-dict-use-python/"/>
      <url>blog/2018-01-02/how-to-sort-dict-use-python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>写出<code>Pythonic</code>的代码应该是每个 Pythonista 的毕生追求，本文主要记录在开发中遇到的一些有关<code>Python</code>技巧。</p><a id="more"></a><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li><code>JSON</code>字典内按照某个键值排序</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: alist = [&#123;<span class="string">&#x27;create&#x27;</span>: <span class="string">&#x27;2017-12-28 11:05:48&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;0_1&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;foo.py&#x27;</span>, <span class="string">&#x27;size&#x27;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="string">&#x27;create&#x27;</span>: <span class="string">&#x27;2017-12-28 11:00:29&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;0_2&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;bar.py&#x27;</span>, <span class="string">&#x27;size&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;create&#x27;</span>: <span class="string">&#x27;2017-12-28 11:05:55&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;0_3&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;baz.py&#x27;</span>, <span class="string">&#x27;size&#x27;</span>: <span class="number">0</span>&#125;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: alist.sort(key=<span class="keyword">lambda</span> x:x[<span class="string">&#x27;create&#x27;</span>])    <span class="comment"># 按照创建时间排序 </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: alist</span><br><span class="line">Out[<span class="number">17</span>]:</span><br><span class="line">[&#123;<span class="string">&#x27;create&#x27;</span>: <span class="string">&#x27;2017-12-28 11:00:29&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;0_2&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;bar.py&#x27;</span>, <span class="string">&#x27;size&#x27;</span>: <span class="number">0</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;create&#x27;</span>: <span class="string">&#x27;2017-12-28 11:05:48&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;0_1&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;foo.py&#x27;</span>, <span class="string">&#x27;size&#x27;</span>: <span class="number">0</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;create&#x27;</span>: <span class="string">&#x27;2017-12-28 11:05:55&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;0_3&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;baz.py&#x27;</span>, <span class="string">&#x27;size&#x27;</span>: <span class="number">0</span>&#125;]</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li>字典排序</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: languages = &#123;<span class="string">&#x27;JAVA&#x27;</span>:<span class="number">15</span>,<span class="string">&#x27;Python&#x27;</span>:<span class="number">12</span>,<span class="string">&#x27;Go&#x27;</span>:<span class="number">13</span>,<span class="string">&#x27;PHP&#x27;</span>:<span class="number">14</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: <span class="built_in">sorted</span>(languages.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])        <span class="comment"># 以key排序</span></span><br><span class="line">Out[<span class="number">35</span>]: [(<span class="string">&#x27;Go&#x27;</span>, <span class="number">13</span>), (<span class="string">&#x27;JAVA&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;PHP&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Python&#x27;</span>, <span class="number">12</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: <span class="built_in">sorted</span>(languages.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])        <span class="comment"># 以value排序</span></span><br><span class="line">Out[<span class="number">36</span>]: [(<span class="string">&#x27;Python&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;PHP&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;Go&#x27;</span>, <span class="number">13</span>), (<span class="string">&#x27;JAVA&#x27;</span>, <span class="number">15</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: <span class="built_in">sorted</span>(languages.items(),key=<span class="keyword">lambda</span> x:-x[<span class="number">1</span>])       <span class="comment"># 以value倒序</span></span><br><span class="line">Out[<span class="number">37</span>]: [(<span class="string">&#x27;JAVA&#x27;</span>, <span class="number">15</span>), (<span class="string">&#x27;Go&#x27;</span>, <span class="number">13</span>), (<span class="string">&#x27;Python&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;PHP&#x27;</span>, <span class="number">12</span>)]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>sort()</code>与<code>sorted()</code>的区别，前者直接修改列表，返回值为<code>None</code>；后者为内置函数，它会从一个可迭代对象构建一个新的排序列表。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><ul><li><a href="https://docs.python.org/zh-cn/3.6/howto/sorting.html">排序指南 — Python 3.6.10 文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 🐍PyTricks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> sort </tag>
            
            <tag> dict </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书籍篇 | Python 资源整理推荐</title>
      <link href="blog/2017-12-03/recommend-books-for-Python-learner/"/>
      <url>blog/2017-12-03/recommend-books-for-Python-learner/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>因为我目前做<code>Python</code>相关开发，很多想入门<code>Python</code>的朋友或者从事其他语言开发的同学私聊讨论书籍资料推荐的话题，其实网上有很多关于这个问题的话题总结，我个人的推荐并不见得比大神更好，希望真正想沉下心来学习的人能够早点明白“自己动手，丰衣足食”的道理。在这里做个简单整理也算是给大家一个交代，以不留下盛气凌人的傲慢印象为盼。</p><a id="more"></a><h2 id="红药丸还是蓝药丸"><a href="#红药丸还是蓝药丸" class="headerlink" title="红药丸还是蓝药丸"></a>红药丸还是蓝药丸</h2><p><img src= "/img/loading.svg" data-lazy-src="/images/python-or-python3.png" alt="请选Python3"></p><p>刚开始学习编程的时候，很多人会有各种困惑：选择哪门语言？选择语言的哪个版本？用什么编辑器/开发平台……</p><p>相信看这篇文章的对第一个问题已然有了自己的选择，在此不多赘述。关于 Python 版本的问题，时至今日（2017 年），除非公司项目需要，不然请果断选择 Python3，毕竟大多数第三方库已经做出放弃 Python2 维护的相关说明。第三个问题倒是不用过分纠结，毕竟只要能够 run，哪怕是用记事本写的也没人会在意。个人目前使用 Sublime Text 3 搭配 PyCharm 作为 IDE。</p><h2 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h2><ul><li>《”笨办法”学 Python》    （《Learn Python the Hard Way》）</li></ul><p><a href="https://www.gitbook.com/book/flyouting/learn-python-the-hard-way-cn/details">笨办法学 Python -Gitbook</a></p><p>学习一门语言的最好办法就是多敲多用，妄图靠眼睛<strong>看</strong>会一门技术的人，希望能够早点丢掉幻想，准备战斗！</p><blockquote><p>这本简单书的目的是让你起步编程。 虽然书名说是“笨办法”,但其实并非如此. 所谓的“笨办法”是指本书教授的方式。这本书的<br>教学方式就是按照我告诉你的方式去做一系列的练习，目的是通过重复练习掌握一种技能。这对于一些什么都不知道的初学者，在理解更复杂的科目之前获取基本能力是很有效的方法。这种方法适用于一切领域，从武术到音乐甚至基本的数学和阅读技巧。<br>这本书以习题的方式引导读者一步一步学习编程，从简单的打印一直讲到完整项目的实现。也许读完这本书并不<br>意味着你已经学会了编程，但至少你会对编程语言以及编程这个行业有一个初步的了解。</p></blockquote><ul><li>《简明 Python 教程》    （《A Byte of Python》）</li></ul><p><a href="https://www.gitbook.com/book/lenkimo/byte-of-python-chinese-edition/details">简明 Python 教程-Gitbook</a></p><p>看一下激动人心的前言介绍：</p><blockquote><p>本书将以指南或教程的形式向你介绍<code>Python</code>这门编程语言。它以新手为主要目标。同时本书也对有经验的程序员有所帮助。<br>如果你对电脑的所有了解仅止步于如何保存文本文件的话，那本书的目标便是协助你通过本书学习<code>Python</code>。如果在此之前你已经有了编程经验，你同样可以通过本书来学习<code>Python</code>。<br>如果你已经有过编程经验，你或许会对<code>Python</code>与其它你所喜爱的编程语言间有何区别抱有兴趣——而我将会你展现许多这种区别。顺便提醒你一下，<code>Python</code>将会很快成为你最喜欢的编程语言！</p></blockquote><ul><li>《 Python 3 官方教程》</li></ul><p><a href="http://www.pythondoc.com/pythontutorial3/index.html">Python 入门指南中文版</a><br><a href="https://docs.python.org/3/">Python 官方教程（英文原版）</a></p><p>更新、权威、条理化的官方<code>tutorial</code> ，最原汁原味的<code>Python</code>指南。</p><ul><li>《零基础学 Python》/《跟老齐学 Python》</li></ul><p><a href="https://www.gitbook.com/book/looly/python-basic/details">零基础学 Python</a></p><p>这本教程是我当初开始自学的时候看过的，由于是国内作者，语言习惯更适合我们，顺便也推荐给大家。</p><blockquote><p>在我看来，<code>Python</code>是非常适合作为学习高级语言编程的第一门语言的。有一本书，名字叫《与孩子一起学编程》，这本书的定位，是将 python 定位为学习者学习的第一门高级编程语言。然而，由于读者对象是孩子，很多“成年人”不屑一顾，当然，里面的讲法与“实战”有点距离，导致以“找工作”、“工作需要”为目标的学习者，认为这本书跟自己要学的方向相差甚远。<br>为了弥补那本书的缺憾，我在这里推出面向成年人——大学生、或者其他想学习程序但是没有任何编程基础的朋友——学习第一门编程高级语言的教程。</p></blockquote><p>读完上面的书，你已经掌握<code>Python</code>的语法特点，可以看懂语言逻辑，也可以按照自己的想法写一点小<code>demo</code>了。这个时候，如果打算从事相关工作，可以尝试迈出第一步啦。需要提醒大家的是：读书和做写代码应该是并驾齐驱的，不能一味地去读书，也不要一味敲代码。（当然，你可能也写不出来）只有相互有机结合，才能记得稳固，学得牢靠。</p><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><ul><li>《流畅的 Python》   (《Fluent Python-Clear, Concise, and Effective Programming》)</li></ul><p><a href="https://github.com/cundi/fluent-python">流畅的 Python(未完成)</a></p><blockquote><p>这本书并不是一本完备的 <code>Python</code> 使用手册，而是会强调 <code>Python</code> 作为编程语言独有的特性，这些特性或者是只有 <code>Python</code> 才具备的，或者是在其他大众语言里很少见的。本书的目标读者是那些正在使用 <code>Python</code>，又想熟悉 <code>Python 3</code> 的程序员。本书的主要目的是为了充分地展现 <code>Python 3.4</code> 的魅力。</p></blockquote><ul><li>《《Python Cookbook》3rd Edition 》</li></ul><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/">Python Cookbook</a></p><blockquote><p>这本书的目标读者是那些想深入理解<code>Python</code>语言机制和现代编程风格的有经验的<code>Python</code>程序员。本书大部分内容集中于在标准库，框架和应用程序中广泛使用的高级技术。<br>本书所有示例均假设读者具有一定的编程背景并且可以读懂相关主题 （比如基本的计算机科学知识，数据结构知识，算法复杂度，系统编程，并行，C 语言编程等）。 另外，每个示例都只是一个入门指导，如果读者想深入研究，需要自己去查阅更多资料。我们假定读者可以很熟练的使用搜索引擎以及知道怎样查询在线的<code>Python</code>文档。</p></blockquote><p>读完上面的书，你已经可以写出<code>Pythonic</code>的代码了，应该对<code>Python</code>有了自己的理解，并且也会有自己的方向，可以确定自己的发展方向：Web 应用开发、爬虫数据分析、网络安全、运维测试、<code>Linux</code>系统开发、人工智能/机器学习。相信这个时候你已经不再需要别人的推荐，那么是时候为<code>Python</code>的蓬勃发展贡献自己的力量啦！</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://foofish.net/python-free-ebook.html">免费中文 Python 电子书（教程）</a><br><a href="https://github.com/Junnplus/awesome-python-books/blob/master/README-ZH_CN.md">Awesome Python Books</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Python 进行计数统计</title>
      <link href="blog/2017-11-21/how-to-count-sequense-with-python/"/>
      <url>blog/2017-11-21/how-to-count-sequense-with-python/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="使用常规for循环"><a href="#使用常规for循环" class="headerlink" title="使用常规for循环"></a>使用常规<code>for</code>循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: test_seq = <span class="string">&#x27;asfsdgfads&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: count_dict = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: <span class="keyword">for</span> item <span class="keyword">in</span> test_seq:</span><br><span class="line">    ...:     <span class="keyword">if</span> item <span class="keyword">in</span> count_dict:</span><br><span class="line">    ...:         count_dict[item] += <span class="number">1</span></span><br><span class="line">    ...:     <span class="keyword">else</span>:</span><br><span class="line">    ...:         count_dict[item] = <span class="number">0</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: count_dict</span><br><span class="line">Out[<span class="number">56</span>]: &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="使用collections库中的defaultdict"><a href="#使用collections库中的defaultdict" class="headerlink" title="使用collections库中的defaultdict"></a>使用<code>collections</code>库中的<code>defaultdict</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">57</span>]: <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: cd_dict = defaultdict()</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: cd_dict = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: <span class="keyword">for</span> item <span class="keyword">in</span> test_seq:</span><br><span class="line">    ...:     cd_dict[item] += <span class="number">1</span></span><br><span class="line">    ...:</span><br><span class="line">In [<span class="number">62</span>]: cd_dict</span><br><span class="line">Out[<span class="number">62</span>]: defaultdict(<span class="built_in">int</span>, &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">3</span>&#125;)</span><br><span class="line">In [<span class="number">63</span>]: cd_dict.items()</span><br><span class="line">Out[<span class="number">63</span>]: [(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;s&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;g&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;f&#x27;</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><h2 id="使用collections库中的Counter"><a href="#使用collections库中的Counter" class="headerlink" title="使用collections库中的Counter"></a>使用<code>collections</code>库中的<code>Counter</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">64</span>]: <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">In [<span class="number">65</span>]: Counter(test_data)</span><br><span class="line">Out[<span class="number">65</span>]: Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: counter = Counter(test_seq)</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: counter.items()</span><br><span class="line">Out[<span class="number">85</span>]: [(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;s&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;g&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;f&#x27;</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><h2 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h2><ul><li>《编写高质量代码：改善 Python 程序的 91 个建议》迷你书-建议 39：使用 Counter 进行计数统计</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> HOWTO </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在搭建 Hexo 中遇到的问题记录</title>
      <link href="blog/2017-11-18/how-to-build-hexo-blog/"/>
      <url>blog/2017-11-18/how-to-build-hexo-blog/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>在网络上搜索一天多才磕磕绊绊搭建好 <a href="https://www.masantu.com/">这个</a> 博客，⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄ 现在把过程中遇到的坑记录一下，希望可以给之后的同学们带来帮助。<br><a id="more"></a></p><h2 id="npm-包管理安装太慢怎么办"><a href="#npm-包管理安装太慢怎么办" class="headerlink" title="npm 包管理安装太慢怎么办"></a>npm 包管理安装太慢怎么办</h2><ul><li>临时使用<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure></li><li>持久使用(更换源链接为淘宝源)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置后可通过下面方式来验证是否成功</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">npm info express</span><br></pre></td></tr></table></figure></li><li>通过 cnpm 使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"># 使用</span><br><span class="line">cnpm install expresstall express</span><br></pre></td></tr></table></figure>还可以参考下面这个工具:</li></ul><p><a href="https://segmentfault.com/a/1190000000473869">nrm —— 快速切换 NPM 源 （附带测速功能）</a></p><h2 id="我有两台电脑-换电脑后如何重新发布博客"><a href="#我有两台电脑-换电脑后如何重新发布博客" class="headerlink" title="我有两台电脑/换电脑后如何重新发布博客"></a>我有两台电脑/换电脑后如何重新发布博客</h2><p>使用 Github 的 branch 功能建立两个分支，（如：master 和 hexo）设置 hexo 分支为默认分支，然后将博客后台配置文件全部<code>push</code>到该分支。master 端为使用<code>hexo d</code>命令发布分支。</p><p><strong>注：</strong>master 分支不能当作他用，只能作为 hexo 发布之后使用。</p><p>可以参考下面链接配置：<br><a href="http://www.jianshu.com/p/beb8d611340a">Hexo 博客从一台电脑迁移到其他电脑 - 简书</a></p><h2 id="如何设置腾讯公益为-404-页面"><a href="#如何设置腾讯公益为-404-页面" class="headerlink" title="如何设置腾讯公益为 404 页面"></a>如何设置腾讯公益为 404 页面</h2><p>以下是知乎网友给出的回答：</p><blockquote><p>直接在 source 根目录下创建自己的<code>404.html</code>即可。<del>但是自定义 404 页面仅对绑定顶级域名的项目才起作用。</del></p></blockquote><p>经我试验并不一定要绑定顶级域名才可以，使用官方给出的方案设置后并不能实现错误页面跳转到我们设置的 404 页面。<br>以下来自 github 网友在 issues 中的解释：</p><blockquote><p>你的站点(编注：二级域名即 Github)启用了 https，腾讯公益 404 的脚本是 http 协议，因此这段脚本被阻止了。</p></blockquote><p>解决的方法是将页面里的 script 换成如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/plain&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.qq.com/404/search_children.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;/&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;回到我的主页&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/data.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/page.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>经试验该方法还是会出现问题，使用 F12 审查元素出现报错信息。最后使用以下方案解决该问题:</p><p><a href="https://eason-yang.com/2016/08/06/set-tencent-lostchild-404-page-for-ssl/">使腾讯 404 公益页面支持 HTTPS</a></p><p><del>目前存在问题：页面会有一个卡顿加载的过程，该页面没有适配移动端。</del></p><h2 id="文章页如何设置多标签"><a href="#文章页如何设置多标签" class="headerlink" title="文章页如何设置多标签"></a>文章页如何设置多标签</h2><p>在文章发布页（<code>MARKDOWN</code> 文件顶部）添加如下字段:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">在搭建Hexo中遇到的问题记录</span></span><br><span class="line"><span class="comment"># 标签（注意短横杠后的空格）</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">HOWTO</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo-Next</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">etc.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">imoyao</span></span><br></pre></td></tr></table></figure><h2 id="如何给博客文章页添加音乐"><a href="#如何给博客文章页添加音乐" class="headerlink" title="如何给博客文章页添加音乐"></a>如何给博客文章页添加音乐</h2><p>可以用音乐网站的外链，但是一般外链是<code>&lt;iframe&gt;</code>，据说这个方法影响网站的 <code>SEO</code>。</p><p>下面我就隆重介绍一款 <code>HTML5</code> 音乐播放器——<code>Aplayer</code>。需要用到<code>hexo-tag-aplayer</code>插件。</p><p>切换到本地 Hexo 目录，运行：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-aplayer@2.0.1</span><br></pre></td></tr></table></figure><br>添加音频语法如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#This is a example.</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% aplayer &quot;平凡之路&quot; &quot;朴树&quot; &quot;https:&#x2F;&#x2F;xxx.com&#x2F;%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF.mp3&quot; &quot;https:&#x2F;&#x2F;xxx.com&#x2F;1.jpg&quot; &quot;autoplay&quot; %&#125;</span><br><span class="line">就会出现你想要的音乐啦。</span><br><span class="line"></span><br><span class="line">&#123;% aplayer &quot;蓝莲花&quot; &quot;许巍&quot; &quot;http:&#x2F;&#x2F;oh6j8wijn.bkt.clouddn.com&#x2F;%E8%93%9D%E8%8E%B2%E8%8A%B1.mp3&quot; &quot;http:&#x2F;&#x2F;oh6j8wijn.bkt.clouddn.com&#x2F;133107859321201106e3c3ede9a13305.jpeg&quot; &quot;autoplay&quot; %&#125;&#96;</span><br><span class="line"></span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>如果你想加入歌单，更多参数的配置可以参照<a href="https://github.com/MoePlayer/hexo-tag-aplayer">插件</a>的使用说明。</p><h2 id="如何在文章页插入视频"><a href="#如何在文章页插入视频" class="headerlink" title="如何在文章页插入视频"></a>如何在文章页插入视频</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;/media/Dream-It-Possible.mp4&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 100%; display: block; margin-left: auto; margin-right: auto;&quot;</span>&gt;</span> Your browser does not support the video tag. <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何增加“盘古之白”"><a href="#如何增加“盘古之白”" class="headerlink" title="如何增加“盘古之白”"></a>如何增加“盘古之白”</h2><blockquote><p>有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p></blockquote><p>使用 <a href="https://github.com/hustcc/lint-md/tree/master/packages/lint-md-cli">lint-md</a> 解决博客中英文排版空格的问题；<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lint-md source\_posts\ -f</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="http://theme-next.iissnan.com/getting-started.html">开始使用 - NexT 使用文档</a></li><li><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a></li><li><a href="http://tc9011.com/2016/12/24/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E3%80%81high%E4%B8%80%E4%B8%8B%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%9D%91/">hexo 添加音乐、high 一下及一些坑 | tc9011’s</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客个性化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> HOWTO </tag>
            
            <tag> 博客优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>佛与姑娘</title>
      <link href="blog/2017-11-11/choose-Buddha-or-gril/"/>
      <url>blog/2017-11-11/choose-Buddha-or-gril/</url>
      
        <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>青灯，古佛。喝酒、吃肉、泡姑娘。<br>我盘坐参了你这么长的时间，却总不见你发言。<br>你说五蕴皆空。可谁的心里还不藏着一个不穿衣服的姑娘；你说观法自在，可那姑娘夜夜钻我的被窝，又让我如何是好？<br><a id="more"></a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=28308561&auto=1&height=32"></iframe><p>我想了又想，还是把她办了吧。</p><p>你看这苍生万物，忙碌地生，忙碌地死。你笑他们无知无力，我仰你伟大慈悲。你关照那么多的生死，我却只关心自己的琐碎。<br>索性我也坦胸露乳，我也装它个四大皆空。</p><p>于是，你是不是也该教我个蒙事的法门？一念一执，念她个死心塌地，执她个执迷不悟。<br>管他欢乐还是痛苦，管他喜悦还是悲伤。<br>花间一壶酒，对着月亮喝个死去活来，摸着姑娘的大腿喃喃道：卧槽，真是难得糊涂。</p><p>糊涂着，我抱着那姑娘在床单上滚来又滚去。<br>你掐着手印笑而不语地看着我们手淫。<br>我想着等头发长长了也去烫一头如你一样五蕴皆空的头发，披上一身袈裟和姑娘拉着手私奔——也还是在你的手掌心里游荡。</p><p>说真的，如果你爱我就赶快带我离开。<br>其它的东西都是扯淡，扯多了你就是耍流氓。</p><p>谁说释迦老爷子不耍流氓？那是他自己说的。</p><p>我把木鱼敲碎，把蒲团坐穿，在梦里把你摸了一遍又一遍。<br>我脱了这身衣服就已不再是我，我穿上了衣服自己却怎么也找不到了。</p><p>一时，佛在舍卫国，破衣烂钵：“可有残羹施舍？”<br>一个说：“去去去，哪里来的叫花，这里人人都忙着寂寞，哪有闲工夫理你。”<br>佛说：“寂寞这个东西，多半是姑娘闹的。可到哪去找个姑娘，不可说，不可说。”</p><p>说到头来还是说到姑娘。<br>我就说寂寞就他妈是个光着大腿的姑娘，让你看着又偏偏不让你摸。<br>看得你心也痒痒嘴也痒痒，总憋着法地想一些污言秽语来挑逗她。<br>可越是挑逗她就离你越近，离你越近就越不让你摸。</p><p>我觉得，这很操蛋。</p><p>佛说，这就是法啊，你明知它是真的却总也抓不住，你分明看不到却总在你身边转。逗着你，馋着你，说一些恼人的话来勾引你，惹你生气，惹你欢喜。</p><p>我说，这分明是耍流氓。<br>佛说，对呀，就是耍流氓，你把恶根丢了，把执念丢了，把妄想丢了，把姑娘丢了，脱光了衣服站街上，就立地成佛了。</p><p>我脱光了衣服站在街上，来了两个漂亮的女警察问我在做什么。<br>我说，我立地成佛，然后度你们出苦厄。<br>她们非要把我抓走，我说我<strong>日</strong>你们老母！！！</p><p>佛笑了，坐在远远的云端，莲花台上。<br>我说这不科学，众生太执，姑娘又太美，教人怎么度，怎么个无欲无求。<br>佛打了个哈欠，就没再说什么。</p><p>我觉得这有些扯，但还是耐着性子思索一些事情。<br>最后我决定，还是把那个勾引我的小娘们给办了。</p><p>办她个五蕴皆空，度她出寂寞的苦厄。</p><blockquote><p>你总有一天要跟过去所有的记忆相安无事地握手言和。那里面有你有她，有她留下来的温软年华也有你的鲜衣怒马。那个人永远活在时间里了，你把她拉不出来，自己也回不去。就这样吧，让她安静地留在那里。她不会发福，不会老去，不会吵闹，不会穿着职业套装高跟鞋，不会带着家长里短柴油米醋的气息，她永远年轻永远漂亮，穿着鲜艳长裙、披着刚染的微卷长发站在回忆里对着你笑靥如花。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 悦读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美文 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
